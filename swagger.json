{
  "openapi": "3.0.1",
  "info": {
    "title": "API",
    "version": "v2.0"
  },
  "paths": {
    "/api/v2/attachments/{id}": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "summary": "Download attachment file",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "width",
            "in": "query",
            "description": "Width of the result image",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Height of the result image",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "resizeType",
            "in": "query",
            "description": "Type of resizing to apply to the result image",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ImageResizeType"
                }
              ]
            }
          },
          {
            "name": "backgroundColor",
            "in": "query",
            "description": "Color of the background if the `resizeType` is `AddBackgroundStripes`",
            "schema": {
              "maxLength": 7,
              "minLength": 7,
              "pattern": "#[0-9A-Fa-f]{6}",
              "type": "string"
            }
          },
          {
            "name": "preview",
            "in": "query",
            "description": "If image must be converted to a preview (lower quality, no animation)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Attachments"
        ],
        "summary": "Delete attachment file",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Attachment file was deleted successfully"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Attachment file is already in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/attachments": {
      "post": {
        "tags": [
          "Attachments"
        ],
        "summary": "Upload new attachment file",
        "description": "File size is restricted to 50 MB (52 428 800 bytes)",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentModel"
                }
              }
            }
          },
          "400": {
            "description": "\n- Invalid file contents\r\n\n- Invalid HTTP headers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/attachments/occupiedFileStorageSize": {
      "get": {
        "tags": [
          "Attachments"
        ],
        "summary": "Get size of attachments storage in bytes",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/autoTests/search": {
      "post": {
        "tags": [
          "AutoTests"
        ],
        "summary": "Search for autotests",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AutotestsSelectModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AutoTestModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for autotests library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/autoTests": {
      "get": {
        "tags": [
          "AutoTests"
        ],
        "operationId": "GetAllAutoTests",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "Project internal ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "externalId",
            "in": "query",
            "description": "Autotest external ID",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "globalId",
            "in": "query",
            "description": "Autotest global ID",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "namespace",
            "in": "query",
            "description": "Namespace in which autotest is located",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isNamespaceNull",
            "in": "query",
            "description": "OBSOLETE: Use `includeEmptyNamespaces` instead",
            "schema": {
              "type": "boolean",
              "deprecated": true
            }
          },
          {
            "name": "includeEmptyNamespaces",
            "in": "query",
            "description": "If result must contain autotests without namespace",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "className",
            "in": "query",
            "description": "Name of class in which autotest is located",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isClassnameNull",
            "in": "query",
            "description": "OBSOLETE: Use `includeEmptyClassNames` instead",
            "schema": {
              "type": "boolean",
              "deprecated": true
            }
          },
          {
            "name": "includeEmptyClassNames",
            "in": "query",
            "description": "If result must contain autotests without class",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "OBSOLETE: Use `deleted` instead",
            "schema": {
              "type": "boolean",
              "deprecated": true
            }
          },
          {
            "name": "deleted",
            "in": "query",
            "description": "Is autotest deleted",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "labels",
            "in": "query",
            "description": "Include only autotests with provided labels",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "stabilityMinimal",
            "in": "query",
            "description": "OBSOLETE: Use `minStability` instead",
            "schema": {
              "type": "integer",
              "format": "int32",
              "deprecated": true
            }
          },
          {
            "name": "minStability",
            "in": "query",
            "description": "Minimum stability value of autotest",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "stabilityMaximal",
            "in": "query",
            "description": "OBSOLETE: Use `maxStability` instead",
            "schema": {
              "type": "integer",
              "format": "int32",
              "deprecated": true
            }
          },
          {
            "name": "maxStability",
            "in": "query",
            "description": "Maximum stability value of autotest",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "isFlaky",
            "in": "query",
            "description": "OBSOLETE: Use `flaky` instead",
            "schema": {
              "type": "boolean",
              "deprecated": true
            }
          },
          {
            "name": "flaky",
            "in": "query",
            "description": "Is autotest marked as \"Flaky\"",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeSteps",
            "in": "query",
            "description": "If result must also include autotest steps",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeLabels",
            "in": "query",
            "description": "If result must also include autotest labels",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "externalKey",
            "in": "query",
            "description": "External key of autotest",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AutoTestModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "AutoTests"
        ],
        "summary": "Create autotest",
        "description": "\nThis method creates a new autotest.\r\n\nTo add an autotest to the test plan, link it to a work item using the `POST /api/v2/autoTests/{autoTestId}/workItems` method.\r\n\nUse the `POST /api/v2/testRuns/byAutoTests` method to run autotest outside the test plan.",
        "operationId": "CreateAutoTest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AutoTestPostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoTestModel"
                }
              }
            }
          },
          "400": {
            "description": "\n- Name cannot be empty or contain only white space characters\r\n\n- External ID cannot be empty or contain only white space characters\r\n\n- Namespace cannot be empty or contain only white space characters\r\n\n- Classname cannot be empty or contain only white space characters\r\n\n- Steps cannot be `null`\r\n\n- Steps nesting level is more than 15\r\n\n- Invalid URI",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for autotests is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Project with provided ID cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Autotest with the same external ID already exists is the project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "\n- Labels have duplicates\r\n\n- Labels begin with `::`\r\n\n- Labels with the same base have different values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AutoTests"
        ],
        "summary": "Update autotest",
        "description": "\nUse case\r\n\nUser sets autotest updated parameters values (listed in the example) and runs method execution\r\n\nSystem finds the autotest by the identifier\r\n\nSystem updates autotest parameters \r\n\n\r\n            [Optional] If steps enumeration is set, system creates step items, relates them to autotest\r\n            and deletes relations with current steps( if exist)\r\n            \r\n\n\r\n            [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest\r\n            and deletes relations with current Setup items (if exist)\r\n            \r\n\n\r\n            [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest\r\n            and deletes relations with current teardown items (if exist)\r\n            \r\n\n\r\n            [Optional] If label enumeration is set, system creates labels and relates them to autotest\r\n            and deletes relations with current Labels (if exist)\r\n            \r\n\n\r\n            [Optional] If link enumeration is set, system creates links and relates them to autotest\r\n            and deletes relations with current Links (if exist)\r\n            \r\n\nSystem updates autotest and returns no content response",
        "operationId": "UpdateAutoTest",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AutoTestPutModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "\n- Name cannot be empty or contain only white space characters\r\n\n- External ID cannot be empty or contain only white space characters\r\n\n- Namespace cannot be empty or contain only white space characters\r\n\n- Classname cannot be empty or contain only white space characters\r\n\n- Steps cannot be `null`\r\n\n- Steps nesting level is more than 15\r\n\n- Invalid URI",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for autotests is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\n- Autotests with provided ID cannot be found\r\n\n- Project with provided ID cannot be found\r\n\n- Link with provided ID cannot be found\r\n\n- Label with provided ID cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Autotest with the same external ID already exists is the project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "\n- Project ID cannot be changed\r\n\n- Labels have duplicates\r\n\n- Labels begin with `::`\r\n\n- Labels with the same base have different values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "Success"
          }
        }
      }
    },
    "/api/v2/autoTests/{id}": {
      "get": {
        "tags": [
          "AutoTests"
        ],
        "summary": "Get autotest by internal or global ID",
        "description": "\nUse case\r\n\nUser sets autotest internal or global identifier and runs method execution\r\n\nSystem returns autotest, which internal or global identifier equals the identifier value set in the previous action",
        "operationId": "GetAutoTestById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Autotest internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoTestModel"
                }
              }
            }
          },
          "404": {
            "description": "Autotest with provided ID cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Autotest ID is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for autotests is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "AutoTests"
        ],
        "summary": "Patch auto test",
        "description": "See <a href=\"https://www.rfc-editor.org/rfc/rfc6902\" target=\"_blank\">RFC 6902: JavaScript Object Notation (JSON) Patch</a> for details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Global Id of auto test",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for auto tests is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AutoTests"
        ],
        "summary": "Delete autotest",
        "description": "\nUse case\r\n\nUser sets autotest internal (guid format) or global (integer format) identifier and runs method execution\r\n\nSystem finds the autotest by the identifier\r\n\nSystem deletes autotest and returns no content response",
        "operationId": "DeleteAutoTest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Autotest internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Delete permission for autotests is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Autotest with provided ID cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/autoTests/bulk": {
      "post": {
        "tags": [
          "AutoTests"
        ],
        "summary": "Create multiple autotests",
        "description": "\nUse case\r\n\nUser sets autotest parameters (listed in the example) and runs method execution\r\n\nSystem creates autotest\r\n\n[Optional] If steps enumeration is set, system creates step items and relates them to autotest\r\n\n[Optional] If setup enumeration is set, system creates setup items and relates them to autotest\r\n\n[Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest\r\n\n[Optional] If label enumeration is set, system creates labels and relates them to autotest\r\n\n[Optional] If link enumeration is set, system creates links and relates them to autotest\r\n\nSystem returns autotest model (example listed in response parameters)",
        "operationId": "CreateMultiple",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AutoTestPostModel"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AutoTestModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "\n- Name cannot be empty or contain only white space characters\r\n\n- External ID cannot be empty or contain only white space characters\r\n\n- Namespace cannot be empty or contain only white space characters\r\n\n- Classname cannot be empty or contain only white space characters\r\n\n- Steps cannot be `null`\r\n\n- Steps nesting level is more than 15\r\n\n- Invalid URI",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for autotests is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Project with provided ID cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Autotest with the same external ID already exists is the project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "\n- Labels have duplicates\r\n\n- Labels begin with `::`\r\n\n- Labels with the same base have different values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "AutoTests"
        ],
        "summary": "Update multiple autotests",
        "description": "\nUse case\r\n\nUser sets autotest updated parameters values (listed in the example) and runs method execution\r\n\nSystem finds the autotest by the identifier\r\n\nSystem updates autotest parameters \r\n\n\r\n            [Optional] If steps enumeration is set, system creates step items, relates them to autotest\r\n            and deletes relations with current steps( if exist)\r\n            \r\n\n\r\n            [Optional] If Setup enumeration is set, system creates setup items and relates them to autotest\r\n            and deletes relations with current Setup items (if exist)\r\n            \r\n\n\r\n            [Optional] If teardown enumeration is set, system creates teardown items and relates them to autotest\r\n            and deletes relations with current teardown items (if exist)\r\n            \r\n\n\r\n            [Optional] If label enumeration is set, system creates labels and relates them to autotest\r\n            and deletes relations with current Labels (if exist)\r\n            \r\n\n\r\n            [Optional] If link enumeration is set, system creates links and relates them to autotest\r\n            and deletes relations with current Links (if exist)\r\n            \r\n\nSystem updates autotest and returns no content response",
        "operationId": "UpdateMultiple",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AutoTestPutModel"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\n- Name cannot be empty or contain only white space characters\r\n\n- External ID cannot be empty or contain only white space characters\r\n\n- Namespace cannot be empty or contain only white space characters\r\n\n- Classname cannot be empty or contain only white space characters\r\n\n- Steps cannot be `null`\r\n\n- Steps nesting level is more than 15\r\n\n- Invalid URI",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for autotests is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\n- Autotests with provided ID cannot be found\r\n\n- Project with provided ID cannot be found\r\n\n- Link with provided ID cannot be found\r\n\n- Label with provided ID cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Autotest with the same external ID already exists is the project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "\n- Project ID cannot be changed\r\n\n- Labels have duplicates\r\n\n- Labels begin with `::`\r\n\n- Labels with the same base have different values",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/autoTests/{id}/workItems": {
      "get": {
        "tags": [
          "AutoTests"
        ],
        "summary": "Get work items linked to autotest",
        "description": "\n\r\n            This method links an autotest to a test case or a checklist.\r\n            A manual test case with a linked automated work item is marked in the test management system as an autotest.\r\n            You can run it from graphical user interface (GUI). To do that:\r\n            \r\n\n\r\n            1. Open the project in GUI.\n\r\n            2. Go to <b>Test plans</b> section and switch to the <b>Execution</b> tab.\n\r\n            3. Select the autotest(s) you want to run using checkboxes.\n\r\n            4. In the toolbar above the test list, click <b>Run autotests</b>.\r\n            ",
        "operationId": "GetWorkItemsLinkedToAutoTest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Specifies the autotest entity ID.\n\r\nYou can copy it from the address bar in your web browser or use autotest GUID.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "Specifies that a test is deleted or still relevant.",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "isWorkItemDeleted",
            "in": "query",
            "description": "OBSOLETE: Use `isDeleted` instead",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemIdentifierModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for autotests is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Autotest with provided ID cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "AutoTests"
        ],
        "summary": "Link autotest with work items",
        "description": "\nUse case\r\n\nUser sets autotest internal (guid format) or global (integer format) identifier\r\n\nUser sets work item internal (guid format) or global (integer format) identifier\r\n\nUser runs method execution\r\n\nSystem finds the autotest by the autotest identifier\r\n\nSystem finds the work item by the work item identifier\r\n\nSystem relates the work item with the autotest and returns no content response",
        "operationId": "LinkAutoTestToWorkItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Autotest internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WorkItemIdModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\n- Autotest cannot be linked to shared steps\r\n\n- Autotest cannot be linked to work item from other project\r\n\n- Work item ID is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for autotests is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\n- Autotest with provided ID cannot be found\r\n\n- Work item with provided ID cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "AutoTests"
        ],
        "summary": "Unlink autotest from work item",
        "description": "\nUse case\r\n\nUser sets autotest internal (guid format) or global (integer format) identifier\r\n\n[Optional] User sets workitem internal (guid format) or global (integer format) identifier\r\n\nUser runs method execution\r\n\nSystem finds the autotest by the autotest identifier\r\n\n\r\n            [Optional] if workitem id is set by User, System finds the workitem by the workitem identifier and unlinks it\r\n            from autotest.\r\n            \r\n\n[Optional] Otherwise, if workitem id is not specified, System unlinks all workitems linked to autotest.\r\n\nSystem returns no content response",
        "operationId": "DeleteAutoTestLinkFromWorkItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Autotest internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "workItemId",
            "in": "query",
            "description": "Work item internal (UUID) or global (integer) identifier",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Work item ID is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for autotests is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\n- Autotest with provided ID cannot be found\r\n\n- Work item with provided ID cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/autoTests/{id}/testResultHistory": {
      "get": {
        "tags": [
          "AutoTests"
        ],
        "operationId": "GetWorkItemResults",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Take results from this date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Take results until this date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "configurationIds",
            "in": "query",
            "description": "Identifiers of test result configurations",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "testPlanIds",
            "in": "query",
            "description": "Identifiers of test plans which contain test results",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "userIds",
            "in": "query",
            "description": "Identifiers of users who set test results",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "outcomes",
            "in": "query",
            "description": "List of outcomes of test results",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "isAutomated",
            "in": "query",
            "description": "OBSOLETE: Use `Automated` instead",
            "schema": {
              "type": "boolean",
              "deprecated": true
            }
          },
          {
            "name": "automated",
            "in": "query",
            "description": "If result must consist of only manual/automated test results",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "testRunIds",
            "in": "query",
            "description": "Identifiers of test runs which contain test results",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestResultHistoryReportModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/autoTests/{id}/testResults/search": {
      "post": {
        "tags": [
          "AutoTests"
        ],
        "summary": "Get test results history for autotest",
        "description": "\nUse case\r\n\nUser sets autotest internal (guid format) or global (integer format) identifier\r\n\nUser sets getTestResultHistoryReportQuery (listed in the example)\r\n\nUser runs method execution\r\n\nSystem search for test results using filters set by user in getTestResultHistoryReportQuery and id\r\n\nSystem returns the enumeration of test results",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Autotest identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/AutotestHistoricalResultSelectModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AutotestResultHistoricalGetModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for autotests required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Autotest with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/autoTests/{id}/testRuns": {
      "get": {
        "tags": [
          "AutoTests"
        ],
        "summary": "Get completed tests runs for autotests",
        "description": "\nUse case\r\n\nUser sets autotest internal (guid format) or global (integer format) identifier\r\n\nUser runs method execution\r\n\nSystem search for all test runs related to the autotest\r\n\nSystem returns the enumeration of test runs",
        "operationId": "GetTestRuns",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Autotest internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestRunShortModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for autotests is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Autotest with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/autoTests/{id}/averageDuration": {
      "get": {
        "tags": [
          "AutoTests"
        ],
        "summary": "Get average autotest duration",
        "description": "\nUse case\r\n\nUser sets autotest internal (guid format) or global (integer format) identifier\r\n\nUser runs method execution\r\n\nSystem calculates pass average duration and fail average duration of autotest from all related test results\r\n\nSystem returns pass average duration and fail average duration for autotest",
        "operationId": "GetAutoTestAverageDuration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Autotest internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AutoTestAverageDurationModel"
                }
              }
            }
          },
          "404": {
            "description": "Autotest with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for autotests is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/autoTests/{id}/chronology": {
      "get": {
        "tags": [
          "AutoTests"
        ],
        "summary": "Get autotest chronology",
        "description": "\nUse case\r\n\nUser sets autotest internal (guid format) or global (integer format) identifier\r\n\nUser runs method execution\r\n\nSystem search all test results related to autotest (with default limit equal 100)\r\n\nSystem orders the test results by CompletedOn property descending and then orders by CreatedDate property descending\r\n\nSystem returns test result chronology for autotest",
        "operationId": "GetAutoTestChronology",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Autotest internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestResultChronologyModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for autotests is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Autotest with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/autoTests/{id}/workItems/changed/id": {
      "get": {
        "tags": [
          "AutoTests"
        ],
        "summary": "Get identifiers of changed linked work items",
        "description": "User permissions for project:\r\n- Read only\r\n- Execute\r\n- Write\r\n- Full control",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Invalid user permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Autotest with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/autoTests/{id}/workItems/changed/{workItemId}/approve": {
      "post": {
        "tags": [
          "AutoTests"
        ],
        "summary": "Approve changes to work items linked to autotest",
        "description": "User permissions for project:\r\n- Read only\r\n- Execute\r\n- Write\r\n- Full control",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "workItemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Invalid user permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Autotest with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/autoTests/flaky/bulk": {
      "post": {
        "tags": [
          "AutoTests"
        ],
        "summary": "Set \"Flaky\" status for multiple autotests",
        "description": "User permissions for project:\r\n- Read only\r\n- Execute\r\n- Write\r\n- Full control",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/FlakyBulkModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Invalid user permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Autotests with provided identifiers do not belong to the same project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/backgroundJobs": {
      "get": {
        "tags": [
          "BackgroundJobs"
        ],
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BackgroundJobGetModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/backgroundJobs/search": {
      "post": {
        "tags": [
          "BackgroundJobs"
        ],
        "summary": "Search for user background jobs",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/BackgroundJobFilterModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BackgroundJobGetModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/backgroundJobs/{id}": {
      "get": {
        "tags": [
          "BackgroundJobs"
        ],
        "summary": "Get background job by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique ID of the background job",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackgroundJobGetModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/backgroundJobs/{id}/status": {
      "get": {
        "tags": [
          "BackgroundJobs"
        ],
        "summary": "Get background job status by job ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique ID of the background job",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackgroundJobState"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/backgroundJobs/{id}/cancel": {
      "post": {
        "tags": [
          "BackgroundJobs"
        ],
        "summary": "Cancel current user background job",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/backgroundJobs/completed": {
      "delete": {
        "tags": [
          "BackgroundJobs"
        ],
        "summary": "Delete all completed background jobs",
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/configurations/search": {
      "post": {
        "tags": [
          "Configurations"
        ],
        "summary": "Search for configurations",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Model containing all the filters",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConfigurationFilterModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigurationModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/configurations/{id}": {
      "get": {
        "tags": [
          "Configurations"
        ],
        "summary": "Get configuration by internal or global ID",
        "description": "\nUse case\r\n\nUser sets configuration internal (guid format) or global (integer format) identifier\r\n\nUser runs method execution\r\n\nSystem search configuration using the identifier\r\n\nSystem returns configuration",
        "operationId": "GetConfigurationById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Configuration internal (guid format) or global (integer format) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for configuration required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find configuration with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Configurations"
        ],
        "summary": "Patch configuration",
        "description": "See <a href=\"https://www.rfc-editor.org/rfc/rfc6902\" target=\"_blank\">RFC 6902: JavaScript Object Notation (JSON) Patch</a> for details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique ID of the configuration",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for configuration is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Configurations"
        ],
        "summary": "Delete configuration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique or global ID of the configuration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Delete permission for configurations is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/configurations": {
      "post": {
        "tags": [
          "Configurations"
        ],
        "summary": "Create Configuration",
        "description": "\nUse case\r\n\nUser sets configuration model (listed in the request example)\r\n\nUser runs method execution\r\n\nSystem creates configuration\r\n\nSystem returns created configuration (listed in the response example)",
        "operationId": "CreateConfiguration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConfigurationPostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConfigurationModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for configuration required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Configuration with the same name already exists!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Configurations"
        ],
        "summary": "Edit configuration",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConfigurationPutModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for configurations is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/configurations/{id}/purge": {
      "post": {
        "tags": [
          "Configurations"
        ],
        "summary": "Permanently delete configuration from archive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique or global ID of the configuration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Full access permission for the archive is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/configurations/purge/bulk": {
      "post": {
        "tags": [
          "Configurations"
        ],
        "summary": "Permanently delete multiple archived configurations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConfigurationSelectModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Full access permission for the archive is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/configurations/delete/bulk": {
      "post": {
        "tags": [
          "Configurations"
        ],
        "summary": "Delete multiple configurations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConfigurationSelectModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/configurations/{id}/restore": {
      "post": {
        "tags": [
          "Configurations"
        ],
        "summary": "Restore configuration from the archive",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique or global ID of the configuration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for archive is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/configurations/restore/bulk": {
      "post": {
        "tags": [
          "Configurations"
        ],
        "summary": "Restore multiple configurations from the archive",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConfigurationSelectModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for archive is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/configurations/createByParameters": {
      "post": {
        "tags": [
          "Configurations"
        ],
        "summary": "Create configurations by parameters",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ConfigurationByParametersModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for configuration is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/customAttributes/{id}": {
      "get": {
        "tags": [
          "CustomAttributes"
        ],
        "summary": "Get attribute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique ID of attribute",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomAttributeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/customAttributes/global": {
      "post": {
        "tags": [
          "CustomAttributes"
        ],
        "summary": "Create global attribute",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GlobalCustomAttributePostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomAttributeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "System administrator role is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/customAttributes/global/{id}": {
      "put": {
        "tags": [
          "CustomAttributes"
        ],
        "summary": "Edit global attribute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique ID of attribute",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GlobalCustomAttributeUpdateModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomAttributeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "System administrator role is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomAttributes"
        ],
        "summary": "Delete global attribute",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique ID of attribute",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "System administrator role is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/customAttributes/search": {
      "post": {
        "tags": [
          "CustomAttributes"
        ],
        "summary": "Search for attributes",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomAttributeSearchQueryModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomAttributeModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/customAttributes/templates/{id}": {
      "get": {
        "tags": [
          "CustomAttributeTemplates"
        ],
        "summary": "Get CustomAttributeTemplate by ID",
        "description": "\nUse case\r\n\nUser sets attribute template internal identifier \r\n\nUser runs method execution\r\n\nSystem return attribute template (listed in response example)",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "CustomAttributeTemplate internal (UUID) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomAttributeTemplateModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find a CustomAttributeTemplate with identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "CustomAttributeTemplates"
        ],
        "summary": "Delete CustomAttributeTemplate",
        "description": "\nUse case\r\n\nUser sets attribute template internal identifier\r\n\nUser runs method execution\r\n\nSystem search and delete attribute template\r\n\nSystem returns no content response",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Attribute template internal (UUID) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Admin system role is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/customAttributes/templates/search": {
      "post": {
        "tags": [
          "CustomAttributeTemplates"
        ],
        "summary": "Search CustomAttributeTemplates",
        "description": "\nUse case\r\n\nUser sets search params model (listed in request example)\r\n\nUser runs method execution\r\n\nSystem return attribute templates (listed in response example)",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomAttributeTemplateSearchQueryModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SearchCustomAttributeTemplateGetModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/customAttributes/templates": {
      "post": {
        "tags": [
          "CustomAttributeTemplates"
        ],
        "summary": "Create CustomAttributeTemplate",
        "description": "\nUse case\r\n\nUser sets attribute template parameters (listed in request example)\r\n\nUser runs method execution\r\n\nSystem creates attribute template\r\n\nSystem returns attribute template model (example listed in response parameters)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomAttributeTemplatePostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomAttributeTemplateModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Admin system role is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "CustomAttributeTemplates"
        ],
        "summary": "Update custom attributes template",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomAttributeTemplatePutModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "System administrator role is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/customAttributes/templates/{id}/customAttributes/include": {
      "post": {
        "tags": [
          "CustomAttributeTemplates"
        ],
        "summary": "Include CustomAttributes to CustomAttributeTemplate",
        "description": "\nUse case\r\n\nUser sets attribute template internal identifier\r\n\nUser sets attribute internal identifiers \r\n\nUser runs method execution\r\n\nSystem add attributes to attributes tempalte",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Attribute template internal (UUID) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Admin system role is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/customAttributes/templates/{id}/customAttributes/exclude": {
      "post": {
        "tags": [
          "CustomAttributeTemplates"
        ],
        "summary": "Exclude CustomAttributes from CustomAttributeTemplate",
        "description": "\nUse case\r\n\nUser sets attribute template internal identifier\r\n\nUser sets attribute internal identifiers \r\n\nUser runs method execution\r\n\nSystem delete attributes from attributes tempalte",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Attribute template internal (UUID) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Admin system role is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/customAttributes/templates/{name}": {
      "get": {
        "tags": [
          "CustomAttributeTemplates"
        ],
        "summary": "Get CustomAttributeTemplate by name",
        "description": "\nUse case\r\n\nUser sets attribute template name\r\n\nUser runs method execution\r\n\nSystem search and return list of attribute templates (listed in response example)",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "CustomAttributeTemplate name for search",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomAttributeTemplateModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/notifications/{id}/read": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Set Notification as read",
        "description": "\nUse case\r\n\nUser sets notification internal (guid format) identifier\r\n\nUser runs method execution\r\n\nSystem set notification as read",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find notification with notificationId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/api/v2/notifications/read": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Set all Notifications as read",
        "description": "\nUse case\r\n\nUser runs method execution\r\n\nSystem set all notifications as read",
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "204": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/api/v2/notifications/search": {
      "post": {
        "tags": [
          "Notifications"
        ],
        "summary": "Search Notifications for current User",
        "description": "\nUse case\r\n\nUser set filter and runs method execution\r\n\nSystem returns notifications (listed in the response example)",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/NotificationQueryFilterModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/notifications": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get all Notifications for current User",
        "description": "\nUse case\r\n\nUser runs method execution\r\n\nSystem returns notifications (listed in the response example)",
        "parameters": [
          {
            "name": "notificationType",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NotificationTypeModel"
                }
              ]
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotificationModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "\norderByStatement must have one '.' and no ',' symbols\r\n\norderByStatement has invalid length\r\n\norderByStatement must have uuid as attribute key\r\n\nSearch field not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/notifications/count": {
      "get": {
        "tags": [
          "Notifications"
        ],
        "summary": "Get unread Notifications total in last 7 days",
        "description": "\nUse case\r\n\nUser runs method execution\r\n\nSystem returns unread notifications total (listed in the response example)",
        "parameters": [
          {
            "name": "isRead",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/parameters": {
      "get": {
        "tags": [
          "Parameters"
        ],
        "summary": "Get all parameters",
        "description": "\nUse case\r\n\n[Optional] User sets isDeleted field value\r\n\n[Optional] If User sets isDeleted field value as true, System search all deleted parameters\r\n\n[Optional] If User sets isDeleted field value as false, System search all parameters which are not deleted\r\n\nIf User did not set isDeleted field value, System search all parameters\r\n\nSystem returns array of all found parameters(listed in response model)",
        "operationId": "GetAllParameters",
        "parameters": [
          {
            "name": "isDeleted",
            "in": "query",
            "description": "If result must consist of only actual/deleted parameters",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParameterModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Invalid user permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Parameters"
        ],
        "summary": "Create parameter",
        "description": "\nUse case\r\n\nUser sets parameter model (listed in the request example)\r\n\nUser runs method execution\r\n\nSystem creates parameter\r\n\nSystem returns parameter model",
        "operationId": "CreateParameter",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ParameterPostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Parameters"
        ],
        "summary": "Update parameter",
        "description": "\nUse case\r\n\nUser sets parameter updated properties(listed in the request example)\r\n\nUser runs method execution\r\n\nSystem updated parameter using updated properties\r\n\nSystem returns no content response",
        "operationId": "UpdateParameter",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ParameterPutModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\n- ID is not valid\r\n\n- DTO is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Parameter with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/parameters/search": {
      "post": {
        "tags": [
          "Parameters"
        ],
        "summary": "Search for parameters",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ParameterFilterModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParameterModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/parameters/search/groups": {
      "post": {
        "tags": [
          "Parameters"
        ],
        "summary": "Search for parameters as group",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ParameterFilterModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParameterGroupModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/parameters/{id}": {
      "get": {
        "tags": [
          "Parameters"
        ],
        "summary": "Get parameter by ID",
        "description": "\nUse case\r\n\nUser sets parameter internal (guid format) identifier\r\n\nUser runs method execution\r\n\nSystem search parameter using the identifier\r\n\nSystem returns parameter",
        "operationId": "GetParameterById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter internal (UUID) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParameterModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Parameter with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Parameters"
        ],
        "summary": "Delete parameter",
        "description": "\nUse case\r\n\nUser sets parameter internal (guid format) identifier\r\n\nSystem search and delete parameter\r\n\nSystem returns deleted parameter",
        "operationId": "DeleteParameter",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Parameter internal (UUID) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "\n- ID is not valid\r\n\n- DTO is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Parameter is in use in iterations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/parameters/groups": {
      "get": {
        "tags": [
          "Parameters"
        ],
        "summary": "Get parameters as group",
        "description": "\nUse case\r\n\nUser runs method execution\r\n\nSystem search parameters\r\n\nSystem returns parameters models as groups (listed in the response example)",
        "parameters": [
          {
            "name": "isDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "parameterKeyIds",
            "in": "query",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParameterGroupModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/parameters/key/name/{name}/exists": {
      "get": {
        "tags": [
          "Parameters"
        ],
        "summary": "Check existence parameter key in system",
        "description": "\nUse case\r\n\nUser sets name of parameter key\r\n\nUser runs method execution\r\n\nSystem search parameter key\r\n\nSystem returns the flag for the existence of the parameter key in the system",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/parameters/bulk": {
      "post": {
        "tags": [
          "Parameters"
        ],
        "summary": "Create multiple parameters",
        "description": "\nUse case\r\n\nUser sets list of parameter model (listed in the request example)\r\n\nUser runs method execution\r\n\nSystem creates parameters\r\n\nSystem returns list of parameter model (listed in the response example)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ParameterPostModel"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ParameterModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "\n- Parameter model is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Parameters"
        ],
        "summary": "Update multiple parameters",
        "description": "\nUse case\r\n\nUser sets list of parameter model (listed in the request example)\r\n\nUser runs method execution\r\n\nSystem updates parameters",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ParameterPutModel"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\n- Parameter model is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Invalid user permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/parameters/name/{name}": {
      "delete": {
        "tags": [
          "Parameters"
        ],
        "summary": "Delete parameter by name",
        "description": "Deletes parameter and all it's values",
        "operationId": "DeleteByName",
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "Name of the parameter",
            "required": true,
            "schema": {
              "maxLength": 255,
              "minLength": 0,
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Provided name either is empty or contains only white spaces",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Parameter is in use in iterations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/parameters/keys": {
      "get": {
        "tags": [
          "Parameters"
        ],
        "summary": "Get all parameter keys",
        "description": "\nUse case\r\n\nUser runs method execution\r\n\nSystem search all parameter keys\r\n\nSystem returns parameter keys",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/parameters/{key}/values": {
      "get": {
        "tags": [
          "Parameters"
        ],
        "summary": "Get all parameter key values",
        "description": "\nUse case\r\n\nUser sets parameter key (string format)\r\n\nUser runs method execution\r\n\nSystem search parameter values using the key\r\n\nSystem returns parameter",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Parameter key (string format)",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "SomeKey"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/parameters/keyId/{keyId}": {
      "delete": {
        "tags": [
          "Parameters"
        ],
        "summary": "Delete parameters by parameter key identifier",
        "description": "Deletes parameter and all it's values by parameter key identifier",
        "operationId": "DeleteByParameterKeyId",
        "parameters": [
          {
            "name": "keyId",
            "in": "path",
            "description": "Identifier of the parameter key",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Invalid user permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Parameter is in use in iterations",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/attributes/templates/{templateId}": {
      "post": {
        "tags": [
          "Project attribute templates"
        ],
        "summary": "Add CustomAttributeTemplate to Project",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier \r\n\nUser sets attribute template internal identifier \r\n\nUser runs method execution\r\n\nSystem add attribute template to project",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "CustomAttributeTemplate internal (UUID) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update project settings permission for project required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find a Project with identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project attribute templates"
        ],
        "summary": "Delete CustomAttributeTemplate from Project",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier \r\n\nUser sets attribute template internal identifier \r\n\nUser runs method execution\r\n\nSystem delete attribute template from project",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "templateId",
            "in": "path",
            "description": "CustomAttributeTemplate internal (UUID) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update project settings permission for project required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find a Project with identifier",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/attributes/templates/search": {
      "post": {
        "tags": [
          "Project attribute templates"
        ],
        "summary": "Search for custom attributes templates",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectCustomAttributesTemplatesFilterModel"
                  }
                ],
                "description": "Collection of filters to apply to search"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectCustomAttributeTemplateGetModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Project admin permission for project settings is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/attributes": {
      "get": {
        "tags": [
          "Project attributes"
        ],
        "summary": "Get project attributes",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier\r\n\n[Optional] User sets isDeleted field value\r\n\nUser runs method execution\r\n\nSystem search project\r\n\n[Optional] If User sets isDeleted field value as true, System search all deleted attributes related to project\r\n\n[Optional] If User sets isDeleted field value as false, System search all attributes related to project which are not deleted\r\n\n[Optional] If User did not set isDeleted field value, System search all attributes related to project\r\n\nSystem returns array of found attributes (listed in response model)",
        "operationId": "GetAttributesByProjectId",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DeletionState"
                }
              ],
              "default": "NotDeleted"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomAttributeModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project attributes"
        ],
        "summary": "Create project attribute",
        "description": "\nUse case\r\n\nUser sets attribute parameters (listed in request example) and runs method execution\r\n\nSystem search project\r\n\nSystem creates attribute and relates it to the project\r\n\nSystem returns project attribute properties (example listed in response parameters)",
        "operationId": "CreateProjectsAttribute",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomAttributePostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomAttributeModel"
                }
              }
            }
          },
          "400": {
            "description": "\n- Attribute is `null`\r\n\n- Priority is invalid\r\n\n- Attribute with `Options` type must have an options\r\n\n- ID is not `null`\r\n\n- Option ID is not `null`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for project settings is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Project with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "\n`CustomAttribute.Name` or `CustomAttribute.Id` are not unique in attributes schemes\r\n\n`CustomAttributeOptionModel.Id` or `CustomAttributeOptionModel.Value` are not unique in `attributesScheme.Options`",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Cannot add new attribute from template which is in use",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project attributes"
        ],
        "summary": "Edit attribute of the project",
        "operationId": "UpdateProjectsAttribute",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Unique or global project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomAttributePutModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for project settings is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/attributes/search": {
      "post": {
        "tags": [
          "Project attributes"
        ],
        "summary": "Search for attributes used in the project",
        "operationId": "SearchAttributesInProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Unique or global project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectAttributesFilterModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomAttributeGetModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for project is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/attributes/{attributeId}": {
      "get": {
        "tags": [
          "Project attributes"
        ],
        "summary": "Get project attribute",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier\r\n\nUser sets project attribute identifier\r\n\nUser runs method execution\r\n\nSystem search project\r\n\nSystem search project attribute \r\n\nSystem returns project attribute (listed in response model)",
        "operationId": "GetAttributeByProjectId",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "Project attribute internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CustomAttributeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\n- Project with provided ID was not found\r\n\n- Project attribute with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project attributes"
        ],
        "summary": "Delete project attribute",
        "description": "\nUse case\r\n\nUser sets project identifier and runs method execution\r\n\nUser sets attribute identifier\r\n\nUser runs method execution\r\n\nSystem search project\r\n\nSystem search and delete attribute\r\n\nSystem returns no content response",
        "operationId": "DeleteProjectsAttribute",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeId",
            "in": "path",
            "description": "Project attribute internal (UUID)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\n- Project ID is invalid\r\n\n- Project attribute ID is invalid\r\n\n- Attribute is empty",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for project settings is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Project with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/configurations": {
      "get": {
        "tags": [
          "Project configurations"
        ],
        "summary": "Get project configurations",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier\r\n\nUser runs method execution\r\n\nSystem search project\r\n\nSystem search all configurations related to project\r\n\nSystem returns array of found configurations (listed in response model)",
        "operationId": "GetConfigurationsByProjectId",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigurationModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for configurations required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Project with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/import/json": {
      "post": {
        "tags": [
          "Project import"
        ],
        "summary": "Import project from JSON file into existing project in background job",
        "operationId": "BackgroundImportToExistingProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Select file",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for project settings required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/projects/{projectId}/import/zip": {
      "post": {
        "tags": [
          "Project import"
        ],
        "summary": "Import project from Zip file into existing project in background job",
        "operationId": "BackgroundImportZipToExistingProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Select file",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for project settings required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/projects/{projectId}/import": {
      "post": {
        "tags": [
          "Project import"
        ],
        "summary": "Import project from JSON file into existing project",
        "description": "\nUse case\r\n\nUser attaches project as json file taken from export or export-by-testPlans method\r\n\nUser runs method execution\r\n\nSystem updates project\r\n\nSystem returns no content response",
        "operationId": "ImportToExistingProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeAttachments",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Select file",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "413": {
            "description": "Multipart body length limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for project settings required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Entity with same id already imported in other project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/projects/{projectId}/sections": {
      "get": {
        "tags": [
          "Project sections"
        ],
        "summary": "Get project sections",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier and runs method execution\r\n\nSystem search project\r\n\nSystem search all sections related to the project\r\n\nSystem returns array of sections (listed in response)",
        "operationId": "GetSectionsByProjectId",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SectionModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/testPlans/attributes": {
      "get": {
        "tags": [
          "Project test plan attributes"
        ],
        "summary": "Get project's test plan attributes",
        "description": "\nUse case\r\n\nUser runs method execution\r\n\nSystem returns project for test plans attributes by project identifier",
        "operationId": "GetCustomAttributeTestPlanProjectRelations",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomAttributeModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for project settings is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Project test plan attributes"
        ],
        "summary": "Add attributes to project's test plans",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier and attributes identifiers\r\n\nUser runs method execution\r\n\nSystem updates project and add attributes to project for test plans\r\n\nSystem returns no content response",
        "operationId": "CreateCustomAttributeTestPlanProjectRelations",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\n Attributes must be global ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for project settings is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Project test plan attributes"
        ],
        "summary": "Update attribute of project's test plans",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier and attribute model\r\n\nUser runs method execution\r\n\nSystem updates project and project attribute for test plan\r\n\nSystem returns no content response",
        "operationId": "UpdateCustomAttributeTestPlanProjectRelations",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomAttributeTestPlanProjectRelationPutModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for project settings is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/testPlans/attributes/search": {
      "post": {
        "tags": [
          "Project test plan attributes"
        ],
        "summary": "Search for attributes used in the project test plans",
        "operationId": "SearchTestPlanAttributesInProject",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Unique or global project ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectAttributesFilterModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CustomAttributeGetModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for project is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/testPlans/attributes/{attributeId}": {
      "delete": {
        "tags": [
          "Project test plan attributes"
        ],
        "summary": "Delete attribute from project's test plans",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier and attribute identifier\r\n\nUser runs method execution\r\n\nSystem updates project and delete attribute from project for test plans\r\n\nSystem returns no content response",
        "operationId": "DeleteCustomAttributeTestPlanProjectRelations",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for project settings is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/testPlans/search": {
      "post": {
        "tags": [
          "Project test plans"
        ],
        "summary": "Get Project TestPlans with analytics",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier \r\n\nUser sets request body \r\n\nUser runs method execution\r\n\nSystem returns project testplans with analytics",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "mustUpdateCache",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectTestPlansFilterModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestPlanWithAnalyticModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/testPlans/{name}/exists": {
      "get": {
        "tags": [
          "Project test plans"
        ],
        "summary": "Checks if TestPlan exists with the specified name exists for the project",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier \r\n\nUser runs method execution\r\n\nSystem purge delete project workitems",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "name",
            "in": "path",
            "description": "TestPlan name to check",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/testPlans/analytics": {
      "get": {
        "tags": [
          "Project test plans"
        ],
        "summary": "Get TestPlans analytics",
        "description": "\nUse case\r\n\nUser sets project internal identifier\r\n\nUser sets query params\r\n\nUser runs method execution\r\n\nSystem return analytics",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "mustUpdateCache",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestPlanWithAnalyticModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/testPlans/delete/bulk": {
      "post": {
        "tags": [
          "Project test plans"
        ],
        "summary": "Delete multiple test plans",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Unique or global ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestPlanSelectModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "- Read permission for the project is required\r\n- Delete permission for test plans is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/testPlans/restore/bulk": {
      "post": {
        "tags": [
          "Project test plans"
        ],
        "summary": "Restore multiple test plans",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Unique or global ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestPlanSelectModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for the archive is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/testPlans/purge/bulk": {
      "post": {
        "tags": [
          "Project test plans"
        ],
        "summary": "Permanently delete multiple archived test plans",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Unique or global ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestPlanSelectModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Full access permission for the archive is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/workItems": {
      "get": {
        "tags": [
          "Project work items"
        ],
        "summary": "Get project work items",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier\r\n\n[Optional] User sets isDeleted field value\r\n\nUser runs method execution\r\n\nSystem search project\r\n\n[Optional] If User sets isDeleted field value as true, System search all deleted workitems related to project\r\n\n[Optional] If User sets isDeleted field value as false, System search all workitems related to project which are not deleted\r\n\nIf User did not set isDeleted field value, System search all  workitems related to project\r\n\nSystem returns array of found workitems (listed in response model)",
        "operationId": "GetWorkItemsByProjectId",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "If result must consist of only actual/deleted work items",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "tagNames",
            "in": "query",
            "description": "List of tags to filter by",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "includeIterations",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemShortModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "\n- `orderBy` statement must have one `.` and no `,` characters\r\n\n- `orderBy` statement has invalid length\r\n\n- `orderBy` statement must have UUID as attribute key\r\n\n- Search field was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Project with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/projects/{projectId}/workItems/search": {
      "post": {
        "tags": [
          "Project work items"
        ],
        "summary": "Search for work items",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Unique or global ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WorkItemSelectModel"
                  }
                ],
                "description": "Model containing options to filter work items"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemShortModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/workItems/search/grouped": {
      "post": {
        "tags": [
          "Project work items"
        ],
        "summary": "Search for work items and group results by attribute",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Unique or global ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WorkItemGroupGetModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemGroupModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/workItems/search/id": {
      "post": {
        "tags": [
          "Project work items"
        ],
        "summary": "Search for work items and extract IDs only",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Unique or global ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WorkItemSelectModel"
                  }
                ],
                "description": "Model containing options to filter work items"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{projectId}/workItems/tags": {
      "get": {
        "tags": [
          "Project work items"
        ],
        "summary": "Get WorkItems Tags",
        "description": "\nUse case\r\n\nUser sets project internal identifier \r\n\nUser runs method execution\r\n\nSystem returns work items tags",
        "parameters": [
          {
            "name": "projectId",
            "in": "path",
            "description": "Project internal (UUID) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagShortModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get all projects",
        "description": "\nUse case\r\n\n[Optional] User sets isDeleted field value\r\n\n[Optional] If User sets isDeleted field value as true, System search all deleted projects\r\n\n[Optional] If User sets isDeleted field value as false, System search all projects which are not deleted\r\n\nIf User did not set isDeleted field value, System search all projects\r\n\nSystem returns array of all found projects(listed in response model)",
        "operationId": "GetAllProjects",
        "parameters": [
          {
            "name": "isDeleted",
            "in": "query",
            "description": "If result must consist of only actual/deleted parameters",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "projectName",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Invalid user permissions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Create project",
        "description": "\nUse case\r\n\nUser sets project parameters (listed in request example) and runs method execution\r\n\nSystem creates project\r\n\nSystem returns project model (example listed in response parameters)",
        "operationId": "CreateProject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectPostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Project creator or admin system role is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Project with the same name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Update project",
        "description": "\nUse case\r\n\nUser sets project parameters (listed in request example) and runs method execution\r\n\nSystem updates project\r\n\nSystem returns updated project model (example listed in response parameters)",
        "operationId": "UpdateProject",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectPutModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\n- ID is invalid\r\n\n- Field is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for projects is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Project with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Project with the same name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/search": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Search for projects",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectsFilterModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{id}": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get project by ID",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier and runs method execution\r\n\nSystem search project\r\n\nSystem returns project (example listed in response parameters)",
        "operationId": "GetProjectById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectModel"
                }
              }
            }
          },
          "404": {
            "description": "Project with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "ID is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for projects is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Projects"
        ],
        "summary": "Patch project",
        "description": "See <a href=\"https://www.rfc-editor.org/rfc/rfc6902\" target=\"_blank\">RFC 6902: JavaScript Object Notation (JSON) Patch</a> for details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique or global Id of project",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for projects is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Archive project",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique or global ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Project manager or admin system role is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/name/{name}/exists": {
      "get": {
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/demo": {
      "post": {
        "tags": [
          "Projects"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectPostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{id}/restore": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Restore archived project",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique or global ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Project manager or admin system role is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{id}/purge": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Purge the project",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique or global ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Accepted"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Admin system role is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/restore/bulk": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Restore multiple projects",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectSelectModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Project manager or admin system role is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/purge/bulk": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Purge multiple projects",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/ProjectSelectModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Admin system role is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{id}/autoTestsNamespaces": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get namespaces of autotests in project",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier and runs method execution\r\n\nSystem search project\r\n\nSystem search all autotest related to the project\r\n\nSystem returns array of autotest with namespaces and classnames (listed in response)",
        "operationId": "GetAutoTestsNamespaces",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AutoTestNamespaceModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Project with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{id}/globalAttributes": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Add global attributes to project",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier and attributes identifiers\r\n\nSystem search project\r\n\nSystem relates global attributes with project\r\n\nSystem returns no content response",
        "operationId": "AddGlobaAttributesToProject",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "description": "\n Attributes must be global ",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Project admin permission for project settings is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Project with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{id}/testPlans": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get project test plans",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier\r\n\n[Optional] User sets isDeleted field value\r\n\nUser runs method execution\r\n\nSystem search project\r\n\n[Optional] If User sets isDeleted field value as true, System search all deleted test plans related to project\r\n\n[Optional] If User sets isDeleted field value as false, System search all test plans related to project which are not deleted\r\n\n[Optional] If User did not set isDeleted field value, System search all v related to project\r\n\nSystem returns array of found test plans (listed in response model)",
        "operationId": "GetTestPlansByProjectId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "If result must consist of only actual/archived test plans",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestPlanModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Project with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{id}/testRuns": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get project test runs",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier\r\n\nUser runs method execution\r\n\nSystem search project\r\n\nSystem search all test runs related to project\r\n\nSystem returns array of found test runs (listed in response model)",
        "operationId": "GetTestRunsByProjectId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "notStarted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inProgress",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "stopped",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "completed",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "createdDateFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createdDateTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "testPlanId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestRunV2GetModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test result is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Project with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/import": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Import project from JSON file",
        "description": "\n\r\n  <b>A project can only be exported to another TMS instance, different from the one it was imported from.</b>\r\n\r\n\nThis method imports a `.json` file with a project to the test management system.\r\n\nIn the body of the request, send the `.json` file received by the `POST /api/v2/projects/export` method:\r\n\n\r\n  ```\r\n            curl -X POST \"http://{domain.com}/api/v2/projects/import\" \\\r\n            -H \"accept: /\" -H \"Authorization: PrivateToken {token}\" -H \"Content-Type: multipart/form-data\" \\\r\n            -F \"file=@import.txt;type=text/plain\"\r\n            ```\r\n\r\n\n\r\n            In the second instance, a project with the name of the imported one is created.\r\n            User attributes and the test library (along with content and structure) are imported.\r\n            \r\n\nTest plan execution history from the first instance of TMS cannot be transferred.",
        "operationId": "Import",
        "parameters": [
          {
            "name": "includeAttachments",
            "in": "query",
            "description": "Enables attachment import.",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Select file",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "413": {
            "description": "Multipart body length limit exceeded",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Project creator or admin system role is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Entity with the same ID was already imported in other project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/projects/import/json": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Import project from JSON file in background job",
        "operationId": "BackgroundImportProject",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for project settings required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/import/zip": {
      "post": {
        "tags": [
          "Projects"
        ],
        "summary": "Import project from Zip file in background job",
        "operationId": "BackgroundImportZipProject",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            },
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              },
              "encoding": {
                "file": {
                  "style": "form"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for project settings required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{id}/testPlans/attribute/{attributeId}": {
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete attribute from project's test plans",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier and attribute identifier\r\n\nUser runs method execution\r\n\nSystem updates project and delete attribute from project for test plans\r\n\nSystem returns no content response",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "attributeId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for project settings is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/projects/{id}/testPlans/attribute": {
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Update attribute of project's test plans",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier and attribute model\r\n\nUser runs method execution\r\n\nSystem updates project and project attribute for test plan\r\n\nSystem returns no content response",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CustomAttributeTestPlanProjectRelationPutModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for project settings is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/projects/{id}/autoTests": {
      "delete": {
        "tags": [
          "Projects"
        ],
        "summary": "Delete all autotests from project",
        "operationId": "DeleteProjectAutoTests",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique or global ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Delete permission for AutoTest is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{id}/favorite": {
      "put": {
        "tags": [
          "Projects"
        ],
        "summary": "Mark Project as favorite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{id}/testRuns/active": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get active Project TestRuns",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier \r\n\nUser runs method execution\r\n\nSystem returns active testruns",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PublicTestRunModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{id}/failureClasses": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get failure classes",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique or global ID of the project",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FailureClassModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{id}/filters": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Project filters",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier \r\n\nUser runs method execution\r\n\nSystem returns project filters",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FilterModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/projects/{id}/testRuns/full": {
      "get": {
        "tags": [
          "Projects"
        ],
        "summary": "Get Project TestRuns full models",
        "description": "\nUse case\r\n\nUser sets project internal or global identifier \r\n\nUser sets query params \r\n\nUser runs method execution\r\n\nSystem returns project test runs full models",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project internal (UUID) or global (integer) identifier",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeTestResults",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "mustAggregateTestResults",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "notStarted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inProgress",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "stopped",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "completed",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "createdDateFrom",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createdDateTo",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "testPlanId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestRunModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/search/globalSearch": {
      "post": {
        "tags": [
          "Search"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GlobalSearchRequest"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GlobalSearchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/sections/{id}": {
      "get": {
        "tags": [
          "Sections"
        ],
        "summary": "Get section",
        "description": "\nUse case\r\n\nUser sets section internal (guid format) identifier\r\n\nUser runs method execution\r\n\nSystem search section by the section identifier\r\n\n\r\n            [Optional] If isDeleted flag equals false, deleted work items are not being searched.\r\n            If true, deleted work items are also being searched, null for all work items.\r\n            \r\n\nSystem returns section",
        "operationId": "GetSectionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Section internal (UUID) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/DeletionState"
                }
              ],
              "default": "NotDeleted"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionWithStepsModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Section with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Sections"
        ],
        "summary": "Patch section",
        "description": "See <a href=\"https://www.rfc-editor.org/rfc/rfc6902\" target=\"_blank\">RFC 6902: JavaScript Object Notation (JSON) Patch</a> for details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Section internal (UUID) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for section is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sections"
        ],
        "summary": "Delete section",
        "description": "\nUse case\r\n\nUser sets section identifier\r\n\nUser runs method execution\r\n\nSystem search section by the identifier\r\n\nSystem search and delete nested sections of the found section\r\n\nSystem search and delete workitems related to the found nested sections\r\n\nSystem deletes initial section and related workitem\r\n\nSystem returns no content response",
        "operationId": "DeleteSection",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Section internal (UUID) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Delete permission for test library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Section with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Cannot delete root section",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/sections": {
      "post": {
        "tags": [
          "Sections"
        ],
        "summary": "Create section",
        "description": "\nUse case\r\n\nUser sets section properties (listed in request example)\r\n\nUser runs method execution\r\n\nSystem creates section property values\r\n\nSystem returns section (listed in response example)",
        "operationId": "CreateSection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SectionPostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SectionWithStepsModel"
                }
              }
            }
          },
          "400": {
            "description": "Cannot create section without parent ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Parent section with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Section with the same name already exists in the parent section",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sections"
        ],
        "summary": "Update section",
        "description": "\nUse case\r\n\nUser sets section properties (listed in request example)\r\n\nUser runs method execution\r\n\nSystem search section by the identifier\r\n\nSystem updates section using the property values\r\n\nSystem returns no content response",
        "operationId": "UpdateSection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SectionPutModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\n- ID is invalid\r\n\n- Root section cannot be create",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\n- Section cannot be found\r\n\n- Parent section cannot be found\r\n\n- Project cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Section with the same name already exists in the parent section",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "\n- Root section cannot be edited\r\n\n- Parent ID cannot be changed\r\n\n- Project ID cannot be changed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/sections/rename": {
      "post": {
        "tags": [
          "Sections"
        ],
        "summary": "Rename section",
        "description": "\nUse case\r\n\nUser sets section identifier and new name (listed in request example)\r\n\nUser runs method execution\r\n\nSystem search section by the identifier\r\n\nSystem updates section name using the new name\r\n\nSystem returns no content response",
        "operationId": "Rename",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SectionRenameModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Section with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Section with the same name already exists in the parent section",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Root section cannot be renamed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/sections/move": {
      "post": {
        "tags": [
          "Sections"
        ],
        "summary": "Move section with all work items into another section",
        "operationId": "Move",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SectionMoveModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/sections/{id}/workItems": {
      "get": {
        "tags": [
          "Sections"
        ],
        "summary": "Get section work items",
        "description": "\nUse case\r\n\nUser sets section identifier\r\n\nUser runs method execution\r\n\nSystem search section by the identifier\r\n\nSystem search work items related to the section\r\n\n\r\n            [Optional] If isDeleted flag equals false, deleted work items are not being searched.\r\n            If true, deleted work items are also being searched, null for all work items.\r\n            \r\n\nSystem returns work item collection",
        "operationId": "GetWorkItemsBySectionId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Section internal (UUID) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "isDeleted",
            "in": "query",
            "description": "Requested section is deleted",
            "schema": {
              "type": "boolean",
              "default": false
            }
          },
          {
            "name": "tagNames",
            "in": "query",
            "description": "List of work item tags",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "includeIterations",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemShortModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "\n- `orderBy` statement must have one `.` and no `,` symbols\r\n\n- `orderBy` statement has invalid length\r\n\n- `orderBy` statement must have UUID as attribute key\r\n\n- Search field was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Section with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Get all Tags",
        "description": "\nUse case\r\n\nUser runs method execution\r\n\nSystem returns tags (listed in the response example)",
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      },
      "post": {
        "tags": [
          "Tags"
        ],
        "summary": "Create tag",
        "description": "\nUse case\r\n\nUser sets tag model (listed in the request example)\r\n\nUser runs method execution\r\n\nSystem creates tag\r\n\nSystem returns tag model (listed in the response example)",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagPostModel"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagPostModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagPostModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagPostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              }
            }
          },
          "400": {
            "description": "\n- Name cannot be empty or contain only white space characters\r\n\n- Name already in use\r\n\n- Name must be no more than 30 characters long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tags"
        ],
        "summary": "Update tag",
        "description": "\nUse case\r\n\nUser sets tag ID and model (listed in the request example)\r\n\nUser runs method execution\r\n\nSystem updates tag\r\n\nSystem returns tag model (listed in the response example)",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagPutModel"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagPutModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagPutModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagPutModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagModel"
                }
              }
            }
          },
          "400": {
            "description": "\n- ID is not valid\r\n\n- Name cannot be empty or contain only white space characters\r\n\n- Name already in use\r\n\n- Name must be no more than 30 characters long",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Project creator role is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Tag with provided ID cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Delete tags",
        "description": "\nUse case\r\n\nUser sets collection of tags internal (guid format) identifiers\r\n\nSystem searches and deletes a collection of tags",
        "requestBody": {
          "content": {
            "application/json-patch+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagSelectModel"
                  }
                ]
              }
            },
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagSelectModel"
                  }
                ]
              }
            },
            "text/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagSelectModel"
                  }
                ]
              }
            },
            "application/*+json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TagSelectModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\n- ID is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "System administrator role is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "No tags with provided IDs were found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/tags/search": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Search tags",
        "description": "\nUse case\r\n\nUser runs method execution\r\n\nSystem returns collection of tags (listed in the response example)",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "\norderByStatement must have one '.' and no ',' symbols\r\n\norderByStatement has invalid length\r\n\norderByStatement must have uuid as attribute key\r\n\nSearch field not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/tags/testPlansTags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "summary": "Get all Tags that are used in TestPlans",
        "description": "\nUse case\r\n\nUser runs method execution\r\n\nSystem returns tags (listed in the response example)",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TagModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "\norderByStatement must have one '.' and no ',' symbols\r\n\norderByStatement has invalid length\r\n\norderByStatement must have uuid as attribute key\r\n\nSearch field not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/tags/{id}": {
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Delete tag",
        "description": "\nUse case\r\n\nUser sets tag internal (guid format) identifier\r\n\nSystem search and delete tag",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Tag internal (UUID) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\n- ID is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "System administrator role is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Tag with provided ID cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}": {
      "get": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Get TestPlan by Id",
        "description": "\nUse case\r\n\nUser sets test plan identifier\r\n\nUser runs method execution\r\n\nSystem search  test plan by the identifier\r\n\nSystem returns test plan",
        "operationId": "GetTestPlanById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestPlanModel"
                }
              }
            }
          },
          "404": {
            "description": "Can't find a Project with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Patch test plan",
        "description": "See <a href=\"https://www.rfc-editor.org/rfc/rfc6902\" target=\"_blank\">RFC 6902: JavaScript Object Notation (JSON) Patch</a> for details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique ID of the test plan",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test plan is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Delete TestPlan",
        "description": "\nUse case\r\n\nUser sets test plan identifier\r\n\nUser runs method execution\r\n\nSystem delete test plan\r\n\nSystem returns no content response",
        "operationId": "DeleteTestPlan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Delete permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find a TestPlan with id!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/analytics": {
      "get": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Get analytics by TestPlan",
        "description": "\nUse case\r\n\nUser sets test plan identifier\r\n\nUser runs method execution\r\n\nSystem returns analytics by test plan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestPointAnalyticResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find a Project with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans": {
      "post": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Create TestPlan",
        "description": "\nUse case\r\n\nUser sets test plan properties (listed in request example)\r\n\nUser runs method execution\r\n\nSystem creates test plan\r\n\nSystem returns test plan (listed in response example)",
        "operationId": "CreateTestPlan",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestPlanPostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestPlanModel"
                }
              }
            }
          },
          "400": {
            "description": "\nField is required\r\n\nTags must be no more than 10!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "TestPlan with the same name already exists!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Update TestPlan",
        "description": "\nUse case\r\n\nUser sets test plan properties(listed in request example)\r\n\nUser runs method execution\r\n\nSystem updates test plan\r\n\nSystem returns no content response",
        "operationId": "UpdateTestPlan",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestPlanPutModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\nField is required\r\n\nTags must be no more than 10!\r\n\nStartDate can't be more than EndDate!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find a TestPlan with id!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "TestPlan with the same name already exists!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Can't change ProjectId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/restore": {
      "post": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Restore TestPlan",
        "description": "\nUse case\r\n\nUser sets test plan identifier\r\n\nUser runs method execution\r\n\nSystem restores test plan\r\n\nSystem returns no content response",
        "operationId": "RestoreTestPlan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find a TestPlan with id!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/purge": {
      "post": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Permanently delete test plan from archive",
        "operationId": "PurgeTestPlan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique or global ID of the test plan",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Full access permission for the archive is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/clone": {
      "post": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Clone TestPlan",
        "description": "\nUse case\r\n\nUser sets test plan identifier\r\n\nUser runs method execution\r\n\nSystem clones test plan\r\n\nSystem returns test plan (listed in response example)",
        "operationId": "Clone",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestPlanModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find a TestPlan with id!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/start": {
      "post": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Start TestPlan",
        "description": "\nUse case\r\n\nUser sets test plan identifier\r\n\nUser runs method execution\r\n\nSystem starts the test plan and updates test plan status\r\n\nSystem returns no content response",
        "operationId": "Start",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find a TestPlan with id!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/pause": {
      "post": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Pause TestPlan",
        "description": "\nUse case\r\n\nUser sets test plan identifier\r\n\nUser runs method execution\r\n\nSystem pauses the test plan and updates test plan status\r\n\nSystem returns no content response",
        "operationId": "Pause",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\nExecute status from New to Paused forbidden\r\n\nExecute status from Paused to Paused forbidden\r\n\nExecute status from Completed to Paused forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find a TestPlan with id!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/complete": {
      "post": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Complete TestPlan",
        "description": "\nUse case\r\n\nUser sets test plan identifier\r\n\nUser runs method execution\r\n\nSystem completes the test plan and updates test plan status\r\n\nSystem returns no content response",
        "operationId": "Complete",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\nExecute status from New to Completed forbidden\r\n\nExecute status from Completed to Completed forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find a TestPlan with id!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/testSuites": {
      "get": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Get TestSuites Tree By Id",
        "description": "\nUse case\r\n\nUser sets test plan identifier\r\n\nUser runs method execution\r\n\nSystem finds test suites related to the test plan\r\n\nSystem returns test suites as a tree model (listed in response example)",
        "operationId": "GetTestSuitesById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestSuiteV2TreeModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find a TestRun with id!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/workItems/withSections": {
      "post": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Add WorkItems to TestPlan with Sections as TestSuites",
        "description": "\nUse case\r\n\nUser sets TestPlan identifier\r\n\nUser sets WorkItem identifiers (listed in request example)\r\n\nUser runs method execution\r\n\nSystem added WorkItems and Sections to TestPlan\r\n\nSystem returns no content response",
        "operationId": "AddWorkItemsWithSections",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\nTestPlan is locked\r\n\nSome of configurations do not exist in the project, or they are not active",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for TestPlan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\nCan't find a TestPlan with id\r\n\nSome of workItems do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Can't put a SharedStep in the TestSuite",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/test-points/withSections": {
      "post": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Add test-points to TestPlan with sections",
        "operationId": "AddTestPointsWithSections",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "requestBody": {
          "description": "Filter object to retrieve work items for test-suite's project",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WorkItemSelectModel"
                  }
                ],
                "description": "Model containing options to filter work items"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test plan is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Test suite with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Shared steps cannot be added to test suite",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/autobalance": {
      "post": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Distribute test points between the users",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan unique or global ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "testers",
            "in": "query",
            "description": "Specifies a project user IDs to distribute",
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestPlanWithTestSuiteTreeModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test plan is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/testRuns/testResults/lastModified/modifiedDate": {
      "get": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Get last modification date of test plan's test results",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan unique or global ID",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Last modification date does not exist"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test plan is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Last modification date exists"
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/testRuns/search": {
      "post": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Search TestRuns of TestPlan",
        "description": "\nUse case\r\n\nUser sets test plan identifier\r\n\nUser sets TestRuns filter (listed in request example)\r\n\nUser runs method execution\r\n\nSystem returns TestRuns for TestPlan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestRunSearchQueryModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestRunModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test plan is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/testRuns": {
      "get": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Get TestRuns of TestPlan",
        "description": "\nUse case\r\n\nUser sets test plan identifier\r\n\nUser sets TestRun status filter (listed in request example)\r\n\nUser runs method execution\r\n\nSystem returns TestRuns for TestPlan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          {
            "name": "notStarted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "inProgress",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "stopped",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "completed",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestRunModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test plan is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/links": {
      "get": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Get Links of TestPlan",
        "description": "\nUse case\r\n\nUser sets test plan identifier\r\n\nUser sets pagination filter (listed in request example)\r\n\nUser runs method execution\r\n\nSystem returns links of TestPlan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "take",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "orderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestPlanLink"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test plan is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/testPoints/reset": {
      "post": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Reset TestPoints status of TestPlan",
        "description": "\nUse case\r\n\nUser sets test plan identifier\r\n\nUser sets test points identifiers\r\n\nUser runs method execution\r\n\nSystem reset test points statuses of test plan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/shorts": {
      "post": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Get TestPlans short models by Project identifiers",
        "description": "\nUse case\r\n\nUser sets projects identifiers\r\n\nUser runs method execution\r\n\nSystem return test plans short models (listed in response example)",
        "parameters": [
          {
            "name": "isDeleted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestPlanShortModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for project required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Project not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/export/testPoints/xlsx": {
      "post": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Export TestPoints from TestPlan in xls format",
        "description": "\nUse case\r\n\nUser sets test plan identifier\r\n\nUser sets filter model (listed in request example)\r\n\nUser runs method execution\r\n\nSystem return export xlsx file",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          {
            "name": "time-Zone-Offset-In-Minutes",
            "in": "header",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GetXlsxTestPointsByTestPlanModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "TestPlan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/export/testResultHistory/xlsx": {
      "post": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Export TestResults history from TestPlan in xls format",
        "description": "\nUse case\r\n\nUser sets test plan identifier\r\n\nUser sets filter model (listed in request example)\r\n\nUser runs method execution\r\n\nSystem return export xlsx file",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          {
            "name": "mustReturnOnlyLastTestResult",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeSteps",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "includeDeletedTestSuites",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "time-Zone-Offset-In-Minutes",
            "in": "header",
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "TestPlan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/testPoints/lastResults": {
      "get": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Get TestPoints with last result from TestPlan",
        "description": "\nUse case\r\n\nUser sets test plan identifier\r\n\nUser sets filter (listed in request example)\r\n\nUser runs method execution\r\n\nSystem return test points with last result from test plan",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          {
            "name": "testerId",
            "in": "query",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestPointWithLastResultModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "TestPlan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/unlock/request": {
      "post": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Send unlock TestPlan notification",
        "description": "\nUse case\r\n\nUser sets test plan identifier\r\n\nUser runs method execution\r\n\nSystem send unlock test plan notification",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "TestPlan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/configurations": {
      "get": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Get TestPlan configurations",
        "description": "\nUse case\r\n\nUser sets test plan identifier\r\n\nUser runs method execution\r\n\nSystem return test plan configurations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigurationModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "TestPlan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/history": {
      "get": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Get TestPlan history",
        "description": "\nUse case\r\n\nUser sets test plan identifier\r\n\nUser runs method execution\r\n\nSystem return test plan history",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test plan internal (guid format) or global (int\r\nformat) identifier",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestPlanChangeModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "TestPlan not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/testPoints/tester/{userId}": {
      "post": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Assign user as a tester to multiple test points",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique or global ID of the test plan",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "description": "Unique ID of the user",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestPointSelectModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test plans is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPlans/{id}/testPoints/tester": {
      "delete": {
        "tags": [
          "TestPlans"
        ],
        "summary": "Unassign users from multiple test points",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique or global ID of the test plan",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestPointSelectModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test plans is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPoints/search": {
      "post": {
        "tags": [
          "TestPoints"
        ],
        "summary": "Search for test points",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestPointFilterModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestPointShortGetModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for all requested test plans is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPoints/search/id": {
      "post": {
        "tags": [
          "TestPoints"
        ],
        "summary": "Search for test points and extract IDs only",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestPointFilterModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for all requested test plans is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPoints/{id}/testRuns": {
      "get": {
        "tags": [
          "TestPoints"
        ],
        "summary": "Get all test runs which use test point",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test point unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestRunModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test points is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testPoints/{id}/workItem": {
      "get": {
        "tags": [
          "TestPoints"
        ],
        "summary": "Get work item represented by test point",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test point unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItemModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test points is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testResults/search": {
      "post": {
        "tags": [
          "TestResults"
        ],
        "summary": "Search for test results",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestResultsFilterModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestResultShortGetModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for all requested test runs is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testResults/statistics/filter": {
      "post": {
        "tags": [
          "TestResults"
        ],
        "summary": "Search for test results and extract statistics",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestResultsFilterModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestResultsStatisticsGetModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for all requested test runs is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testResults/{id}/attachments": {
      "get": {
        "tags": [
          "TestResults"
        ],
        "summary": "Get all attachments of TestResult",
        "description": "\nUse case\r\n\nUser sets testResultId\r\n\nUser runs method execution\r\n\nSystem search all attachments of the test result\r\n\nSystem returns attachments enumeration",
        "operationId": "GetAttachments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test result internal identifier (guid format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttachmentModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test result required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "TestResult not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TestResults"
        ],
        "summary": "Upload and link attachment to TestResult",
        "description": "\nUse case\r\n\nUser sets testResultId\r\n\nUser attaches a file\r\n\nSystem creates attachment and links it to the test result\r\n\nSystem returns attachment identifier",
        "operationId": "CreateAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test result internal identifier (guid format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Select file",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "413": {
            "description": "Multipart body length limit exceeded (default constraint is one gigabyte)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test result required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/api/v2/testResults/{id}/attachments/{attachmentId}": {
      "get": {
        "tags": [
          "TestResults"
        ],
        "summary": "Get attachment of TestResult",
        "description": "\nUse case\r\n\nUser sets attachmentId and testResultId\r\n\n[Optional] User sets resize configuration\r\n\nUser runs method execution\r\n\nSystem search attachments by the attachmentId and the testResultId\r\n\n\r\n                    [Optional] If resize configuration is set, System resizes the attachment according to the resize\r\n                    configuration\r\n                \r\n\n[Optional] Otherwise, System does not resize the attachment\r\n\nSystem returns attachment as a file",
        "operationId": "DownloadAttachment",
        "parameters": [
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Attachment internal identifier (guid format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          {
            "name": "id",
            "in": "path",
            "description": "Test result internal identifier (guid format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          {
            "name": "width",
            "in": "query",
            "description": "Width of the result image",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "height",
            "in": "query",
            "description": "Height of the result image",
            "schema": {
              "maximum": 2147483647,
              "minimum": 1,
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "resizeType",
            "in": "query",
            "description": "Type of resizing to apply to the result image",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ImageResizeType"
                }
              ]
            }
          },
          {
            "name": "backgroundColor",
            "in": "query",
            "description": "Color of the background if the `resizeType` is `AddBackgroundStripes`",
            "schema": {
              "maxLength": 7,
              "minLength": 7,
              "pattern": "#[0-9A-Fa-f]{6}",
              "type": "string"
            }
          },
          {
            "name": "preview",
            "in": "query",
            "description": "If image must be converted to a preview (lower quality, no animation)",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test result required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\nFile not found\r\n\nAttachment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TestResults"
        ],
        "summary": "Remove attachment and unlink from TestResult",
        "description": "\nUse case\r\n\nUser sets testResultId and attachmentId\r\n\nUser attaches a file\r\n\nUser runs method execution\r\n\nSystem deletes attachment and unlinks it from the test result\r\n\nSystem returns attachment identifier",
        "operationId": "DeleteAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test result internal identifier (guid format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Attachment internal identifier (guid format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test result required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TestResults"
        ],
        "summary": "Attach file to the test result",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test result unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Attachment unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Only edits from assigned user are allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testResults/{id}/attachments/{attachmentId}/info": {
      "get": {
        "tags": [
          "TestResults"
        ],
        "summary": "Get Metadata of TestResult's attachment",
        "description": "\nUse case\r\n\nUser sets attachmentId and testResultId\r\n\nUser runs method execution\r\n\nSystem search attachment by the attachmentId and the testResultId\r\n\nSystem returns attachment data",
        "operationId": "GetAttachment",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test result internal identifier (guid format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          {
            "name": "attachmentId",
            "in": "path",
            "description": "Attachment internal identifier (guid format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachmentModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test result required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "File not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testResults/{id}/attachments/info": {
      "get": {
        "tags": [
          "TestResults"
        ],
        "summary": "Get test result attachments meta-information",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test result unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttachmentModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for the test result is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testResults/{id}": {
      "get": {
        "tags": [
          "TestResults"
        ],
        "summary": "Get test result by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test result unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for the test result is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TestResults"
        ],
        "summary": "Edit test result by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test result unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestResultUpdateModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Only edits from assigned user are allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testResults/{id}/aggregated": {
      "get": {
        "tags": [
          "TestResults"
        ],
        "summary": "Get test result by ID aggregated with previous results",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test result unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestResultModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for the test result is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testRuns/search": {
      "post": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Search for test runs",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestRunFilterModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestRunShortGetModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for autotests library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testRuns": {
      "post": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Create empty TestRun",
        "description": "\nUse case\r\n\nUser sets test run model (listed in the request example)\r\n\nUser runs method execution\r\n\nSystem creates test run\r\n\nSystem returns test run model",
        "operationId": "CreateEmpty",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestRunV2PostShortModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestRunV2GetModel"
                }
              }
            }
          },
          "400": {
            "description": "\nField is required\r\n\nTestRun must be automated\r\n\nProjectId is not a valid!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "TestRunTesterRequirement permission required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test result required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find a TestRun with id = testRunId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Update empty TestRun",
        "description": "\nUse case\r\n\nUser sets test run properties (listed in the request example)\r\n\nUser runs method execution\r\n\nSystem updates test run\r\n\nSystem returns returns no content response",
        "operationId": "UpdateEmpty",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestRunV2PutModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\nField is required\r\n\nName is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test result required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\nCan't find a TestRun with id!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Delete multiple test runs",
        "description": "\nUse case\r\n\nUser sets selection parameters of test runs\r\n\nSystem search and delete collection of test runs\r\n\nSystem returns the number of deleted test runs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestRunSelectModel"
                  }
                ],
                "description": "Model containing options to filter test runs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "\n- ID is not valid\r\n\n- Project was archived and cannot be edited anymore",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testRuns/byWorkItems": {
      "post": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Create test run based on configurations and work items",
        "description": "This method creates a test run based on a combination of configuration and work item (test case or checklist).\r\nBefore you create a test run using this method, make sure to create a test plan.\r\nWork items must be automated.",
        "operationId": "CreateAndFillByWorkItems",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestRunFillByWorkItemsPostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestRunV2GetModel"
                }
              }
            }
          },
          "400": {
            "description": "\n- Field is required\r\n\n- Test run cannot be created with deleted test points\r\n\n- Test suites with IDs [ids] is archived\r\n\n- Configurations with IDs [ids] is archived\r\n\n- Test run cannot be created with non-automated test point\r\n\n- Some work items do not exist\r\n\n- Project ID is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test results is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Some test points, work items or configurations do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testRuns/byConfigurations": {
      "post": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Create test runs picking the needed test points",
        "description": "This method creates a test run based on a combination of a configuration and a work item(test case or checklist).\r\nBefore you create a test run using this method, make sure to create a test plan. Work items must be automated.\r\nThis method is different from the `POST /api/v2/testRuns/byWorkItems` method because of the ability to send a\r\njagged array within the \"<b>testPointSelectors</b>\" parameter.",
        "operationId": "CreateAndFillByConfigurations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestRunFillByConfigurationsPostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestRunV2GetModel"
                }
              }
            }
          },
          "400": {
            "description": "\n- Field is required\r\n\n- Test run cannot be created with deleted test points\r\n\n- Test suites with IDs [ids] is archived\r\n\n- Configurations with IDs [ids] is archived\r\n\n- Test run cannot be created with non-automated test point\r\n\n- Test run must be automated\r\n\n- Some work items do not exist\r\n\n- Project ID is invalid\r\n\n- Test point selectors are required\r\n\n- Some work item IDs are invalid\r\n\n- Some configuration IDs are invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test results is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Some test points do not exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testRuns/byAutoTests": {
      "post": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Create test runs based on autotests and configurations",
        "description": "This method creates a test run based on an autotest and a configuration.\r\nThe difference between the `POST /api/v2/testRuns/byWorkItems` and `POST /api/v2/testRuns/byConfigurations` methods is\r\nthat in this method there is no need to create a test plan and work items (test cases and checklists).",
        "operationId": "CreateAndFillByAutoTests",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestRunFillByAutoTestsPostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestRunV2GetModel"
                }
              }
            }
          },
          "400": {
            "description": "\n- Field is required\r\n\n- Configuration does not exist in the project\r\n\n- Autotest does not exist in the project\r\n\n- Test run must be automated\r\n\n- Project ID is invalid\r\n\n- Autotest external IDs are required\r\n\n- Configuration IDs are required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test results is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Some autotests do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testRuns/updateMultiple": {
      "post": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Update multiple test runs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestRunUpdateMultipleModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testRuns/{id}": {
      "get": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Get TestRun by Id",
        "description": "\nUse case\r\n\nUser sets test run identifier\r\n\nUser runs method execution\r\n\nSystem finds test run\r\n\nSystem returns test run",
        "operationId": "GetTestRunById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test Run internal identifier (GUID format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestRunV2GetModel"
                }
              }
            }
          },
          "404": {
            "description": "\nCan't find a TestRun with id!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test result required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Delete test run",
        "description": "\nUse case\r\n\nUser sets test run internal (guid format) identifier\r\n\nSystem search and delete test run",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test run internal (UUID) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\n- ID is not valid\r\n\n- Project was archived and cannot be edited anymore",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Test run with provided ID cannot be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testRuns/{id}/start": {
      "post": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Start TestRun",
        "description": "\nUse case\r\n\nUser sets test run identifier\r\n\nUser runs method execution\r\n\nSystem starts test run\r\n\nSystem returns no content response",
        "operationId": "StartTestRun",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test Run internal identifier (GUID format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\nField is required\r\n\nthe StateName is already InProgress\r\n\nthe StateName is already Stopped\r\n\nthe StateName is already Completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test result required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\nCan't find a TestRun with id!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testRuns/{id}/stop": {
      "post": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Stop TestRun",
        "description": "\nUse case\r\n\nUser sets test run identifier\r\n\nUser runs method execution\r\n\nSystem stops test run\r\n\nSystem returns no content response",
        "operationId": "StopTestRun",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test Run internal identifier (GUID format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\nField is required\r\n\nthe StateName is already Stopped\r\n\nthe StateName is already Completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test result required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\nCan't find a TestRun with id!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testRuns/{id}/complete": {
      "post": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Complete TestRun",
        "description": "\nUse case\r\n\nUser sets test run identifier\r\n\nUser runs method execution\r\n\nSystem completes test run\r\n\nSystem returns no content response",
        "operationId": "CompleteTestRun",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test Run internal identifier (GUID format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\nField is required\r\n\nthe StateName is already Stopped\r\n\nthe StateName is already Completed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test result required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\nCan't find a TestRun with id!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testRuns/{id}/testResults": {
      "post": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Send test results to the test runs in the system",
        "description": "This method sends test results to the test management system.",
        "operationId": "SetAutoTestResultsForTestRun",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test Run internal identifier (GUID format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AutoTestResultsForTestRunModel"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "400": {
            "description": "\n- Field is required\r\n\n- Body is invalid\r\n\n- Test points are required\r\n\n- Duration must be a positive number\r\n\n- Outcome is not defined\r\n\n- Test run is stopped",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test results is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\n- Test run with provided ID was not found\r\n\n- Test point was not found\r\n\n- Autotest with provided external ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "\n- Configuration with provided ID was not found\r\n\n- Test points relevant to provided filters were not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testRuns/{id}/testPoints/results": {
      "get": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Get test results from the test run grouped by test points",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test run unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestPointResultModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test runs is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testRuns/{id}/testResults/lastModified/modificationDate": {
      "get": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Get modification date of last test result of the test run",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test run unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test runs is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testRuns/{id}/statistics/filter": {
      "post": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Search for the test run test results and build statistics",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test run unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestResultsLocalFilterModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestResultsStatisticsGetModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test runs is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testRuns/{id}/testResults/bulk": {
      "put": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Partial edit of multiple test results in the test run",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test run unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestRunTestResultsPartialBulkSetModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test runs is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testRuns/{id}/purge": {
      "post": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Permanently delete test run from archive",
        "description": "\nUse case\r\n\nUser sets archived test run internal (guid format) identifier\r\n\nSystem search and purge archived test run",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test run internal (UUID) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\n- ID is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Delete permission for archived test runs is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testRuns/purge/bulk": {
      "post": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Permanently delete multiple test runs from archive",
        "description": "\nUse case\r\n\nUser sets selection parameters of archived test runs\r\n\nSystem search and delete collection of archived test runs\r\n\nSystem returns the number of deleted archived test runs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestRunSelectModel"
                  }
                ],
                "description": "Model containing options to filter test runs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Delete permission for archived test runs is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testRuns/{id}/restore": {
      "post": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Restore test run from the archive",
        "description": "\nUse case\r\n\nUser sets archived test run internal (guid format) identifier\r\n\nSystem search and restore test run",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique ID of the test run",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "\n- ID is not valid\r\n\n- Project was archived and cannot be edited anymore",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for archive is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testRuns/restore/bulk": {
      "post": {
        "tags": [
          "TestRuns"
        ],
        "summary": "Restore multiple test runs from the archive",
        "description": "\nUse case\r\n\nUser sets selection parameters of archived test runs\r\n\nSystem search and restore collection of archived test runs\r\n\nSystem returns the number of restored test runs",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestRunSelectModel"
                  }
                ],
                "description": "Model containing options to filter test runs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for archive is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testSuites/{id}": {
      "get": {
        "tags": [
          "TestSuites"
        ],
        "summary": "Get TestSuite by Id",
        "description": "\nUse case\r\n\nUser sets test suite identifier\r\n\nUser runs method execution\r\n\nSystem search test suite by identifier\r\n\nSystem returns test suite",
        "operationId": "GetTestSuiteById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test suite internal (guid format) identifier\"",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSuiteV2GetModel"
                }
              }
            }
          },
          "404": {
            "description": "\nCan't find a TestSuite with id!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "TestSuites"
        ],
        "summary": "Patch test suite",
        "description": "See <a href=\"https://www.rfc-editor.org/rfc/rfc6902\" target=\"_blank\">RFC 6902: JavaScript Object Notation (JSON) Patch</a> for details",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test Suite internal (UUID) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Operation"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test suite is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TestSuites"
        ],
        "summary": "Delete TestSuite",
        "description": "\nUse case\r\n\nUser sets test suite identifier\r\n\nUser runs method execution\r\n\nSystem search test suite by identifier\r\n\nSystem deletes test suite\r\n\nSystem returns no content response",
        "operationId": "DeleteTestSuite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test suite internal (guid format) identifier\"",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Delete permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\nCan't find a TestSuite with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testSuites": {
      "post": {
        "tags": [
          "TestSuites"
        ],
        "summary": "Create test suite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestSuiteV2PostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TestSuiteV2GetModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test plan is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "TestSuites"
        ],
        "summary": "Edit test suite",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestSuiteV2PutModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test plan is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testSuites/{id}/refresh": {
      "post": {
        "tags": [
          "TestSuites"
        ],
        "summary": "Refresh test suite. Only dynamic test suites are supported by this method",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test Suite internal (UUID) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test suite is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testSuites/{id}/testPoints": {
      "get": {
        "tags": [
          "TestSuites"
        ],
        "summary": "Get TestPoints By Id",
        "description": "\nUse case\r\n\nUser sets test suite identifier\r\n\nUser runs method execution\r\n\nSystem search test suite by identifier\r\n\nSystem search test points related to the test suite\r\n\nSystem returns test points array",
        "operationId": "GetTestPointsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test suite internal (guid format) identifier\"",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestPointByTestSuiteModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\nCan't find a TestSuite with id!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testSuites/{id}/testResults": {
      "get": {
        "tags": [
          "TestSuites"
        ],
        "summary": "Get TestResults By Id",
        "description": "\nUse case\r\n\nUser sets test suite identifier\r\n\nUser runs method execution\r\n\nSystem search test suite by identifier\r\n\nSystem search test points related to the test suite\r\n\nSystem search test results related to the test points\r\n\nSystem returns test results array",
        "operationId": "GetTestResultsById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test suite internal (guid format) identifier\"",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestResultV2ShortModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\nCan't find a TestSuite with id!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testSuites/{id}/workItems/search": {
      "post": {
        "tags": [
          "TestSuites"
        ],
        "summary": "Search WorkItems",
        "description": "\nUse case\r\n\nUser sets test suite identifier\r\n\n[Optional] User sets filter\r\n\nUser runs method execution\r\n\nSystem search test suite by identifier\r\n\nSystem search test points related to the test suite\r\n\nSystem search work items related to the test points\r\n\n\r\n                    [Optional] User sets filter, system applies filter\r\n                \r\n\nSystem returns work items array",
        "operationId": "SearchWorkItems",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test suite internal (guid format) identifier\"",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/TestSuiteWorkItemsSearchModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemShortModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find a TestSuite with id!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/testSuites/{id}/workItems": {
      "post": {
        "tags": [
          "TestSuites"
        ],
        "summary": "Set work items for test suite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique ID of the test suite",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test plan is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testSuites/{id}/test-points": {
      "post": {
        "tags": [
          "TestSuites"
        ],
        "summary": "Add test-points to test suite",
        "operationId": "AddTestPointsToTestSuite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test suite internal identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "1ed608bf-8ac9-4ffd-b91e-ebdbbdce6132"
          }
        ],
        "requestBody": {
          "description": "Filter object to retrieve work items for test-suite's project",
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WorkItemSelectModel"
                  }
                ],
                "description": "Model containing options to filter work items"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test plan is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Test suite with provided ID was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Shared steps cannot be added to test suite",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/testSuites/{id}/configurations": {
      "get": {
        "tags": [
          "TestSuites"
        ],
        "summary": "Get Configurations By Id",
        "description": "\nUse case\r\n\nUser sets test suite identifier\r\n\nUser runs method execution\r\n\nSystem search test suite by identifier\r\n\nSystem search test points related to the test suite\r\n\nSystem search configurations related to the test points\r\n\nSystem returns configurations array",
        "operationId": "GetConfigurationsByTestSuiteId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test suite internal (guid format) identifier\"",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ConfigurationModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\nCan't find a TestSuite with id!",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TestSuites"
        ],
        "summary": "Set Configurations By TestSuite Id",
        "description": "\nUse case\r\n\nUser sets test suite identifier\r\n\nUser sets collection of configuration identifiers\r\n\nUser runs method execution\r\n\nSystem search test suite by identifier\r\n\nSystem search test points related to the test suite\r\n\nSystem search configuration\r\n\nSystem restores(if exist) or creates test points with listed configuration\r\n\nSystem returns no content response",
        "operationId": "SetConfigurationsByTestSuiteId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Test suite internal (guid format) identifier\"",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "requestBody": {
          "description": "Collection of configuration identifiers\"",
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "items": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\nSome of Configurations do not exist in the project, or they are not active",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test plan required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\nCan't find a TestSuite with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/webhooks/search": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Search for webhooks",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SearchWebhooksQueryModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebHookModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for all requested projects is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get all webhooks",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "Project unique ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebHookModel"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for requested project is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create webhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WebHookPostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebHookModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for webhooks is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/webhooks/{id}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get webhook by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Webhook unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebHookModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for webhooks is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Edit webhook by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Webhook unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WebHookPostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebHookModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for webhooks is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete webhook by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Webhook unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Delete permission for webhooks is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/webhooks/specialVariables": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get special variables for webhook event type",
        "parameters": [
          {
            "name": "eventType",
            "in": "query",
            "description": "Webhook event type",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/WebHookEventType"
                }
              ]
            }
          },
          {
            "name": "variablesType",
            "in": "query",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/WebhookVariablesType"
                }
              ],
              "default": "VariablesForUrl"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/webhooks/test": {
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Test webhook's url",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WebHookTestModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for webhooks is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/webhooks/logs": {
      "get": {
        "tags": [
          "WebhooksLogs"
        ],
        "summary": "Get all webhook logs",
        "parameters": [
          {
            "name": "projectId",
            "in": "query",
            "description": "Project unique ID",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebHookLogModel"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/webhooks/logs/{id}": {
      "get": {
        "tags": [
          "WebhooksLogs"
        ],
        "summary": "Get webhook log by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Webhook log unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebHookLogModel"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "default": {
            "description": "Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "WebhooksLogs"
        ],
        "summary": "Delete webhook log by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Webhook log unique ID",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "System administrator permissions are required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/{id}": {
      "get": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Get Test Case, Checklist or Shared Step by Id or GlobalId",
        "description": "\nUse case\r\n\nUser sets work item identifier\r\n\n[Optional] User sets work item version identifier\r\n\n[Optional] User sets work item version number\r\n\nUser runs method execution\r\n\nSystem search work item by identifier\r\n\n[Optional] if User sets work item version identifier, system search work item version by identifier.\r\n\n[Optional] if user sets work item version number, system search work item version by number\r\n\nOtherwise, system search last work item version\r\n\nSystem returns work item ",
        "operationId": "GetWorkItemById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "WorkItem internal (guid format) or\r\nglobal(integer format) identifier\"",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          {
            "name": "versionId",
            "in": "query",
            "description": "WorkItem version (guid format) identifier\"",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "00000000-0000-0000-0000-000000000000"
          },
          {
            "name": "versionNumber",
            "in": "query",
            "description": "WorkItem version number (0 is the last version)\"",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItemModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find workItem with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Delete Test Case, Checklist or Shared Step by Id or GlobalId",
        "description": "\nUse case\r\n\nUser sets work item identifier\r\n\nUser runs method execution\r\n\nSystem deletes work item\r\n\nSystem returns no content response",
        "operationId": "DeleteWorkItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "WorkItem internal (guid format) or\r\nglobal(integer format) identifier\"",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Delete permission for test library required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find a WorkItem with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Could not delete Shared Step that has references",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/{id}/iterations": {
      "get": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Get iterations by work item Id or GlobalId",
        "operationId": "GetIterations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "WorkItem internal (guid format) or\r\nglobal(integer format) identifier\"",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          {
            "name": "versionId",
            "in": "query",
            "description": "WorkItem version (guid format) identifier",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "00000000-0000-0000-0000-000000000000"
          },
          {
            "name": "versionNumber",
            "in": "query",
            "description": "WorkItem version number (0 is the last version)\"",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 0
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IterationModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find workItem with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems": {
      "post": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Create Test Case, Checklist or Shared Step",
        "description": "\nUse case\r\n\nUser sets work item properties (listed in request parameters)\r\n\nUser runs method execution\r\n\nSystem creates work item by identifier\r\n\nSystem returns work item model (listed in response parameters)",
        "operationId": "CreateWorkItem",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WorkItemPostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItemModel"
                }
              }
            }
          },
          "400": {
            "description": "\nField is required\r\n\nPriority is not a valid\r\n\nTags must be set\r\n\nDuration should be a positive number\r\n\nShould be empty for CheckList\r\n\nAttribute value must be a valid guid for user scheme\r\n\nThere is no option in ProjectAttributesScheme with such Id\r\n\nAttribute value must be a valid guid for options scheme",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test library required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\nCan't find section\r\n\nCan't find project\r\n\nCan't find attachmentIds\r\n\nProject not found\r\n\nCan't attributesScheme\r\n\nCan't attribute\r\n\nAutoTestIds not exist in project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Update Test Case, Checklist or Shared Step",
        "description": "\nUse case\r\n\nUser sets work item properties (listed in request parameters)\r\n\nUser runs method execution\r\n\nSystem updates work item by identifier\r\n\nSystem returns updated work item model (listed in response parameters)",
        "operationId": "UpdateWorkItem",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WorkItemPutModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "\nField is required\r\n\nPriority is not a valid\r\n\nduration should be a positive number\r\n\nshould be empty for CheckList\r\n\nThere is no option in ProjectAttributesScheme with such Id\r\n\nAttribute value must be a valid guid for options scheme",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test library required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "\nWorkItem not found\r\n\nCan't find section\r\n\nCan't attributesScheme\r\n\nCan't attribute\r\n\nAutoTestIds not exist in project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/{id}/restore": {
      "post": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Restore test case, checklist or shared steps from archive",
        "operationId": "RestoreWorkItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique or global ID of the work item",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/{id}/purge": {
      "post": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Permanently delete test case, checklist or shared steps from archive",
        "operationId": "PurgeWorkItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique or global ID of the work item",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Delete permission for test library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/{id}/autoTests": {
      "get": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Get all AutoTests linked to WorkItem by Id or GlobalId",
        "description": "\nUse case\r\n\nUser sets work item identifier\r\n\nUser runs method execution\r\n\nSystem search work item by identifier\r\n\nSystem search all autotests, related to found work item\r\n\nSystem returns list of found autotests",
        "operationId": "GetAutoTestsForWorkItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "WorkItem internal (guid format) or\r\nglobal(integer format) identifier\"",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AutoTestModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find WorkItem with workItemId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Delete all links AutoTests from WorkItem by Id or GlobalId",
        "description": "\nUse case\r\n\nUser sets work item identifier\r\n\nUser runs method execution\r\n\nSystem search work item by identifier\r\n\nSystem search and delete all autotests, related to found work item\r\n\nSystem returns no content response",
        "operationId": "DeleteAllWorkItemsFromAutoTest",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "WorkItem internal (guid format) or\r\nglobal(integer format) identifier\"",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test library required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find a WorkItem with workItemId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/api/v2/workItems/{id}/chronology": {
      "get": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Get WorkItem chronology by Id or GlobalId",
        "description": "\nUse case\r\n\nUser sets work item identifier\r\n\nUser runs method execution\r\n\nSystem search work item by identifier\r\n\nSystem search test results of all autotests, related to found work item\r\n\nSystem sort results by CompletedOn ascending, then by CreatedDate ascending\r\n\nSystem returns sorted collection of test results",
        "operationId": "GetWorkItemChronology",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestResultChronologyModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Not valid workItemId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find WorkItem with workItemId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/{id}/versions": {
      "get": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Get WorkItem versions",
        "description": "\nUse case\r\n\nUser sets work item identifier\r\n\n[Optional] User sets work item version identifier\r\n\nUser runs method execution\r\n\nSystem search work item by identifier\r\n\n\r\n                    [Optional] If User set work item version identifier, System search work item version by version identifier\r\n                    Otherwise, system search all version of work item\r\n                \r\n\nSystem returns array of work item version models (listed in response example)",
        "operationId": "GetWorkItemVersions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "WorkItem internal (guid format) or\r\nglobal(integer format) identifier\"",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          {
            "name": "workItemVersionId",
            "in": "query",
            "description": "WorkItem version (guid format)\r\nidentifier\"",
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          },
          {
            "name": "versionNumber",
            "in": "query",
            "description": "WorkItem version (integer format)\r\nnumber\"",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemVersionModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find WorkItem with workItemId",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/search": {
      "post": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Search for work items",
        "parameters": [
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WorkItemSelectModel"
                  }
                ],
                "description": "Model containing options to filter work items"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemShortModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Test library read permission for all requested projects is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/sharedSteps/{sharedStepId}/references": {
      "get": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Get SharedStep references",
        "description": "\nUse case\r\n\nUser sets SharedStep identifier\r\n\nUser runs method execution\r\n\nSystem return SharedStep references",
        "parameters": [
          {
            "name": "sharedStepId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SharedStepReferenceModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find SharedStep with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/api/v2/workItems/{id}/attachments": {
      "post": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Upload and link attachment to WorkItem",
        "description": "\nUse case\r\n\nUser sets workItemId\r\n\nUser attaches a file\r\n\nSystem creates attachment and links it to the work item\r\n\nSystem returns attachment identifier",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Work item internal identifier (guid format)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "description": "Select file",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "413": {
            "description": "Multipart body length limit exceeded (default constraint is one gigabyte)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test result required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "200": {
            "description": "Successful operation"
          }
        }
      }
    },
    "/api/v2/workItems/{id}/history": {
      "get": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Get change history of WorkItem",
        "description": "\nUse case\r\n\nUser sets work item identifier\r\n\nUser runs method execution\r\n\nSystem return change history of WorkItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemChangeModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find WorkItem with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/move": {
      "post": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Move WorkItem to another section",
        "description": "\nUse case\r\n\nUser sets WorkItem identifier\r\n\nUser runs method execution\r\n\nSystem move WorkItem to another section",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WorkItemMovePostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItemShortModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test library required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/{id}/like": {
      "post": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Set like to WorkItem",
        "description": "\nUse case\r\n\nUser sets WorkItem identifier\r\n\nUser runs method execution\r\n\nSystem set like to WorkItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Delete like from WorkItem",
        "description": "\nUse case\r\n\nUser sets WorkItem identifier\r\n\nUser runs method execution\r\n\nSystem delete like from WorkItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/{id}/likes": {
      "get": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Get likes of WorkItem",
        "description": "\nUse case\r\n\nUser sets WorkItem identifier\r\n\nUser runs method execution\r\n\nSystem return likes of WorkItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemLikeModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/{id}/likes/count": {
      "get": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Get likes count of WorkItem",
        "description": "\nUse case\r\n\nUser sets WorkItem identifier\r\n\nUser runs method execution\r\n\nSystem return likes count of WorkItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/{id}/testResults/history": {
      "get": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Get test results history of WorkItem",
        "description": "\nUse case\r\n\nUser sets WorkItem identifier\r\n\nUser runs method execution\r\n\nSystem return test results history of WorkItem",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "from",
            "in": "query",
            "description": "Take results from this date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "to",
            "in": "query",
            "description": "Take results until this date",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "configurationIds",
            "in": "query",
            "description": "Identifiers of test result configurations",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "testPlanIds",
            "in": "query",
            "description": "Identifiers of test plans which contain test results",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "userIds",
            "in": "query",
            "description": "Identifiers of users who set test results",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "outcomes",
            "in": "query",
            "description": "List of outcomes of test results",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "isAutomated",
            "in": "query",
            "description": "OBSOLETE: Use `Automated` instead",
            "schema": {
              "type": "boolean",
              "deprecated": true
            }
          },
          {
            "name": "automated",
            "in": "query",
            "description": "If result must consist of only manual/automated test results",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "testRunIds",
            "in": "query",
            "description": "Identifiers of test runs which contain test results",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TestResultHistoryReportModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/{id}/version/{versionId}/actual": {
      "post": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Set WorkItem as actual",
        "description": "\nUse case\r\n\nUser sets work item identifier\r\n\nUser runs method execution\r\n\nSystem set WorkItem as actual",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItemModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test library required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find WorkItem with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/{id}/checkList/transformTo/testCase": {
      "post": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Transform CheckList to TestCase",
        "description": "\nUse case\r\n\nUser sets checklist identifier\r\n\nUser runs method execution\r\n\nSystem transform CheckList to TestCase",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItemModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Update permission for test library required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find CheckList with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/{sharedStepId}/references/workItems": {
      "post": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Get SharedStep references in work items",
        "description": "\nUse case\r\n\nUser sets SharedStep identifier\r\n\nUser runs method execution\r\n\nSystem return SharedStep references",
        "parameters": [
          {
            "name": "sharedStepId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SharedStepReferencesQueryFilterModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SharedStepReferenceModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find SharedStep with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/{sharedStepId}/references/sections": {
      "post": {
        "tags": [
          "WorkItems"
        ],
        "summary": "Get SharedStep references in sections",
        "description": "\nUse case\r\n\nUser sets SharedStep identifier\r\n\nUser runs method execution\r\n\nSystem return SharedStep references",
        "parameters": [
          {
            "name": "sharedStepId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Skip",
            "in": "query",
            "description": "Amount of items to be skipped (offset)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "Take",
            "in": "query",
            "description": "Amount of items to be taken (limit)",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "description": "SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchField",
            "in": "query",
            "description": "Property name for searching",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SearchValue",
            "in": "query",
            "description": "Value for searching",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/SharedStepReferenceSectionsQueryFilterModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "headers": {
              "Pagination-Skip": {
                "description": "Skipped amount of items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Take": {
                "description": "Taken items",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Pages": {
                "description": "Expected number of pages",
                "schema": {
                  "type": "integer"
                }
              },
              "Pagination-Total-Items": {
                "description": "Total count of items",
                "schema": {
                  "type": "integer"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SharedStepReferenceSectionModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Can't find SharedStep with id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/{id}/comments": {
      "get": {
        "tags": [
          "WorkItemsComments"
        ],
        "summary": "Get work item comments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Unique or global ID of the work item",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkItemCommentModel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/comments": {
      "post": {
        "tags": [
          "WorkItemsComments"
        ],
        "summary": "Create WorkItem comment",
        "description": "\nUse case\r\n\nUser sets comment properties (listed in request parameters)\r\n\nUser runs method execution\r\n\nSystem creates comment \r\n\nSystem returns comment model (listed in response parameters)",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WorkItemCommentPostModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WorkItemCommentModel"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Read permission for test library required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "WorkItem is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "WorkItemsComments"
        ],
        "summary": "Update work item comment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/WorkItemCommentPutModel"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "System administrator role is required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/v2/workItems/comments/{commentId}": {
      "delete": {
        "tags": [
          "WorkItemsComments"
        ],
        "summary": "Delete WorkItem comment",
        "description": "\nUse case\r\n\nUser sets comment identifier\r\n\nUser runs method execution\r\n\nSystem delete comment \r\n\nSystem returns success status code",
        "parameters": [
          {
            "name": "commentId",
            "in": "path",
            "description": "Comment internal (guid format) identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            },
            "example": "3fa85f64-5717-4562-b3fc-2c963f66afa6"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "System admin permission required",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "WorkItem is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActionUpdate": {
        "enum": [
          "Add",
          "Replace",
          "ToRemove",
          "ClearAll"
        ],
        "type": "string"
      },
      "AttachmentChangeViewModel": {
        "required": [
          "id",
          "size"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "size": {
            "type": "number",
            "format": "float"
          }
        },
        "additionalProperties": false
      },
      "AttachmentChangeViewModelArrayChangedFieldViewModel": {
        "type": "object",
        "properties": {
          "oldValue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentChangeViewModel"
            },
            "nullable": true
          },
          "newValue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentChangeViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AttachmentModel": {
        "required": [
          "createdById",
          "createdDate",
          "fileId",
          "id",
          "name",
          "size",
          "type"
        ],
        "type": "object",
        "properties": {
          "fileId": {
            "type": "string",
            "description": "Unique ID of the attachment file"
          },
          "type": {
            "type": "string",
            "description": "MIME type of the attachment"
          },
          "size": {
            "type": "number",
            "description": "Size in bytes of the attachment file",
            "format": "float"
          },
          "createdDate": {
            "type": "string",
            "description": "Creation date of the attachment",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Last modification date of the attachment",
            "format": "date-time",
            "nullable": true
          },
          "createdById": {
            "type": "string",
            "description": "Unique ID of the attachment creator",
            "format": "uuid"
          },
          "modifiedById": {
            "type": "string",
            "description": "Unique ID of the attachment last editor",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the attachment file"
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the attachment",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "AttachmentModelAutoTestStepResultsModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The name of the step.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the step result.",
            "nullable": true
          },
          "info": {
            "type": "string",
            "description": "Extended description of the step result.",
            "nullable": true
          },
          "startedOn": {
            "type": "string",
            "description": "Step start date.",
            "format": "date-time",
            "nullable": true
          },
          "completedOn": {
            "type": "string",
            "description": "Step end date.",
            "format": "date-time",
            "nullable": true
          },
          "duration": {
            "maximum": 43200000000,
            "minimum": 0,
            "type": "integer",
            "description": "Expected or actual duration of the test run execution in milliseconds.",
            "format": "int64",
            "nullable": true
          },
          "outcome": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AvailableTestResultOutcome"
              }
            ],
            "description": "Specifies the result of the autotest execution.",
            "nullable": true
          },
          "stepResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentModelAutoTestStepResultsModel"
            },
            "description": "Nested step results. The maximum nesting level is 15.",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentModel"
            },
            "description": "/// <summary>\r\nSpecifies an attachment GUID. Multiple values can be sent.\r\n</summary>",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "\"<b>parameter</b>\": \"<b>value</b>\" pair with arbitrary custom parameters. Multiple parameters can be sent.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AttachmentPutModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the attachment",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "AttachmentPutModelAutoTestStepResultsModel": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The name of the step.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the step result.",
            "nullable": true
          },
          "info": {
            "type": "string",
            "description": "Extended description of the step result.",
            "nullable": true
          },
          "startedOn": {
            "type": "string",
            "description": "Step start date.",
            "format": "date-time",
            "nullable": true
          },
          "completedOn": {
            "type": "string",
            "description": "Step end date.",
            "format": "date-time",
            "nullable": true
          },
          "duration": {
            "maximum": 43200000000,
            "minimum": 0,
            "type": "integer",
            "description": "Expected or actual duration of the test run execution in milliseconds.",
            "format": "int64",
            "nullable": true
          },
          "outcome": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AvailableTestResultOutcome"
              }
            ],
            "description": "Specifies the result of the autotest execution.",
            "nullable": true
          },
          "stepResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentPutModelAutoTestStepResultsModel"
            },
            "description": "Nested step results. The maximum nesting level is 15.",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentPutModel"
            },
            "description": "/// <summary>\r\nSpecifies an attachment GUID. Multiple values can be sent.\r\n</summary>",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "\"<b>parameter</b>\": \"<b>value</b>\" pair with arbitrary custom parameters. Multiple parameters can be sent.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutoTestAverageDurationModel": {
        "required": [
          "failedAverageDuration",
          "passedAverageDuration"
        ],
        "type": "object",
        "properties": {
          "passedAverageDuration": {
            "title": "Pass average duration of autotest from all related test results",
            "type": "number",
            "format": "double",
            "example": 2.5555
          },
          "failedAverageDuration": {
            "title": "Fail average duration of autotest from all related test results",
            "type": "number",
            "format": "double",
            "example": 2.5555
          }
        },
        "additionalProperties": false
      },
      "AutoTestChangeViewModel": {
        "required": [
          "externalId",
          "globalId",
          "id",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "projectId": {
            "type": "string",
            "format": "uuid"
          },
          "externalId": {
            "type": "string"
          },
          "globalId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "AutoTestChangeViewModelArrayChangedFieldViewModel": {
        "type": "object",
        "properties": {
          "oldValue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestChangeViewModel"
            },
            "nullable": true
          },
          "newValue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestChangeViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutoTestIdModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "AutoTestModel": {
        "required": [
          "createdById",
          "createdDate",
          "externalId",
          "globalId",
          "id",
          "isDeleted",
          "mustBeApproved",
          "name",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "globalId": {
            "type": "integer",
            "description": "Global ID of the autotest",
            "format": "int64"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the autotest is deleted"
          },
          "mustBeApproved": {
            "type": "boolean",
            "description": "Indicates if the autotest has unapproved changes from linked work items"
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the autotest",
            "format": "uuid"
          },
          "createdDate": {
            "type": "string",
            "description": "Creation date of the autotest",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Last modification date of the project",
            "format": "date-time",
            "nullable": true
          },
          "createdById": {
            "type": "string",
            "description": "Unique ID of the project creator",
            "format": "uuid"
          },
          "modifiedById": {
            "type": "string",
            "description": "Unique ID of the project last editor",
            "format": "uuid",
            "nullable": true
          },
          "lastTestRunId": {
            "type": "string",
            "description": "Unique ID of the autotest last test run",
            "format": "uuid",
            "nullable": true
          },
          "lastTestRunName": {
            "type": "string",
            "description": "Name of the autotest last test run",
            "nullable": true
          },
          "lastTestResultId": {
            "type": "string",
            "description": "Unique ID of the autotest last test result",
            "format": "uuid",
            "nullable": true
          },
          "lastTestResultOutcome": {
            "type": "string",
            "description": "Outcome of the autotest last test result",
            "nullable": true
          },
          "stabilityPercentage": {
            "type": "integer",
            "description": "Stability percentage of the autotest",
            "format": "int32",
            "nullable": true
          },
          "externalId": {
            "minLength": 1,
            "type": "string",
            "description": "External ID of the autotest"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkPutModel"
            },
            "description": "Collection of the autotest links",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "description": "Unique ID of the autotest project",
            "format": "uuid"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the autotest"
          },
          "namespace": {
            "type": "string",
            "description": "Name of the autotest namespace",
            "nullable": true
          },
          "classname": {
            "type": "string",
            "description": "Name of the autotest class",
            "nullable": true
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestStepModel"
            },
            "description": "Collection of the autotest steps",
            "nullable": true
          },
          "setup": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestStepModel"
            },
            "description": "Collection of the autotest setup steps",
            "nullable": true
          },
          "teardown": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestStepModel"
            },
            "description": "Collection of the autotest teardown steps",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Name of the autotest in autotest's card",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the autotest in autotest's card",
            "nullable": true
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LabelShortModel"
            },
            "description": "Collection of the autotest labels",
            "nullable": true
          },
          "isFlaky": {
            "type": "boolean",
            "description": "Indicates if the autotest is marked as flaky",
            "nullable": true
          },
          "externalKey": {
            "type": "string",
            "description": "External key of the autotest",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutoTestModelV2GetModel": {
        "required": [
          "createdById",
          "externalId",
          "globalId",
          "id",
          "isDeleted",
          "name",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "externalId": {
            "title": "External autotest identifier (unique in each project)",
            "type": "string",
            "description": "This property is used to set autotest identifier from client system",
            "example": "10001"
          },
          "links": {
            "title": "Links, related to the current autotest",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkModel"
            },
            "nullable": true
          },
          "projectId": {
            "title": "Project unique identifier",
            "type": "string",
            "description": "This property is used to link autotest with project",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "name": {
            "title": "Autotest name",
            "type": "string",
            "example": "WorkItem valid creation test"
          },
          "namespace": {
            "title": "Name of abstract storage where autotest is located",
            "type": "string",
            "nullable": true,
            "example": "UnitTest.Core"
          },
          "classname": {
            "title": "Name of a class where autotest is located",
            "type": "string",
            "nullable": true,
            "example": "WorkItemServiceTest.cs"
          },
          "steps": {
            "title": "Enumeration of autotest steps. Nested steps enumeration inside step object is supported",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestStepModel"
            },
            "nullable": true
          },
          "setup": {
            "title": "Enumeration of actions to be executed before autotest start. Nested steps enumeration inside setup object is supported",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestStepModel"
            },
            "nullable": true
          },
          "teardown": {
            "title": "Enumeration of actions to be executed after autotest finish. Nested steps enumeration inside teardown object is supported",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestStepModel"
            },
            "nullable": true
          },
          "globalId": {
            "title": "Auto test Global unique identifier",
            "type": "integer",
            "format": "int64",
            "example": 1000
          },
          "createdDate": {
            "title": "Date and time of autotest creation",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "modifiedDate": {
            "title": "Date and time of last autotest modification",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "createdById": {
            "title": "Unique identifier of user who created autotest",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "modifiedById": {
            "title": "Unique identifier of user who applied last autotest modification",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "labels": {
            "title": "Label of autotest",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LabelShortModel"
            },
            "nullable": true
          },
          "externalKey": {
            "title": "External key of autotest",
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the entity",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the entity is deleted"
          }
        },
        "additionalProperties": false
      },
      "AutoTestNamespaceModel": {
        "type": "object",
        "properties": {
          "name": {
            "title": "Autotest namespace",
            "type": "string",
            "nullable": true,
            "example": "WebApi.Core.Tests"
          },
          "classes": {
            "title": "Autotest class names",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutoTestPostModel": {
        "required": [
          "externalId",
          "name",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "workItemIdsForLinkWithAutoTest": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies the IDs of work items to link your autotest to. You can specify several IDs.",
            "nullable": true
          },
          "shouldCreateWorkItem": {
            "type": "boolean",
            "description": "Creates a test case linked to the autotest.",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "nullable": true
            },
            "description": "Key value pair of custom work item attributes",
            "nullable": true
          },
          "externalId": {
            "minLength": 1,
            "type": "string",
            "description": "External ID of the autotest"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkPostModel"
            },
            "description": "Collection of the autotest links",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "description": "Unique ID of the autotest project",
            "format": "uuid"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the autotest"
          },
          "namespace": {
            "type": "string",
            "description": "Name of the autotest namespace",
            "nullable": true
          },
          "classname": {
            "type": "string",
            "description": "Name of the autotest class",
            "nullable": true
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestStepModel"
            },
            "description": "Collection of the autotest steps",
            "nullable": true
          },
          "setup": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestStepModel"
            },
            "description": "Collection of the autotest setup steps",
            "nullable": true
          },
          "teardown": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestStepModel"
            },
            "description": "Collection of the autotest teardown steps",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Name of the autotest in autotest's card",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the autotest in autotest's card",
            "nullable": true
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LabelPostModel"
            },
            "description": "Collection of the autotest labels",
            "nullable": true
          },
          "isFlaky": {
            "type": "boolean",
            "description": "Indicates if the autotest is marked as flaky",
            "nullable": true
          },
          "externalKey": {
            "type": "string",
            "description": "External key of the autotest",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutoTestPutModel": {
        "required": [
          "externalId",
          "name",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Autotest unique internal identifier",
            "type": "string",
            "description": "Used for search autotest. If value is null or equals Guid mask filled with zeros, search will be executed using ExternalId",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "workItemIdsForLinkWithAutoTest": {
            "title": "WorkItems unique internal identifiers for link with AutoTest",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "externalId": {
            "minLength": 1,
            "type": "string",
            "description": "External ID of the autotest"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkPutModel"
            },
            "description": "Collection of the autotest links",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "description": "Unique ID of the autotest project",
            "format": "uuid"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the autotest"
          },
          "namespace": {
            "type": "string",
            "description": "Name of the autotest namespace",
            "nullable": true
          },
          "classname": {
            "type": "string",
            "description": "Name of the autotest class",
            "nullable": true
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestStepModel"
            },
            "description": "Collection of the autotest steps",
            "nullable": true
          },
          "setup": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestStepModel"
            },
            "description": "Collection of the autotest setup steps",
            "nullable": true
          },
          "teardown": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestStepModel"
            },
            "description": "Collection of the autotest teardown steps",
            "nullable": true
          },
          "title": {
            "type": "string",
            "description": "Name of the autotest in autotest's card",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the autotest in autotest's card",
            "nullable": true
          },
          "labels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LabelPostModel"
            },
            "description": "Collection of the autotest labels",
            "nullable": true
          },
          "isFlaky": {
            "type": "boolean",
            "description": "Indicates if the autotest is marked as flaky",
            "nullable": true
          },
          "externalKey": {
            "type": "string",
            "description": "External key of the autotest",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutoTestResultsForTestRunModel": {
        "required": [
          "autoTestExternalId",
          "configurationId",
          "outcome"
        ],
        "type": "object",
        "properties": {
          "configurationId": {
            "type": "string",
            "description": "Specifies the GUID of the autotest configuration, which was specified when the test run was created.",
            "format": "uuid"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkPostModel"
            },
            "description": "Specifies the links in the autotest.",
            "nullable": true
          },
          "failureReasonNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FailureCategoryModel"
            },
            "description": "Specifies the cause of autotest failure.",
            "nullable": true
          },
          "autoTestExternalId": {
            "minLength": 1,
            "type": "string",
            "description": "Specifies the external ID of the autotest, which was specified when the test run was created."
          },
          "outcome": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AvailableTestResultOutcome"
              }
            ],
            "description": "Specifies the result of the autotest execution."
          },
          "message": {
            "type": "string",
            "description": "A comment for the result.",
            "nullable": true
          },
          "traces": {
            "type": "string",
            "description": "An extended comment or a stack trace.",
            "nullable": true
          },
          "startedOn": {
            "type": "string",
            "description": "Test run start date.",
            "format": "date-time",
            "nullable": true
          },
          "completedOn": {
            "type": "string",
            "description": "Test run end date.",
            "format": "date-time",
            "nullable": true
          },
          "duration": {
            "maximum": 43200000000,
            "minimum": 0,
            "type": "integer",
            "description": "Expected or actual duration of the test run execution in milliseconds.",
            "format": "int64",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentPutModel"
            },
            "description": "Specifies an attachment GUID. Multiple values can be sent.",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "\"<b>parameter</b>\": \"<b>value</b>\" pair with arbitrary custom parameters. Multiple parameters can be sent.",
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "\"<b>property</b>\": \"<b>value</b>\" pair with arbitrary custom properties. Multiple properties can be sent.",
            "nullable": true
          },
          "stepResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentPutModelAutoTestStepResultsModel"
            },
            "description": "Specifies the results of individual steps.",
            "nullable": true
          },
          "setupResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentPutModelAutoTestStepResultsModel"
            },
            "description": "Specifies the results of setup steps. For information on supported values, see the `stepResults` parameter above.",
            "nullable": true
          },
          "teardownResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentPutModelAutoTestStepResultsModel"
            },
            "description": "Specifies the results of the teardown steps. For information on supported values, see the `stepResults` parameter above.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutoTestShortModel": {
        "required": [
          "externalId",
          "globalId",
          "id",
          "name",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "globalId": {
            "type": "integer",
            "format": "int64"
          },
          "externalId": {
            "type": "string"
          },
          "projectId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AutoTestStepModel": {
        "required": [
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "minLength": 1,
            "type": "string",
            "description": "Step name."
          },
          "description": {
            "type": "string",
            "description": "Detailed step description. It appears when the step is unfolded.",
            "nullable": true
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestStepModel"
            },
            "description": "Includes a nested step inside another step. The maximum nesting level is 15.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutotestFilterModel": {
        "type": "object",
        "properties": {
          "projectIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies an autotest projects IDs to search for",
            "nullable": true
          },
          "externalIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specifies an autotest external IDs to search for",
            "nullable": true
          },
          "globalIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Specifies an autotest global IDs to search for",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Specifies an autotest name to search for",
            "nullable": true
          },
          "isFlaky": {
            "type": "boolean",
            "description": "Specifies an autotest flaky status to search for",
            "nullable": true
          },
          "mustBeApproved": {
            "type": "boolean",
            "description": "Specifies an autotest unapproved changes status to search for",
            "nullable": true
          },
          "stabilityPercentage": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int64RangeSelectorModel"
              }
            ],
            "description": "Specifies an autotest range of stability percentage to search for",
            "nullable": true
          },
          "createdDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies an autotest range of creation date to search for",
            "nullable": true
          },
          "createdByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies an autotest creator IDs to search for",
            "nullable": true
          },
          "modifiedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies an autotest range of last modification date to search for",
            "nullable": true
          },
          "modifiedByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies an autotest last editor IDs to search for",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Specifies an autotest deleted status to search for",
            "nullable": true
          },
          "namespace": {
            "type": "string",
            "description": "Specifies an autotest namespace to search for",
            "nullable": true
          },
          "isEmptyNamespace": {
            "type": "boolean",
            "description": "Specifies an autotest namespace name presence status to search for",
            "nullable": true
          },
          "className": {
            "type": "string",
            "description": "Specifies an autotest class name to search for",
            "nullable": true
          },
          "isEmptyClassName": {
            "type": "boolean",
            "description": "Specifies an autotest class name presence status to search for",
            "nullable": true
          },
          "lastTestResultOutcome": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AutotestResultOutcome"
              }
            ],
            "description": "Specifies an autotest outcome of the last test result to search for",
            "nullable": true
          },
          "externalKey": {
            "type": "string",
            "description": "Specifies an autotest external key to search for",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutotestHistoricalResultSelectModel": {
        "type": "object",
        "properties": {
          "outcomes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutotestResultOutcome"
            },
            "nullable": true
          },
          "testPlanIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "testRunIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "configurationIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "launchSource": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "userIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "duration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int64RangeSelectorModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutotestResultHistoricalGetModel": {
        "required": [
          "configurationId",
          "configurationName",
          "createdById",
          "createdByName",
          "createdDate",
          "id",
          "outcome",
          "testRunId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdById": {
            "type": "string",
            "format": "uuid"
          },
          "createdByName": {
            "type": "string"
          },
          "testRunId": {
            "type": "string",
            "format": "uuid"
          },
          "testRunName": {
            "type": "string",
            "nullable": true
          },
          "configurationId": {
            "type": "string",
            "format": "uuid"
          },
          "configurationName": {
            "type": "string"
          },
          "outcome": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AutotestResultOutcome"
              }
            ]
          },
          "launchSource": {
            "type": "string",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "modifiedById": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "testPlanId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "testPlanGlobalId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "testPlanName": {
            "type": "string",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutotestResultOutcome": {
        "enum": [
          "InProgress",
          "Passed",
          "Failed",
          "Skipped",
          "Blocked"
        ],
        "type": "string"
      },
      "AutotestResultReasonSubGetModel": {
        "required": [
          "failureCategory",
          "name"
        ],
        "type": "object",
        "properties": {
          "failureCategory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FailureCategoryModel"
              }
            ]
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "AutotestSelectModel": {
        "required": [
          "extractionModel",
          "filter"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AutotestFilterModel"
              }
            ]
          },
          "extractionModel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AutotestsExtractionModel"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "AutotestsExtractionModel": {
        "type": "object",
        "properties": {
          "ids": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuidExtractionModel"
              }
            ],
            "description": "Extraction parameters for autotests",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "AutotestsSelectModel": {
        "required": [
          "filter",
          "includes"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AutotestFilterModel"
              }
            ],
            "description": "Object containing different filters to adjust search"
          },
          "includes": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SearchAutoTestsQueryIncludesModel"
              }
            ],
            "description": "Object specifying data to be included"
          }
        },
        "additionalProperties": false
      },
      "AvailableTestResultOutcome": {
        "enum": [
          "Passed",
          "Failed",
          "Blocked",
          "Skipped"
        ],
        "type": "string"
      },
      "BackgroundJobAttachmentModel": {
        "required": [
          "id",
          "name",
          "size",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "size": {
            "type": "number",
            "format": "float"
          }
        },
        "additionalProperties": false
      },
      "BackgroundJobFilterModel": {
        "type": "object",
        "properties": {
          "types": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackgroundJobType"
            },
            "nullable": true
          },
          "states": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackgroundJobState"
            },
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "nullable": true
          },
          "startDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "nullable": true
          },
          "endDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BackgroundJobGetModel": {
        "required": [
          "attachments",
          "createdDate",
          "id",
          "isDeleted",
          "jobId",
          "jobType",
          "progress",
          "state"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "jobId": {
            "type": "string"
          },
          "jobType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BackgroundJobType"
              }
            ]
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BackgroundJobState"
              }
            ]
          },
          "isDeleted": {
            "type": "boolean"
          },
          "progress": {
            "type": "integer",
            "format": "int64"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackgroundJobAttachmentModel"
            }
          }
        },
        "additionalProperties": false
      },
      "BackgroundJobState": {
        "enum": [
          "Enqueued",
          "InProgress",
          "Completed",
          "Failed",
          "Canceled"
        ],
        "type": "string"
      },
      "BackgroundJobType": {
        "enum": [
          "ExportXlsxTestResultsByTestPlan",
          "ExportXlsxWorkItemsByProject",
          "ExportXlsxTestPointsByTestPlan",
          "ExportJsonProject",
          "ExportZipProject",
          "ExportJsonProjectWithTestPlans",
          "ExportZipProjectWithTestPlans",
          "ImportJsonProject",
          "ImportZipProject",
          "ImportXlsxProject",
          "ImportTestRailXmlProject",
          "PurgeProject",
          "ExportProjects",
          "ImportProjects",
          "PurgeEntities",
          "DeleteCompletedJobs"
        ],
        "type": "string"
      },
      "BooleanChangedFieldViewModel": {
        "required": [
          "newValue",
          "oldValue"
        ],
        "type": "object",
        "properties": {
          "oldValue": {
            "type": "boolean"
          },
          "newValue": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "BooleanNullableChangedFieldViewModel": {
        "type": "object",
        "properties": {
          "oldValue": {
            "type": "boolean",
            "nullable": true
          },
          "newValue": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfigurationByParametersModel": {
        "required": [
          "parameterIds",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "projectId": {
            "title": "Project unique identifier",
            "type": "string",
            "description": "This property is used to link configuration with project",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "parameterIds": {
            "title": "Parameters unique identifiers",
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          }
        },
        "additionalProperties": false
      },
      "ConfigurationExtractionModel": {
        "type": "object",
        "properties": {
          "ids": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuidExtractionModel"
              }
            ],
            "description": "Extraction parameters for configurations",
            "nullable": true
          },
          "projectIds": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuidExtractionModel"
              }
            ],
            "description": "Extraction parameters for projects",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfigurationFilterModel": {
        "type": "object",
        "properties": {
          "projectIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of projects from which configurations will be taken",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Filter to search by name (case-insensitive, partial match)",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is configurations deleted or existing",
            "nullable": true
          },
          "globalIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Collection of global (integer) identifiers to filter configurations",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ConfigurationModel": {
        "required": [
          "createdById",
          "createdDate",
          "globalId",
          "id",
          "isDefault",
          "isDeleted",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "description": {
            "title": "Configuration description",
            "type": "string",
            "nullable": true,
            "example": "Default configuration"
          },
          "parameters": {
            "title": "Configuration parameters",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "projectId": {
            "title": "Project unique identifier",
            "type": "string",
            "description": "This property is used to link configuration with project",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "isDefault": {
            "title": "Boolean flag defines if the configuration must be used as default",
            "type": "boolean",
            "example": true
          },
          "name": {
            "title": "Configuration name",
            "type": "string",
            "nullable": true,
            "example": "Default"
          },
          "createdDate": {
            "title": "Date and time of configuration creation",
            "type": "string",
            "format": "date-time",
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "modifiedDate": {
            "title": "Date and time of last configuration modification",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "createdById": {
            "title": "Unique identifier of user who created configuration",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "modifiedById": {
            "title": "Unique identifier of user who applied last configuration modification",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "globalId": {
            "title": "Configuration Global unique identifier",
            "type": "integer",
            "format": "int64",
            "example": 1000
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the entity",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the entity is deleted"
          }
        },
        "additionalProperties": false
      },
      "ConfigurationPostModel": {
        "required": [
          "isDefault",
          "name",
          "parameters",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "description": {
            "title": "Configuration description",
            "type": "string",
            "nullable": true,
            "example": "Default configuration"
          },
          "parameters": {
            "title": "Configuration parameters",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "projectId": {
            "title": "Project unique identifier",
            "type": "string",
            "description": "This property is used to link configuration with project",
            "format": "uuid"
          },
          "isDefault": {
            "title": "Boolean flag defines if the configuration must be used as default",
            "type": "boolean",
            "example": true
          },
          "name": {
            "title": "Configuration name",
            "minLength": 1,
            "type": "string",
            "example": "Default"
          }
        },
        "additionalProperties": false
      },
      "ConfigurationPutModel": {
        "required": [
          "id",
          "isDefault",
          "name",
          "parameters",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Configuration internal identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "description": {
            "title": "Configuration description",
            "type": "string",
            "nullable": true,
            "example": "Default configuration"
          },
          "parameters": {
            "title": "Configuration parameters",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "projectId": {
            "title": "Project unique identifier",
            "type": "string",
            "description": "This property is used to link configuration with project",
            "format": "uuid"
          },
          "isDefault": {
            "title": "Boolean flag defines if the configuration must be used as default",
            "type": "boolean",
            "example": true
          },
          "name": {
            "title": "Configuration name",
            "minLength": 1,
            "type": "string",
            "example": "Default"
          }
        },
        "additionalProperties": false
      },
      "ConfigurationSelectModel": {
        "type": "object",
        "properties": {
          "filter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConfigurationFilterModel"
              }
            ],
            "description": "Configuration filters collection",
            "nullable": true
          },
          "extractionModel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ConfigurationExtractionModel"
              }
            ],
            "description": "Rules for configurations extraction",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeChangeModel": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "oldAttributeName": {
            "type": "string",
            "nullable": true
          },
          "newAttributeName": {
            "type": "string",
            "nullable": true
          },
          "oldValue": {
            "nullable": true
          },
          "newValue": {
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeGetModel": {
        "required": [
          "id",
          "isDeleted",
          "isEnabled",
          "isGlobal",
          "isRequired",
          "name",
          "options",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the attribute",
            "format": "uuid"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeOptionModel"
            },
            "description": "Collection of the attribute options"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomAttributeTypesEnum"
              }
            ],
            "description": "Type of the attribute"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the attribute is deleted"
          },
          "name": {
            "type": "string",
            "description": "Name of the attribute"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Indicates if the attribute is enabled"
          },
          "isRequired": {
            "type": "boolean",
            "description": "Indicates if the attribute is mandatory to specify"
          },
          "isGlobal": {
            "type": "boolean",
            "description": "Indicates if the attribute is available across all projects"
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeModel": {
        "required": [
          "id",
          "isDeleted",
          "isEnabled",
          "isGlobal",
          "isRequired",
          "name",
          "options",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the attribute",
            "format": "uuid"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeOptionModel"
            },
            "description": "Collection of the attribute options\r\n\n\r\nAvailable for attributes of type `options` and `multiple options` only"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomAttributeTypesEnum"
              }
            ],
            "description": "Type of the attribute"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the attribute is deleted"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Name of the attribute"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Indicates if the attribute is enabled"
          },
          "isRequired": {
            "type": "boolean",
            "description": "Indicates if the attribute value is mandatory to specify"
          },
          "isGlobal": {
            "type": "boolean",
            "description": "Indicates if the attribute is available across all projects"
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeOptionModel": {
        "required": [
          "id",
          "isDefault",
          "isDeleted"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the attribute option",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the attributes option is deleted"
          },
          "value": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Value of the attribute option",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean",
            "description": "Indicates if the attribute option is used by default"
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeOptionPostModel": {
        "required": [
          "isDefault"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Value of the attribute option",
            "nullable": true
          },
          "isDefault": {
            "type": "boolean",
            "description": "Indicates if the attribute option is used by default"
          }
        },
        "additionalProperties": false
      },
      "CustomAttributePostModel": {
        "required": [
          "isEnabled",
          "isGlobal",
          "isRequired",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeOptionPostModel"
            },
            "description": "Collection of attribute options\r\n\n\r\nAvailable for attributes of type `options` and `multiple options` only",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomAttributeTypesEnum"
              }
            ],
            "description": "Type of attribute"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Name of the attribute"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Indicates if the attribute is enabled"
          },
          "isRequired": {
            "type": "boolean",
            "description": "Indicates if the attribute value is mandatory to specify"
          },
          "isGlobal": {
            "type": "boolean",
            "description": "Indicates if the attribute is available across all projects"
          }
        },
        "additionalProperties": false
      },
      "CustomAttributePutModel": {
        "required": [
          "id",
          "isDeleted",
          "isEnabled",
          "isGlobal",
          "isRequired",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the attribute",
            "format": "uuid"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeOptionModel"
            },
            "description": "Collection of the attribute options\r\n\n\r\nAvailable for attributes of type `options` and `multiple options` only",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomAttributeTypesEnum"
              }
            ],
            "description": "Type of the attribute"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the entity is deleted"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Name of the attribute"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Indicates if the attribute is enabled"
          },
          "isRequired": {
            "type": "boolean",
            "description": "Indicates if the attribute value is mandatory to specify"
          },
          "isGlobal": {
            "type": "boolean",
            "description": "Indicates if the attribute is available across all projects"
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeSearchQueryModel": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Name of attribute",
            "nullable": true
          },
          "projectIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique IDs of projects where attribute is in use",
            "nullable": true
          },
          "customAttributeIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique IDs of attributes for search restriction",
            "nullable": true
          },
          "customAttributeTypes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeTypesEnum"
            },
            "description": "Collection of attribute types",
            "nullable": true
          },
          "isGlobal": {
            "type": "boolean",
            "description": "Indicates whether the attribute is available across all projects",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates whether the attribute is deleted",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeTemplateModel": {
        "required": [
          "id",
          "isDeleted",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Custom attribute template internal unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "isDeleted": {
            "title": "Flag that defines if custom attribute template is deleted",
            "type": "boolean",
            "example": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Custom attributes template name"
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeTemplatePostModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "customAttributeIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of attribute IDs",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Custom attributes template name"
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeTemplatePutModel": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the attribute template",
            "format": "uuid"
          },
          "customAttributeIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of attribute IDs",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Custom attributes template name"
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeTemplateSearchQueryModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "projectIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "customAttributeTypes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeTypesEnum"
            },
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeTestPlanProjectRelationPutModel": {
        "required": [
          "id",
          "isEnabled",
          "isRequired"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Custom attribute internal unique identifier",
            "format": "uuid"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Flag that defines if custom attribute is enabled"
          },
          "isRequired": {
            "type": "boolean",
            "description": "Flag that defines if custom attribute is required"
          }
        },
        "additionalProperties": false
      },
      "CustomAttributeTypesEnum": {
        "enum": [
          "string",
          "datetime",
          "options",
          "user",
          "multipleOptions",
          "checkbox"
        ],
        "type": "string"
      },
      "DateTimeRangeSelectorModel": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "to": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DeletionState": {
        "enum": [
          "Any",
          "Deleted",
          "NotDeleted"
        ],
        "type": "string"
      },
      "ExternalLinkModel": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "issueTypeName": {
            "type": "string",
            "nullable": true
          },
          "issueTypeIconUrl": {
            "type": "string",
            "nullable": true
          },
          "priorityName": {
            "type": "string",
            "nullable": true
          },
          "priorityIconUrl": {
            "type": "string",
            "nullable": true
          },
          "statusName": {
            "type": "string",
            "nullable": true
          },
          "assigneeDisplayName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "FailureCategoryModel": {
        "enum": [
          "InfrastructureDefect",
          "ProductDefect",
          "TestDefect",
          "NoDefect",
          "NoAnalytics"
        ],
        "type": "string"
      },
      "FailureClassModel": {
        "required": [
          "createdById",
          "createdDate",
          "failureCategory",
          "id",
          "isDeleted"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "failureCategory": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FailureCategoryModel"
              }
            ]
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdById": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedById": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "failureClassRegexes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FailureClassRegexModel"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the entity",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the entity is deleted"
          }
        },
        "additionalProperties": false
      },
      "FailureClassRegexModel": {
        "required": [
          "id",
          "isDeleted",
          "regexText"
        ],
        "type": "object",
        "properties": {
          "regexText": {
            "type": "string"
          },
          "failureClassId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the entity",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the entity is deleted"
          }
        },
        "additionalProperties": false
      },
      "FilterModel": {
        "required": [
          "createdById",
          "createdDate",
          "data",
          "id",
          "isDeleted",
          "name",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdById": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedById": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemSearchQueryModel"
              }
            ]
          },
          "projectId": {
            "type": "string",
            "format": "uuid"
          },
          "fieldsToShow": {
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the entity",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the entity is deleted"
          }
        },
        "additionalProperties": false
      },
      "FlakyBulkModel": {
        "required": [
          "autotestSelect",
          "value"
        ],
        "type": "object",
        "properties": {
          "autotestSelect": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AutotestSelectModel"
              }
            ]
          },
          "value": {
            "type": "boolean",
            "description": "Are autotests flaky"
          }
        },
        "additionalProperties": false
      },
      "GetXlsxTestPointsByTestPlanModel": {
        "required": [
          "includeAuthor",
          "includeAutomated",
          "includeCreationDate",
          "includeDuration",
          "includeIterations",
          "includeModificationDate",
          "includeModifiedBy",
          "includeName",
          "includePriority",
          "includeSection",
          "includeStatus",
          "includeTags"
        ],
        "type": "object",
        "properties": {
          "includeName": {
            "type": "boolean"
          },
          "includeSection": {
            "type": "boolean"
          },
          "includePriority": {
            "type": "boolean"
          },
          "includeAutomated": {
            "type": "boolean"
          },
          "includeStatus": {
            "type": "boolean"
          },
          "includeDuration": {
            "type": "boolean"
          },
          "includeCreationDate": {
            "type": "boolean"
          },
          "includeAuthor": {
            "type": "boolean"
          },
          "includeModificationDate": {
            "type": "boolean"
          },
          "includeModifiedBy": {
            "type": "boolean"
          },
          "includeTags": {
            "type": "boolean"
          },
          "includeIterations": {
            "type": "boolean"
          },
          "customAttributesIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "configurationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GlobalCustomAttributePostModel": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Name of attribute"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Indicates whether the attribute is available",
            "nullable": true
          },
          "isRequired": {
            "type": "boolean",
            "description": "Indicates whether the attribute value is mandatory to specify",
            "nullable": true
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeOptionPostModel"
            },
            "description": "Collection of attribute options\r\n\n\r\nAvailable for attributes of type `options` and `multiple options` only",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CustomAttributeTypesEnum"
              }
            ],
            "description": "Type of attribute"
          }
        },
        "additionalProperties": false
      },
      "GlobalCustomAttributeUpdateModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Name of attribute"
          },
          "options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeOptionModel"
            },
            "description": "Collection of attribute options\r\n\n\r\nAvailable for attributes of type `options` and `multiple options` only",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Indicates whether the attribute is available",
            "nullable": true
          },
          "isRequired": {
            "type": "boolean",
            "description": "Indicates whether the attribute value is mandatory to specify",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GlobalSearchItemResult": {
        "required": [
          "name",
          "projectGlobalId",
          "resourceId",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "resourceType": {
            "type": "string"
          },
          "resourceId": {
            "type": "string",
            "format": "uuid"
          },
          "globalId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "projectGlobalId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "GlobalSearchRequest": {
        "required": [
          "query",
          "skip",
          "take"
        ],
        "type": "object",
        "properties": {
          "query": {
            "type": "string"
          },
          "resourceType": {
            "type": "string",
            "nullable": true
          },
          "take": {
            "type": "integer",
            "format": "int32"
          },
          "skip": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "GlobalSearchResponse": {
        "required": [
          "availableResourceTypes",
          "moreResultsAvailable",
          "results"
        ],
        "type": "object",
        "properties": {
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GlobalSearchItemResult"
            }
          },
          "moreResultsAvailable": {
            "type": "boolean"
          },
          "availableResourceTypes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "GuidChangedFieldViewModel": {
        "required": [
          "newValue",
          "oldValue"
        ],
        "type": "object",
        "properties": {
          "oldValue": {
            "type": "string",
            "format": "uuid"
          },
          "newValue": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "GuidExtractionModel": {
        "type": "object",
        "properties": {
          "include": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "exclude": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ImageResizeType": {
        "enum": [
          "Crop",
          "AddBackgroundStripes"
        ],
        "type": "string"
      },
      "Int32ChangedFieldViewModel": {
        "required": [
          "newValue",
          "oldValue"
        ],
        "type": "object",
        "properties": {
          "oldValue": {
            "type": "integer",
            "format": "int32"
          },
          "newValue": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "Int32RangeSelectorModel": {
        "type": "object",
        "properties": {
          "from": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "to": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Int64ChangedFieldViewModel": {
        "required": [
          "newValue",
          "oldValue"
        ],
        "type": "object",
        "properties": {
          "oldValue": {
            "type": "integer",
            "format": "int64"
          },
          "newValue": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "Int64RangeSelectorModel": {
        "type": "object",
        "properties": {
          "from": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "to": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IterationModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParameterShortModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IterationPutModel": {
        "required": [
          "id",
          "parameters"
        ],
        "type": "object",
        "properties": {
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParameterIterationModel"
            }
          },
          "id": {
            "title": "Iteration identifier, must be empty for new or changed iteration",
            "type": "string",
            "format": "uuid",
            "example": "00000000-0000-0000-0000-000000000000"
          }
        },
        "additionalProperties": false
      },
      "LabelPostModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the label"
          }
        },
        "additionalProperties": false
      },
      "LabelShortModel": {
        "required": [
          "globalId",
          "name"
        ],
        "type": "object",
        "properties": {
          "globalId": {
            "type": "integer",
            "description": "Global ID of the label",
            "format": "int64"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the label"
          }
        },
        "additionalProperties": false
      },
      "LastTestResultModel": {
        "required": [
          "id",
          "testRunId",
          "workItemVersionId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "testRunId": {
            "type": "string",
            "format": "uuid"
          },
          "autoTestId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkModel"
            },
            "nullable": true
          },
          "workItemVersionId": {
            "type": "string",
            "format": "uuid"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LinkModel": {
        "required": [
          "hasInfo",
          "url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Link unique identifier",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "title": {
            "type": "string",
            "description": "Link name.",
            "nullable": true
          },
          "url": {
            "minLength": 1,
            "type": "string",
            "description": "Address can be specified without protocol, but necessarily with the domain."
          },
          "description": {
            "type": "string",
            "description": "Link description.",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkType"
              }
            ],
            "description": "Specifies the type of the link.",
            "nullable": true
          },
          "hasInfo": {
            "title": "Flag defines if link relates to integrated jira service",
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LinkPostModel": {
        "required": [
          "hasInfo",
          "url"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Link name.",
            "nullable": true
          },
          "url": {
            "minLength": 1,
            "type": "string",
            "description": "Address can be specified without protocol, but necessarily with the domain."
          },
          "description": {
            "type": "string",
            "description": "Link description.",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkType"
              }
            ],
            "description": "Specifies the type of the link.",
            "nullable": true
          },
          "hasInfo": {
            "title": "Flag defines if link relates to integrated jira service",
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LinkPutModel": {
        "required": [
          "hasInfo",
          "url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Link unique identifier",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "title": {
            "type": "string",
            "description": "Link name.",
            "nullable": true
          },
          "url": {
            "minLength": 1,
            "type": "string",
            "description": "Address can be specified without protocol, but necessarily with the domain."
          },
          "description": {
            "type": "string",
            "description": "Link description.",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkType"
              }
            ],
            "description": "Specifies the type of the link.",
            "nullable": true
          },
          "hasInfo": {
            "title": "Flag defines if link relates to integrated jira service",
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "LinkShortModel": {
        "required": [
          "id",
          "title",
          "url"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LinkSubGetModel": {
        "required": [
          "name",
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LinkType": {
        "enum": [
          "Related",
          "BlockedBy",
          "Defect",
          "Issue",
          "Requirement",
          "Repository"
        ],
        "type": "string"
      },
      "NamedEntityModel": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Entity name.",
            "readOnly": true
          },
          "id": {
            "type": "string",
            "description": "Entity Id.",
            "format": "uuid",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "NotificationModel": {
        "required": [
          "comment",
          "createdById",
          "entityId",
          "id",
          "isRead",
          "notificationType",
          "testPlanGlobalId",
          "testPlanName",
          "workItemName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isRead": {
            "type": "boolean"
          },
          "entityId": {
            "type": "string",
            "format": "uuid"
          },
          "notificationType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/NotificationTypeModel"
              }
            ]
          },
          "projectGlobalId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "projectName": {
            "type": "string",
            "nullable": true
          },
          "testPlanGlobalId": {
            "type": "integer",
            "format": "int64"
          },
          "testPlanName": {
            "type": "string"
          },
          "workitemGlobalId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "comment": {
            "type": "string"
          },
          "workItemName": {
            "type": "string"
          },
          "attributeName": {
            "type": "string",
            "nullable": true
          },
          "createdById": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "NotificationQueryFilterModel": {
        "type": "object",
        "properties": {
          "types": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationTypeModel"
            },
            "nullable": true
          },
          "isRead": {
            "type": "boolean",
            "nullable": true
          },
          "createdDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NotificationTypeModel": {
        "enum": [
          "MentionInComment",
          "TestPointIsSetInTestPlan",
          "MentionInCustomAttribute",
          "TestPlanUnlockRequest"
        ],
        "type": "string"
      },
      "Operation": {
        "type": "object",
        "properties": {
          "value": {
            "nullable": true
          },
          "path": {
            "type": "string",
            "nullable": true
          },
          "op": {
            "type": "string",
            "nullable": true
          },
          "from": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ParameterFilterModel": {
        "type": "object",
        "properties": {
          "isDeleted": {
            "type": "boolean",
            "description": "Specifies a parameter deleted status to search for",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Specifies a parameter key name to search for",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ParameterGroupModel": {
        "required": [
          "name",
          "parameterKeyId",
          "values"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "values": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "parameterKeyId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "ParameterIterationModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Parameter internal unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          }
        },
        "additionalProperties": false
      },
      "ParameterModel": {
        "required": [
          "createdById",
          "createdDate",
          "id",
          "isDeleted",
          "name",
          "parameterKeyId",
          "value"
        ],
        "type": "object",
        "properties": {
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdById": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedById": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "isDeleted": {
            "title": "Flag that defines if parameter is deleted",
            "type": "boolean",
            "example": true
          },
          "parameterKeyId": {
            "type": "string",
            "format": "uuid"
          },
          "id": {
            "title": "Parameter internal unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "value": {
            "maxLength": 1500,
            "minLength": 0,
            "type": "string",
            "description": "Value of the parameter"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Key of the parameter"
          }
        },
        "additionalProperties": false
      },
      "ParameterPostModel": {
        "required": [
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "value": {
            "maxLength": 1500,
            "minLength": 0,
            "type": "string",
            "description": "Value of the parameter"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Key of the parameter"
          }
        },
        "additionalProperties": false
      },
      "ParameterPutModel": {
        "required": [
          "id",
          "name",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Parameter internal unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "value": {
            "maxLength": 1500,
            "minLength": 0,
            "type": "string",
            "description": "Value of the parameter"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Key of the parameter"
          }
        },
        "additionalProperties": false
      },
      "ParameterShortModel": {
        "required": [
          "id",
          "name",
          "parameterKeyId",
          "value"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "parameterKeyId": {
            "type": "string",
            "format": "uuid"
          },
          "value": {
            "maxLength": 1500,
            "minLength": 0,
            "type": "string",
            "description": "Value of the parameter"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Key of the parameter"
          }
        },
        "additionalProperties": false
      },
      "PeriodViewModel": {
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PeriodViewModelChangedFieldViewModel": {
        "type": "object",
        "properties": {
          "oldValue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PeriodViewModel"
              }
            ],
            "nullable": true
          },
          "newValue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PeriodViewModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "ProjectAttributesFilterModel": {
        "required": [
          "name",
          "types"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Specifies an attribute name to search for"
          },
          "isRequired": {
            "type": "boolean",
            "description": "Specifies an attribute mandatory status to search for",
            "nullable": true
          },
          "isGlobal": {
            "type": "boolean",
            "description": "Specifies an attribute global status to search for",
            "nullable": true
          },
          "types": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeTypesEnum"
            },
            "description": "Specifies an attribute types to search for"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Specifies an attribute enabled status to search for",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProjectCustomAttributeTemplateGetModel": {
        "required": [
          "customAttributeModels",
          "id",
          "isDeleted",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the custom attributes template",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the custom attribute template is deleted"
          },
          "name": {
            "type": "string",
            "description": "Name of the custom attribute template"
          },
          "customAttributeModels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeModel"
            },
            "description": "Attributes of the template"
          }
        },
        "additionalProperties": false
      },
      "ProjectCustomAttributesTemplatesFilterModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of custom attribute template",
            "nullable": true
          },
          "customAttributeTypes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeTypesEnum"
            },
            "description": "Collection of custom attributes types",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of filters to apply to search"
      },
      "ProjectExtractionModel": {
        "type": "object",
        "properties": {
          "ids": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuidExtractionModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProjectModel": {
        "required": [
          "createdById",
          "createdDate",
          "globalId",
          "id",
          "isDeleted",
          "isFavorite",
          "isFlakyAuto",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the project",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "description": "Description of the project",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Name of the project"
          },
          "isFavorite": {
            "type": "boolean",
            "description": "Indicates if the project is marked as favorite"
          },
          "attributesScheme": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeModel"
            },
            "description": "Collection of the project attributes",
            "nullable": true
          },
          "testPlansAttributesScheme": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeModel"
            },
            "description": "Collection of the project test plans attributes",
            "nullable": true
          },
          "testCasesCount": {
            "type": "integer",
            "description": "Number of test cases in the project",
            "format": "int32",
            "nullable": true
          },
          "sharedStepsCount": {
            "type": "integer",
            "description": "Number of shared steps in the project",
            "format": "int32",
            "nullable": true
          },
          "checkListsCount": {
            "type": "integer",
            "description": "Number of checklists in the project",
            "format": "int32",
            "nullable": true
          },
          "autoTestsCount": {
            "type": "integer",
            "description": "Number of autotests in the project",
            "format": "int32",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the project is deleted"
          },
          "createdDate": {
            "type": "string",
            "description": "Creation date of the project",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Last modification date of the project",
            "format": "date-time",
            "nullable": true
          },
          "createdById": {
            "type": "string",
            "description": "Unique ID of the project creator",
            "format": "uuid"
          },
          "modifiedById": {
            "type": "string",
            "description": "Unique ID of the project last editor",
            "format": "uuid",
            "nullable": true
          },
          "globalId": {
            "type": "integer",
            "description": "Global ID of the project",
            "format": "int64"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectTypeModel"
              }
            ],
            "description": "Type of the project"
          },
          "isFlakyAuto": {
            "type": "boolean",
            "description": "Indicates if the status \"Flaky/Stable\" sets automatically"
          }
        },
        "additionalProperties": false
      },
      "ProjectPostModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Description of the project",
            "nullable": true
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the project"
          },
          "isFavorite": {
            "type": "boolean",
            "description": "Indicates if the project is marked as favorite",
            "nullable": true
          },
          "isFlakyAuto": {
            "type": "boolean",
            "description": "Indicates if the status \"Flaky/Stable\" sets automatically",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProjectPutModel": {
        "required": [
          "id",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the project",
            "format": "uuid"
          },
          "description": {
            "type": "string",
            "description": "Description of the project",
            "nullable": true
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Name of the project"
          },
          "isFavorite": {
            "type": "boolean",
            "description": "Indicates if the project is marked as favorite",
            "nullable": true
          },
          "isFlakyAuto": {
            "type": "boolean",
            "description": "Indicates if the status \"Flaky/Stable\" sets automatically",
            "nullable": true
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectTypeModel"
              }
            ],
            "description": "Type of the project"
          }
        },
        "additionalProperties": false
      },
      "ProjectSelectModel": {
        "type": "object",
        "properties": {
          "filter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectsFilterModel"
              }
            ],
            "nullable": true
          },
          "extractionModel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectExtractionModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProjectShortestModel": {
        "required": [
          "globalId",
          "id",
          "isDeleted",
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of project",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates whether the project is deleted"
          },
          "globalId": {
            "type": "integer",
            "description": "Global ID of project",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Name of project"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectTypeModel"
              }
            ],
            "description": "Type of the project"
          }
        },
        "additionalProperties": false
      },
      "ProjectTestPlansFilterModel": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "description": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "build": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "productName": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "status": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestPlanStatusModel"
            },
            "nullable": true
          },
          "globalIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "nullable": true
          },
          "isLocked": {
            "type": "boolean",
            "nullable": true
          },
          "lockedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "nullable": true
          },
          "automaticDurationTimer": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "boolean"
            },
            "nullable": true
          },
          "createdByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "createdDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "nullable": true
          },
          "startDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "nullable": true
          },
          "endDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "nullable": true
          },
          "tagNames": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProjectTypeModel": {
        "enum": [
          "Regular",
          "Demo"
        ],
        "type": "string"
      },
      "ProjectsFilterModel": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Specifies a project name to search for",
            "nullable": true
          },
          "isFavorite": {
            "type": "boolean",
            "description": "Specifies a project favorite status to search for",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Specifies a project deleted status to search for",
            "nullable": true
          },
          "testCasesCount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int32RangeSelectorModel"
              }
            ],
            "description": "Specifies a project range of test cases count to search for",
            "nullable": true
          },
          "checklistsCount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int32RangeSelectorModel"
              }
            ],
            "description": "Specifies a project range of checklists count to search for",
            "nullable": true
          },
          "sharedStepsCount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int32RangeSelectorModel"
              }
            ],
            "description": "Specifies a project range of shared steps count to search for",
            "nullable": true
          },
          "autotestsCount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int32RangeSelectorModel"
              }
            ],
            "description": "Specifies a project range of autotests count to search for",
            "nullable": true
          },
          "globalIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Specifies a project global IDs to search for",
            "nullable": true
          },
          "createdDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a project range of creation date to search for",
            "nullable": true
          },
          "createdByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies an autotest creator IDs to search for",
            "nullable": true
          },
          "types": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectTypeModel"
            },
            "description": "Collection of project types to search for",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PublicTestPointModel": {
        "required": [
          "configurationGlobalId",
          "configurationId",
          "id",
          "iterationId"
        ],
        "type": "object",
        "properties": {
          "configurationId": {
            "type": "string",
            "format": "uuid"
          },
          "configurationGlobalId": {
            "type": "integer",
            "format": "int64"
          },
          "autoTestIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "iterationId": {
            "type": "string",
            "format": "uuid"
          },
          "parameterModels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ParameterShortModel"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "PublicTestRunModel": {
        "required": [
          "autoTests",
          "configurations",
          "name",
          "status",
          "testPlanGlobalId",
          "testPoints",
          "testRunId"
        ],
        "type": "object",
        "properties": {
          "testRunId": {
            "type": "string",
            "format": "uuid"
          },
          "testPlanId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "testPlanGlobalId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "productName": {
            "type": "string",
            "nullable": true
          },
          "build": {
            "type": "string",
            "nullable": true
          },
          "configurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConfigurationModel"
            }
          },
          "autoTests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestModel"
            }
          },
          "testPoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PublicTestPointModel"
            }
          },
          "status": {
            "type": "string"
          },
          "customParameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "testRunDescription": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RequestTypeModel": {
        "enum": [
          "Post",
          "Put",
          "Delete"
        ],
        "type": "string"
      },
      "SearchAutoTestsQueryIncludesModel": {
        "required": [
          "includeLabels",
          "includeLinks",
          "includeSteps"
        ],
        "type": "object",
        "properties": {
          "includeSteps": {
            "type": "boolean",
            "description": "If autotest steps will be included"
          },
          "includeLinks": {
            "type": "boolean",
            "description": "If autotest links will be included"
          },
          "includeLabels": {
            "type": "boolean",
            "description": "If autotest labels will be included"
          }
        },
        "additionalProperties": false
      },
      "SearchCustomAttributeTemplateGetModel": {
        "required": [
          "customAttributeModels",
          "id",
          "isDeleted",
          "name",
          "projectShortestModels"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "name": {
            "type": "string"
          },
          "projectShortestModels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectShortestModel"
            }
          },
          "customAttributeModels": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomAttributeModel"
            }
          }
        },
        "additionalProperties": false
      },
      "SearchWebhooksQueryModel": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Specifies a webhook name to search for",
            "nullable": true
          },
          "eventTypes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebHookEventTypeModel"
            },
            "description": "Specifies a webhook event types to search for",
            "nullable": true
          },
          "methods": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestTypeModel"
            },
            "description": "Specifies a webhook methods to search for",
            "nullable": true
          },
          "projectIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a webhook project IDs to search for",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Specifies a webhook deleted status to search for",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SectionModel": {
        "required": [
          "createdById",
          "createdDate",
          "id",
          "isDeleted",
          "name"
        ],
        "type": "object",
        "properties": {
          "projectId": {
            "title": "Project unique identifier",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "parentId": {
            "title": "Parent section identifier",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "isDeleted": {
            "title": "Flag that defines if section is deleted",
            "type": "boolean",
            "example": true
          },
          "id": {
            "title": "Section unique internal identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "createdDate": {
            "title": "Date and time of section creation",
            "type": "string",
            "format": "date-time",
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "modifiedDate": {
            "title": "Date and time of last section modification",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "createdById": {
            "title": "Unique identifier of user who created section",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "modifiedById": {
            "title": "Unique identifier of user who applied last section modification",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "name": {
            "title": "Section name",
            "minLength": 1,
            "type": "string",
            "example": "Root section"
          }
        },
        "additionalProperties": false
      },
      "SectionMoveModel": {
        "required": [
          "id",
          "oldParentId",
          "parentId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the section",
            "format": "uuid"
          },
          "oldParentId": {
            "type": "string",
            "description": "Unique ID of the section's current parent section",
            "format": "uuid"
          },
          "parentId": {
            "type": "string",
            "description": "Unique ID of the section's target parent section",
            "format": "uuid"
          },
          "nextSectionId": {
            "type": "string",
            "description": "Unique ID of the section's following section",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SectionPostModel": {
        "required": [
          "attachments",
          "name",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "name": {
            "title": "Section unique internal identifier",
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "projectId": {
            "title": "Project unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "parentId": {
            "title": "Parent section identifier",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "preconditionSteps": {
            "title": "Section precondition steps collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepPostModel"
            },
            "nullable": true
          },
          "postconditionSteps": {
            "title": "Section postcondition steps collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepPostModel"
            },
            "nullable": true
          },
          "attachments": {
            "title": "Collection of section attachments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentPutModel"
            }
          }
        },
        "additionalProperties": false
      },
      "SectionPutModel": {
        "required": [
          "attachments",
          "id",
          "name",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "title": "Section unique internal identifier",
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "projectId": {
            "title": "Project unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "parentId": {
            "title": "Parent section identifier",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "preconditionSteps": {
            "title": "Section precondition steps collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepPutModel"
            },
            "nullable": true
          },
          "postconditionSteps": {
            "title": "Section postcondition steps collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepPutModel"
            },
            "nullable": true
          },
          "attachments": {
            "title": "Collection of section attachments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentPutModel"
            }
          }
        },
        "additionalProperties": false
      },
      "SectionRenameModel": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Section unique internal identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "name": {
            "title": "Section name",
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "example": "New root section"
          }
        },
        "additionalProperties": false
      },
      "SectionWithStepsModel": {
        "required": [
          "createdById",
          "createdDate",
          "id",
          "isDeleted",
          "name"
        ],
        "type": "object",
        "properties": {
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentModel"
            },
            "nullable": true
          },
          "preconditionSteps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepModel"
            },
            "nullable": true
          },
          "postconditionSteps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepModel"
            },
            "nullable": true
          },
          "projectId": {
            "title": "Project unique identifier",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "parentId": {
            "title": "Parent section identifier",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "isDeleted": {
            "title": "Flag that defines if section is deleted",
            "type": "boolean",
            "example": true
          },
          "id": {
            "title": "Section unique internal identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "createdDate": {
            "title": "Date and time of section creation",
            "type": "string",
            "format": "date-time",
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "modifiedDate": {
            "title": "Date and time of last section modification",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "createdById": {
            "title": "Unique identifier of user who created section",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "modifiedById": {
            "title": "Unique identifier of user who applied last section modification",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "name": {
            "title": "Section name",
            "minLength": 1,
            "type": "string",
            "example": "Root section"
          }
        },
        "additionalProperties": false
      },
      "SharedStepChangeViewModel": {
        "required": [
          "globalId",
          "id",
          "name",
          "steps"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "globalId": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "steps": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemStepChangeViewModel"
            }
          }
        },
        "additionalProperties": false
      },
      "SharedStepModel": {
        "required": [
          "globalId",
          "isDeleted",
          "name",
          "steps",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "versionId": {
            "title": "Shared step version identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "globalId": {
            "title": "Shared step global identifier",
            "type": "integer",
            "format": "int64",
            "example": 1000
          },
          "name": {
            "title": "Shared step name",
            "type": "string",
            "example": "First step"
          },
          "steps": {
            "title": "Nested steps collection. Property is set as deprecated for avoid recursive example generation in swagger UI",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepModel"
            },
            "deprecated": true
          },
          "isDeleted": {
            "title": "Flag that defines if shared step is archived",
            "type": "boolean",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "SharedStepReferenceModel": {
        "required": [
          "createdById",
          "entityTypeName",
          "globalId",
          "hasThisSharedStepAsPostcondition",
          "hasThisSharedStepAsPrecondition",
          "hasThisSharedStepAsStep",
          "id",
          "isAutomated",
          "isDeleted",
          "name",
          "priority",
          "sectionId",
          "state",
          "versionId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Workitem internal identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "globalId": {
            "title": "Workitem global identifier",
            "type": "integer",
            "format": "int64",
            "example": 1000
          },
          "name": {
            "title": "Workitem name",
            "type": "string",
            "example": "Basic template"
          },
          "entityTypeName": {
            "title": "Entity type name",
            "type": "string",
            "example": "TestCase"
          },
          "hasThisSharedStepAsStep": {
            "title": "Flag that defines if shared step in step",
            "type": "boolean",
            "example": true
          },
          "hasThisSharedStepAsPrecondition": {
            "title": "Flag that defines if shared step in Precondition",
            "type": "boolean",
            "example": true
          },
          "hasThisSharedStepAsPostcondition": {
            "title": "Flag that defines if shared step in Postcondition",
            "type": "boolean",
            "example": true
          },
          "createdById": {
            "title": "Unique identifier of user who created workitem",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "modifiedById": {
            "title": "Unique identifier of user who applied last workitem modification",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "createdDate": {
            "title": "Date and time of workitem creation",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "modifiedDate": {
            "title": "Date and time of last workitem modification",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "state": {
            "title": "WorkItem state",
            "type": "string",
            "example": "Ready"
          },
          "priority": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemPriorityModel"
              }
            ]
          },
          "isDeleted": {
            "title": "Flag that defines if workitem is archived",
            "type": "boolean",
            "example": true
          },
          "versionId": {
            "title": "Workitem version identifier",
            "type": "string",
            "description": "used for versioning changes in workitem",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "isAutomated": {
            "title": "Flag that workitem is automated",
            "type": "boolean",
            "example": true
          },
          "sectionId": {
            "title": "Workitems section identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "tags": {
            "title": "Collection of workitem tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SharedStepReferenceSectionModel": {
        "required": [
          "createdById",
          "hasThisSharedStepAsPostcondition",
          "hasThisSharedStepAsPrecondition",
          "id",
          "isDeleted",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Section internal identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "name": {
            "title": "Workitem name",
            "type": "string",
            "example": "Basic template"
          },
          "hasThisSharedStepAsPrecondition": {
            "title": "Flag that defines if shared step in Precondition",
            "type": "boolean",
            "example": true
          },
          "hasThisSharedStepAsPostcondition": {
            "title": "Flag that defines if shared step in Postcondition",
            "type": "boolean",
            "example": true
          },
          "createdById": {
            "title": "Unique identifier of user who created section",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "modifiedById": {
            "title": "Unique identifier of user who applied last section modification",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "createdDate": {
            "title": "Date and time of section creation",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "modifiedDate": {
            "title": "Date and time of last section modification",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "isDeleted": {
            "title": "Flag that defines if section is archived",
            "type": "boolean",
            "example": true
          }
        },
        "additionalProperties": false
      },
      "SharedStepReferenceSectionsQueryFilterModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of section",
            "nullable": true
          },
          "createdByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of users who created work item",
            "nullable": true
          },
          "modifiedByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of users who applied last modification to work item",
            "nullable": true
          },
          "createdDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Date and time of work item creation",
            "nullable": true
          },
          "modifiedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Date and time of work item last modification",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SharedStepReferencesQueryFilterModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of work item",
            "nullable": true
          },
          "globalIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Collection of global (integer) identifiers",
            "nullable": true
          },
          "sectionIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of section identifiers",
            "nullable": true
          },
          "createdByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of users who created work item",
            "nullable": true
          },
          "modifiedByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of users who applied last modification to work item",
            "nullable": true
          },
          "states": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemStates"
            },
            "description": "Collection of states of work item",
            "nullable": true
          },
          "priorities": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemPriorityModel"
            },
            "description": "Collection of priorities of work item",
            "nullable": true
          },
          "entityTypes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Collection of types of work item\r\n\nAllowed values: `TestCases`, `CheckLists`, `SharedSteps`",
            "nullable": true
          },
          "createdDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Date and time of work item creation",
            "nullable": true
          },
          "modifiedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Date and time of work item last modification",
            "nullable": true
          },
          "isAutomated": {
            "type": "boolean",
            "description": "Is result must consist of only manual/automated work items",
            "nullable": true
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Collection of tags",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SharedStepResultModel": {
        "required": [
          "outcome",
          "stepId"
        ],
        "type": "object",
        "properties": {
          "stepId": {
            "type": "string",
            "format": "uuid"
          },
          "outcome": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ShortConfiguration": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "StepCommentModel": {
        "required": [
          "createdById",
          "createdDate",
          "id",
          "stepId",
          "testResultId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Entity unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "text": {
            "type": "string",
            "nullable": true
          },
          "stepId": {
            "type": "string",
            "format": "uuid"
          },
          "parentStepId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentModel"
            },
            "nullable": true
          },
          "testResultId": {
            "type": "string",
            "format": "uuid"
          },
          "createdById": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedById": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StepModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "workItem": {
            "title": "Section shared step",
            "allOf": [
              {
                "$ref": "#/components/schemas/SharedStepModel"
              }
            ],
            "description": "Nested shared steps are allowed",
            "nullable": true
          },
          "id": {
            "title": "Step unique internal identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "action": {
            "title": "Action applied by user",
            "type": "string",
            "nullable": true,
            "example": "User press the button"
          },
          "expected": {
            "title": "Expected system reaction",
            "type": "string",
            "nullable": true,
            "example": "System makes a beeeep sound"
          },
          "testData": {
            "title": "Test data for step",
            "type": "string",
            "nullable": true,
            "example": "Some variables values"
          },
          "comments": {
            "title": "Comments for step",
            "type": "string",
            "nullable": true,
            "example": "Comment on what to look for"
          },
          "workItemId": {
            "title": "Unique identifier of workitem which relates to the step ",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          }
        },
        "additionalProperties": false
      },
      "StepPostModel": {
        "type": "object",
        "properties": {
          "action": {
            "title": "Action applied by user",
            "type": "string",
            "nullable": true,
            "example": "User press the button"
          },
          "expected": {
            "title": "Expected system reaction",
            "type": "string",
            "nullable": true,
            "example": "System makes a beeeep sound"
          },
          "testData": {
            "title": "Test data for step",
            "type": "string",
            "nullable": true,
            "example": "Some variables values"
          },
          "comments": {
            "title": "Comments for step",
            "type": "string",
            "nullable": true,
            "example": "Comment on what to look for"
          },
          "workItemId": {
            "title": "Unique identifier of workitem which relates to the step ",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          }
        },
        "additionalProperties": false
      },
      "StepPutModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Step unique internal identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "action": {
            "title": "Action applied by user",
            "type": "string",
            "nullable": true,
            "example": "User press the button"
          },
          "expected": {
            "title": "Expected system reaction",
            "type": "string",
            "nullable": true,
            "example": "System makes a beeeep sound"
          },
          "testData": {
            "title": "Test data for step",
            "type": "string",
            "nullable": true,
            "example": "Some variables values"
          },
          "comments": {
            "title": "Comments for step",
            "type": "string",
            "nullable": true,
            "example": "Comment on what to look for"
          },
          "workItemId": {
            "title": "Unique identifier of workitem which relates to the step ",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          }
        },
        "additionalProperties": false
      },
      "StepResultModel": {
        "required": [
          "outcome",
          "stepId"
        ],
        "type": "object",
        "properties": {
          "stepId": {
            "type": "string",
            "format": "uuid"
          },
          "outcome": {
            "type": "string"
          },
          "sharedStepVersionId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "sharedStepResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SharedStepResultModel"
            },
            "nullable": true
          },
          "comment": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StepCommentModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StringArrayChangedFieldViewModel": {
        "type": "object",
        "properties": {
          "oldValue": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "newValue": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StringChangedFieldViewModel": {
        "type": "object",
        "properties": {
          "oldValue": {
            "type": "string",
            "nullable": true
          },
          "newValue": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "StringChangedFieldWithDiffsViewModel": {
        "type": "object",
        "properties": {
          "diffValue": {
            "type": "string",
            "nullable": true
          },
          "oldValue": {
            "type": "string",
            "nullable": true
          },
          "newValue": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TagExtractionModel": {
        "type": "object",
        "properties": {
          "ids": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuidExtractionModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TagModel": {
        "required": [
          "createdById",
          "createdDate",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdById": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedById": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TagPostModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TagPutModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 30,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TagSelectModel": {
        "type": "object",
        "properties": {
          "filter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TagsFilterModel"
              }
            ],
            "nullable": true
          },
          "extractionModel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TagExtractionModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TagShortModel": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TagsFilterModel": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Specifies a tag name to search for",
            "nullable": true
          },
          "createdDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a tag range of creation date to search for",
            "nullable": true
          },
          "createdByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a tag creator IDs to search for",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestPlanChangeModel": {
        "required": [
          "createdById",
          "id",
          "testPlanChangedFields",
          "testPlanId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "testPlanId": {
            "type": "string",
            "format": "uuid"
          },
          "testPlanChangedFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestPlanChangedFieldsViewModel"
              }
            ]
          },
          "createdById": {
            "type": "string",
            "format": "uuid"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestPlanChangedFieldsViewModel": {
        "type": "object",
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringChangedFieldWithDiffsViewModel"
              }
            ],
            "nullable": true
          },
          "description": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringChangedFieldWithDiffsViewModel"
              }
            ],
            "nullable": true
          },
          "productName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringChangedFieldViewModel"
              }
            ],
            "nullable": true
          },
          "build": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringChangedFieldViewModel"
              }
            ],
            "nullable": true
          },
          "period": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PeriodViewModelChangedFieldViewModel"
              }
            ],
            "nullable": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringChangedFieldViewModel"
              }
            ],
            "nullable": true
          },
          "tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringArrayChangedFieldViewModel"
              }
            ],
            "nullable": true
          },
          "testSuite": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestSuiteChangeViewModelChangedFieldViewModel"
              }
            ],
            "nullable": true
          },
          "testPoints": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestPointChangeViewModelChangedFieldViewModel"
              }
            ],
            "nullable": true
          },
          "testResults": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestResultChangeViewModelChangedFieldViewModel"
              }
            ],
            "nullable": true
          },
          "locking": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BooleanChangedFieldViewModel"
              }
            ],
            "nullable": true
          },
          "hasAutomaticDurationTimer": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BooleanNullableChangedFieldViewModel"
              }
            ],
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/CustomAttributeChangeModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestPlanExtractionModel": {
        "type": "object",
        "properties": {
          "ids": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuidExtractionModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestPlanGroupByStatus": {
        "required": [
          "status",
          "value"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "value": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TestPlanGroupByTestSuite": {
        "required": [
          "testSuiteId",
          "testSuiteName",
          "value"
        ],
        "type": "object",
        "properties": {
          "testSuiteId": {
            "type": "string",
            "format": "uuid"
          },
          "testSuiteName": {
            "type": "string"
          },
          "value": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TestPlanGroupByTester": {
        "required": [
          "value"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "value": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TestPlanGroupByTesterAndStatus": {
        "required": [
          "status",
          "value"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "status": {
            "type": "string"
          },
          "value": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TestPlanLink": {
        "type": "object",
        "properties": {
          "bugLink": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LinkModel"
              }
            ],
            "nullable": true
          },
          "workItemGlobalId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "workItemName": {
            "type": "string",
            "nullable": true
          },
          "configurationName": {
            "type": "string",
            "nullable": true
          },
          "createdById": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "info": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExternalLinkModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestPlanModel": {
        "required": [
          "attributes",
          "createdById",
          "globalId",
          "id",
          "isDeleted",
          "name",
          "projectId",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "title": "Test plan status",
            "allOf": [
              {
                "$ref": "#/components/schemas/TestPlanStatusModel"
              }
            ]
          },
          "startedOn": {
            "title": "Date and time of test plan start",
            "type": "string",
            "description": "Set when test plan is starter (status changed to: In Progress)",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "completedOn": {
            "title": "Date and time of test plan end",
            "type": "string",
            "description": "set when test plan status is completed (status changed to: Completed)",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "createdDate": {
            "title": "Date and time of test plan creation",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "modifiedDate": {
            "title": "Date and time of last test plan modification",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "createdById": {
            "title": "Unique identifier of user who created test plan ",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "modifiedById": {
            "title": "Unique identifier of user who applied last test plan modification",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "globalId": {
            "title": "Test plan  unique global identifier",
            "type": "integer",
            "description": "Used for search Test plan",
            "format": "int64",
            "example": 100000
          },
          "isDeleted": {
            "title": "Boolean flag defines if test plan is archived",
            "type": "boolean",
            "example": true
          },
          "lockedDate": {
            "title": "Test plan lock date and time",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "id": {
            "title": "Test plan unique internal identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "lockedById": {
            "title": "User who locked test plan modification internal identifier",
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "tags": {
            "title": "Test plan tag names collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagPostModel"
            },
            "nullable": true
          },
          "name": {
            "title": "Test plan name",
            "maxLength": 450,
            "minLength": 0,
            "type": "string",
            "example": "Base test plan"
          },
          "startDate": {
            "title": "Date and time of test plan start",
            "type": "string",
            "description": "Used for analytics",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "endDate": {
            "title": "Date and time of test plan end",
            "type": "string",
            "description": "Used for analytics",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "description": {
            "title": "Test plan description",
            "maxLength": 100000,
            "minLength": 0,
            "type": "string",
            "nullable": true,
            "example": "This is a base test plan"
          },
          "build": {
            "title": "Build of the application on which test plan is executed",
            "maxLength": 450,
            "minLength": 0,
            "type": "string",
            "nullable": true,
            "example": "v.3.0.0-b94f3055"
          },
          "projectId": {
            "title": "Project unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "productName": {
            "title": "Name of the testing product",
            "maxLength": 450,
            "minLength": 0,
            "type": "string",
            "nullable": true,
            "example": "Billing service"
          },
          "hasAutomaticDurationTimer": {
            "title": "Boolean flag defines if test plan has automatic duration timer",
            "type": "boolean",
            "nullable": true,
            "example": true
          },
          "attributes": {
            "title": "Key value pair of test plan custom attributes",
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "TestPlanPostModel": {
        "required": [
          "attributes",
          "name",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "tags": {
            "title": "Test plan tag names collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagPostModel"
            },
            "nullable": true
          },
          "name": {
            "title": "Test plan name",
            "maxLength": 450,
            "minLength": 0,
            "type": "string",
            "example": "Base test plan"
          },
          "startDate": {
            "title": "Date and time of test plan start",
            "type": "string",
            "description": "Used for analytics",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "endDate": {
            "title": "Date and time of test plan end",
            "type": "string",
            "description": "Used for analytics",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "description": {
            "title": "Test plan description",
            "maxLength": 100000,
            "minLength": 0,
            "type": "string",
            "nullable": true,
            "example": "This is a base test plan"
          },
          "build": {
            "title": "Build of the application on which test plan is executed",
            "maxLength": 450,
            "minLength": 0,
            "type": "string",
            "nullable": true,
            "example": "v.3.0.0-b94f3055"
          },
          "projectId": {
            "title": "Project unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "productName": {
            "title": "Name of the testing product",
            "maxLength": 450,
            "minLength": 0,
            "type": "string",
            "nullable": true,
            "example": "Billing service"
          },
          "hasAutomaticDurationTimer": {
            "title": "Boolean flag defines if test plan has automatic duration timer",
            "type": "boolean",
            "nullable": true,
            "example": true
          },
          "attributes": {
            "title": "Key value pair of test plan custom attributes",
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "TestPlanPutModel": {
        "required": [
          "attributes",
          "id",
          "name",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Test plan unique internal identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "lockedById": {
            "title": "User who locked test plan modification internal identifier",
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "tags": {
            "title": "Test plan tag names collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagPostModel"
            },
            "nullable": true
          },
          "name": {
            "title": "Test plan name",
            "maxLength": 450,
            "minLength": 0,
            "type": "string",
            "example": "Base test plan"
          },
          "startDate": {
            "title": "Date and time of test plan start",
            "type": "string",
            "description": "Used for analytics",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "endDate": {
            "title": "Date and time of test plan end",
            "type": "string",
            "description": "Used for analytics",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "description": {
            "title": "Test plan description",
            "maxLength": 100000,
            "minLength": 0,
            "type": "string",
            "nullable": true,
            "example": "This is a base test plan"
          },
          "build": {
            "title": "Build of the application on which test plan is executed",
            "maxLength": 450,
            "minLength": 0,
            "type": "string",
            "nullable": true,
            "example": "v.3.0.0-b94f3055"
          },
          "projectId": {
            "title": "Project unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "productName": {
            "title": "Name of the testing product",
            "maxLength": 450,
            "minLength": 0,
            "type": "string",
            "nullable": true,
            "example": "Billing service"
          },
          "hasAutomaticDurationTimer": {
            "title": "Boolean flag defines if test plan has automatic duration timer",
            "type": "boolean",
            "nullable": true,
            "example": true
          },
          "attributes": {
            "title": "Key value pair of test plan custom attributes",
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "TestPlanSelectModel": {
        "required": [
          "filter"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectTestPlansFilterModel"
              }
            ]
          },
          "extractionModel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestPlanExtractionModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestPlanShortModel": {
        "required": [
          "id",
          "name",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "projectId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TestPlanStatusModel": {
        "enum": [
          "New",
          "InProgress",
          "Paused",
          "Completed"
        ],
        "type": "string"
      },
      "TestPlanWithAnalyticModel": {
        "required": [
          "analytic",
          "attributes",
          "createdById",
          "globalId",
          "id",
          "isDeleted",
          "name",
          "projectId",
          "status"
        ],
        "type": "object",
        "properties": {
          "analytic": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestPointAnalyticResult"
              }
            ]
          },
          "status": {
            "title": "Test plan status",
            "allOf": [
              {
                "$ref": "#/components/schemas/TestPlanStatusModel"
              }
            ]
          },
          "startedOn": {
            "title": "Date and time of test plan start",
            "type": "string",
            "description": "Set when test plan is starter (status changed to: In Progress)",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "completedOn": {
            "title": "Date and time of test plan end",
            "type": "string",
            "description": "set when test plan status is completed (status changed to: Completed)",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "createdDate": {
            "title": "Date and time of test plan creation",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "modifiedDate": {
            "title": "Date and time of last test plan modification",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "createdById": {
            "title": "Unique identifier of user who created test plan ",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "modifiedById": {
            "title": "Unique identifier of user who applied last test plan modification",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "globalId": {
            "title": "Test plan  unique global identifier",
            "type": "integer",
            "description": "Used for search Test plan",
            "format": "int64",
            "example": 100000
          },
          "isDeleted": {
            "title": "Boolean flag defines if test plan is archived",
            "type": "boolean",
            "example": true
          },
          "lockedDate": {
            "title": "Test plan lock date and time",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "id": {
            "title": "Test plan unique internal identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "lockedById": {
            "title": "User who locked test plan modification internal identifier",
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "tags": {
            "title": "Test plan tag names collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagPostModel"
            },
            "nullable": true
          },
          "name": {
            "title": "Test plan name",
            "maxLength": 450,
            "minLength": 0,
            "type": "string",
            "example": "Base test plan"
          },
          "startDate": {
            "title": "Date and time of test plan start",
            "type": "string",
            "description": "Used for analytics",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "endDate": {
            "title": "Date and time of test plan end",
            "type": "string",
            "description": "Used for analytics",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "description": {
            "title": "Test plan description",
            "maxLength": 100000,
            "minLength": 0,
            "type": "string",
            "nullable": true,
            "example": "This is a base test plan"
          },
          "build": {
            "title": "Build of the application on which test plan is executed",
            "maxLength": 450,
            "minLength": 0,
            "type": "string",
            "nullable": true,
            "example": "v.3.0.0-b94f3055"
          },
          "projectId": {
            "title": "Project unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "productName": {
            "title": "Name of the testing product",
            "maxLength": 450,
            "minLength": 0,
            "type": "string",
            "nullable": true,
            "example": "Billing service"
          },
          "hasAutomaticDurationTimer": {
            "title": "Boolean flag defines if test plan has automatic duration timer",
            "type": "boolean",
            "nullable": true,
            "example": true
          },
          "attributes": {
            "title": "Key value pair of test plan custom attributes",
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "TestPlanWithTestSuiteTreeModel": {
        "required": [
          "attributes",
          "createdById",
          "globalId",
          "id",
          "isDeleted",
          "name",
          "projectId",
          "status",
          "testSuites"
        ],
        "type": "object",
        "properties": {
          "testSuites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestSuiteWithChildrenModel"
            }
          },
          "status": {
            "title": "Test plan status",
            "allOf": [
              {
                "$ref": "#/components/schemas/TestPlanStatusModel"
              }
            ]
          },
          "startedOn": {
            "title": "Date and time of test plan start",
            "type": "string",
            "description": "Set when test plan is starter (status changed to: In Progress)",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "completedOn": {
            "title": "Date and time of test plan end",
            "type": "string",
            "description": "set when test plan status is completed (status changed to: Completed)",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "createdDate": {
            "title": "Date and time of test plan creation",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "modifiedDate": {
            "title": "Date and time of last test plan modification",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "createdById": {
            "title": "Unique identifier of user who created test plan ",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "modifiedById": {
            "title": "Unique identifier of user who applied last test plan modification",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "globalId": {
            "title": "Test plan  unique global identifier",
            "type": "integer",
            "description": "Used for search Test plan",
            "format": "int64",
            "example": 100000
          },
          "isDeleted": {
            "title": "Boolean flag defines if test plan is archived",
            "type": "boolean",
            "example": true
          },
          "lockedDate": {
            "title": "Test plan lock date and time",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "id": {
            "title": "Test plan unique internal identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "lockedById": {
            "title": "User who locked test plan modification internal identifier",
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "tags": {
            "title": "Test plan tag names collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagPostModel"
            },
            "nullable": true
          },
          "name": {
            "title": "Test plan name",
            "maxLength": 450,
            "minLength": 0,
            "type": "string",
            "example": "Base test plan"
          },
          "startDate": {
            "title": "Date and time of test plan start",
            "type": "string",
            "description": "Used for analytics",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "endDate": {
            "title": "Date and time of test plan end",
            "type": "string",
            "description": "Used for analytics",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "description": {
            "title": "Test plan description",
            "maxLength": 100000,
            "minLength": 0,
            "type": "string",
            "nullable": true,
            "example": "This is a base test plan"
          },
          "build": {
            "title": "Build of the application on which test plan is executed",
            "maxLength": 450,
            "minLength": 0,
            "type": "string",
            "nullable": true,
            "example": "v.3.0.0-b94f3055"
          },
          "projectId": {
            "title": "Project unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "productName": {
            "title": "Name of the testing product",
            "maxLength": 450,
            "minLength": 0,
            "type": "string",
            "nullable": true,
            "example": "Billing service"
          },
          "hasAutomaticDurationTimer": {
            "title": "Boolean flag defines if test plan has automatic duration timer",
            "type": "boolean",
            "nullable": true,
            "example": true
          },
          "attributes": {
            "title": "Key value pair of test plan custom attributes",
            "type": "object",
            "additionalProperties": {
              "nullable": true
            }
          }
        },
        "additionalProperties": false
      },
      "TestPointAnalyticResult": {
        "required": [
          "countGroupByStatus",
          "countGroupByTester",
          "countGroupByTesterAndStatus",
          "countGroupByTestSuite",
          "sumGroupByTester"
        ],
        "type": "object",
        "properties": {
          "countGroupByStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestPlanGroupByStatus"
            }
          },
          "sumGroupByTester": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestPlanGroupByTester"
            }
          },
          "countGroupByTester": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestPlanGroupByTester"
            }
          },
          "countGroupByTestSuite": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestPlanGroupByTestSuite"
            }
          },
          "countGroupByTesterAndStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestPlanGroupByTesterAndStatus"
            }
          }
        },
        "additionalProperties": false
      },
      "TestPointByTestSuiteModel": {
        "required": [
          "id",
          "iterationId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Test point unique internal identifier",
            "format": "uuid"
          },
          "testerId": {
            "type": "string",
            "description": "Tester who is responded for the test unique internal identifier",
            "format": "uuid",
            "nullable": true
          },
          "workItemId": {
            "type": "string",
            "description": "Workitem to which test point relates unique identifier",
            "format": "uuid",
            "nullable": true
          },
          "configurationId": {
            "type": "string",
            "description": "Configuration to which test point relates unique identifier",
            "format": "uuid",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Test point status\r\n\nApplies one of these values: Blocked, NoResults, Failed, Passed",
            "nullable": true,
            "example": "NoResult"
          },
          "lastTestResultId": {
            "type": "string",
            "description": "Last test result unique identifier",
            "format": "uuid",
            "nullable": true
          },
          "iterationId": {
            "type": "string",
            "description": "Iteration unique identifier",
            "format": "uuid"
          },
          "workItemMedianDuration": {
            "type": "integer",
            "description": "Median duration of work item the test point represents",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestPointChangeViewModel": {
        "required": [
          "testPointCount",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "testPointCount": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TestPointChangeViewModelChangedFieldViewModel": {
        "type": "object",
        "properties": {
          "oldValue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestPointChangeViewModel"
              }
            ],
            "nullable": true
          },
          "newValue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestPointChangeViewModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestPointFilterModel": {
        "type": "object",
        "properties": {
          "testPlanIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a test point test plan IDS to search for",
            "nullable": true
          },
          "testSuiteIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a test point test suite IDs to search for",
            "nullable": true
          },
          "workItemGlobalIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Specifies a test point work item global IDs to search for",
            "nullable": true
          },
          "workItemMedianDuration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int64RangeSelectorModel"
              }
            ],
            "description": "Specifies a test point work item median duration range to search for",
            "nullable": true
          },
          "workItemIsDeleted": {
            "type": "boolean",
            "description": "Specifies a test point work item is deleted flag to search for",
            "nullable": true
          },
          "statuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestPointStatus"
            },
            "description": "Specifies a test point statuses to search for",
            "nullable": true
          },
          "priorities": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemPriorityModel"
            },
            "description": "Specifies a test point priorities to search for",
            "nullable": true
          },
          "isAutomated": {
            "type": "boolean",
            "description": "Specifies a test point automation status to search for",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Specifies a test point name to search for",
            "nullable": true
          },
          "configurationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a test point configuration IDs to search for",
            "nullable": true
          },
          "testerIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a test point assigned user IDs to search for",
            "nullable": true
          },
          "duration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int64RangeSelectorModel"
              }
            ],
            "description": "Specifies a test point range of duration to search for",
            "nullable": true
          },
          "sectionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a test point work item section IDs to search for",
            "nullable": true
          },
          "createdDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a test point range of creation date to search for",
            "nullable": true
          },
          "createdByIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a test point creator IDs to search for",
            "nullable": true
          },
          "modifiedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a test point range of last modification date to search for",
            "nullable": true
          },
          "modifiedByIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a test point last editor IDs to search for",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specifies a test point tags to search for",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "description": "Specifies a test point attributes to search for",
            "nullable": true
          },
          "workItemCreatedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a work item range of creation date to search for",
            "nullable": true
          },
          "workItemCreatedByIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a work item creator IDs to search for",
            "nullable": true
          },
          "workItemModifiedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a work item range of last modification date to search for",
            "nullable": true
          },
          "workItemModifiedByIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a work item last editor IDs to search for",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestPointPutModel": {
        "required": [
          "id",
          "isDeleted",
          "iterationId",
          "testSuiteId"
        ],
        "type": "object",
        "properties": {
          "testerId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "iterationId": {
            "type": "string",
            "format": "uuid"
          },
          "workItemId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "configurationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "testSuiteId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "lastTestResultId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the entity",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the entity is deleted"
          }
        },
        "additionalProperties": false
      },
      "TestPointResultModel": {
        "type": "object",
        "properties": {
          "testPointId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "aggregatedOutcome": {
            "type": "string",
            "nullable": true
          },
          "workItemGlobalId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "workItemName": {
            "type": "string",
            "nullable": true
          },
          "configurationName": {
            "type": "string",
            "nullable": true
          },
          "testResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestResultShortModel"
            },
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestPointSelectModel": {
        "type": "object",
        "properties": {
          "filter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestPointFilterModel"
              }
            ],
            "nullable": true
          },
          "extractionModel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestPointsExtractionModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestPointSelector": {
        "required": [
          "configurationId",
          "workItemIds"
        ],
        "type": "object",
        "properties": {
          "configurationId": {
            "type": "string",
            "description": "Specifies the configuration GUIDs, from which test points are created. You can specify several GUIDs.",
            "format": "uuid"
          },
          "workItemIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies the work item GUIDs, from which test points are created. You can specify several GUIDs."
          }
        },
        "additionalProperties": false
      },
      "TestPointShortGetModel": {
        "required": [
          "attributes",
          "configurationId",
          "createdById",
          "createdDate",
          "duration",
          "id",
          "isAutomated",
          "iterationId",
          "lastTestResult",
          "links",
          "name",
          "priority",
          "projectId",
          "sectionId",
          "status",
          "tags",
          "testSuiteId",
          "testSuiteName",
          "workItemCreatedById",
          "workItemCreatedDate",
          "workItemGlobalId",
          "workItemId",
          "workItemState",
          "workItemVersionId",
          "workItemVersionNumber"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the test point",
            "format": "uuid"
          },
          "createdDate": {
            "type": "string",
            "description": "Creation date of the test point",
            "format": "date-time"
          },
          "createdById": {
            "type": "string",
            "description": "Unique ID of the test point creator",
            "format": "uuid"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Last modification date of the test point",
            "format": "date-time",
            "nullable": true
          },
          "modifiedById": {
            "type": "string",
            "description": "Unique ID of the test point last editor",
            "format": "uuid",
            "nullable": true
          },
          "testerId": {
            "type": "string",
            "description": "Unique ID of the test point assigned user",
            "format": "uuid",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Collection of the test point parameters",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": { },
            "description": "Collection of attributes of work item the test point represents"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Collection of the test point tags"
          },
          "links": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Collection of the test point links"
          },
          "testSuiteId": {
            "type": "string",
            "description": "Unique ID of test suite the test point assigned to",
            "format": "uuid"
          },
          "testSuiteName": {
            "type": "string",
            "description": "Name of the test suite"
          },
          "workItemId": {
            "type": "string",
            "description": "Unique ID of work item the test point represents",
            "format": "uuid"
          },
          "workItemGlobalId": {
            "type": "integer",
            "description": "Global ID of work item the test point represents",
            "format": "int64"
          },
          "workItemVersionId": {
            "type": "string",
            "description": "Unique ID of work item version the test point represents",
            "format": "uuid"
          },
          "workItemVersionNumber": {
            "type": "integer",
            "description": "Number of work item version the test point represents",
            "format": "int32"
          },
          "workItemMedianDuration": {
            "type": "integer",
            "description": "Median duration of work item the test point represents",
            "format": "int64",
            "nullable": true
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestPointStatus"
              }
            ],
            "description": "Status of the test point"
          },
          "priority": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemPriorityModel"
              }
            ],
            "description": "Priority of the test point"
          },
          "isAutomated": {
            "type": "boolean",
            "description": "Indicates if the test point represents an autotest"
          },
          "name": {
            "type": "string",
            "description": "Name of the test point"
          },
          "configurationId": {
            "type": "string",
            "description": "Unique ID of the test point configuration",
            "format": "uuid"
          },
          "duration": {
            "type": "integer",
            "description": "Duration of the test point",
            "format": "int32"
          },
          "sectionId": {
            "type": "string",
            "description": "Unique ID of section where work item the test point represents is located",
            "format": "uuid"
          },
          "sectionName": {
            "type": "string",
            "description": "Name of section where work item the test point represents is located",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "description": "Unique ID of the test point project",
            "format": "uuid"
          },
          "lastTestResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LastTestResultModel"
              }
            ],
            "description": "Model of the test point last test result"
          },
          "iterationId": {
            "type": "string",
            "description": "Unique ID of work item iteration the test point represents",
            "format": "uuid"
          },
          "workItemState": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemState"
              }
            ],
            "description": "Work item state"
          },
          "workItemCreatedById": {
            "type": "string",
            "description": "Unique ID of the work item creator",
            "format": "uuid"
          },
          "workItemCreatedDate": {
            "type": "string",
            "description": "Creation date of work item",
            "format": "date-time"
          },
          "workItemModifiedById": {
            "type": "string",
            "description": "Unique ID of the work item last editor",
            "format": "uuid",
            "nullable": true
          },
          "workItemModifiedDate": {
            "type": "string",
            "description": "Modified date of work item",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestPointShortModel": {
        "required": [
          "id",
          "iterationId",
          "testSuiteId"
        ],
        "type": "object",
        "properties": {
          "testSuiteId": {
            "title": "Test suite to which test point relates unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "id": {
            "type": "string",
            "description": "Test point unique internal identifier",
            "format": "uuid"
          },
          "testerId": {
            "type": "string",
            "description": "Tester who is responded for the test unique internal identifier",
            "format": "uuid",
            "nullable": true
          },
          "workItemId": {
            "type": "string",
            "description": "Workitem to which test point relates unique identifier",
            "format": "uuid",
            "nullable": true
          },
          "configurationId": {
            "type": "string",
            "description": "Configuration to which test point relates unique identifier",
            "format": "uuid",
            "nullable": true
          },
          "status": {
            "type": "string",
            "description": "Test point status\r\n\nApplies one of these values: Blocked, NoResults, Failed, Passed",
            "nullable": true,
            "example": "NoResult"
          },
          "lastTestResultId": {
            "type": "string",
            "description": "Last test result unique identifier",
            "format": "uuid",
            "nullable": true
          },
          "iterationId": {
            "type": "string",
            "description": "Iteration unique identifier",
            "format": "uuid"
          },
          "workItemMedianDuration": {
            "type": "integer",
            "description": "Median duration of work item the test point represents",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestPointStatus": {
        "enum": [
          "InProgress",
          "Passed",
          "Failed",
          "Skipped",
          "Blocked",
          "NoResults"
        ],
        "type": "string"
      },
      "TestPointWithLastResultModel": {
        "required": [
          "createdById",
          "duration",
          "id",
          "isAutomated",
          "priority",
          "sectionId",
          "testSuiteId",
          "workItemId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "workItemName": {
            "type": "string",
            "nullable": true
          },
          "isAutomated": {
            "type": "boolean"
          },
          "testerId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "workItemId": {
            "type": "string",
            "format": "uuid"
          },
          "configurationId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "testSuiteId": {
            "type": "string",
            "format": "uuid"
          },
          "lastTestResult": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LastTestResultModel"
              }
            ],
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "workItemGlobalId": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "workItemEntityTypeName": {
            "type": "string",
            "nullable": true
          },
          "sectionId": {
            "type": "string",
            "format": "uuid"
          },
          "sectionName": {
            "type": "string",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdById": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedById": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true
          },
          "tagNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "format": "int32"
          },
          "priority": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemPriorityModel"
              }
            ]
          },
          "testSuiteNameBreadCrumbs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "groupCount": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "iteration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/IterationModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestPointsExtractionModel": {
        "type": "object",
        "properties": {
          "ids": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuidExtractionModel"
              }
            ],
            "description": "Extraction parameters for test points",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestResultChangeViewModel": {
        "required": [
          "testPointCount"
        ],
        "type": "object",
        "properties": {
          "testPointCount": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TestResultChangeViewModelChangedFieldViewModel": {
        "type": "object",
        "properties": {
          "oldValue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestResultChangeViewModel"
              }
            ],
            "nullable": true
          },
          "newValue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestResultChangeViewModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestResultChronologyModel": {
        "required": [
          "count"
        ],
        "type": "object",
        "properties": {
          "outcome": {
            "title": "Test result outcome",
            "type": "string",
            "nullable": true,
            "example": "Passed"
          },
          "count": {
            "title": "Count of test results with the same Outcome",
            "type": "integer",
            "format": "int32",
            "example": 2.5555
          }
        },
        "additionalProperties": false
      },
      "TestResultHistoryReportModel": {
        "required": [
          "createdById",
          "createdDate",
          "failureClassIds",
          "id",
          "isAutomated",
          "modifiedDate",
          "userId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Internal test result identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "createdDate": {
            "title": "Test result creation date",
            "type": "string",
            "format": "date-time",
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "modifiedDate": {
            "title": "Test result last modification date",
            "type": "string",
            "format": "date-time",
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "userId": {
            "title": "Internal identifier of user who stopped test run related to the test result or user who created the test result",
            "type": "string",
            "description": "If test run was stopped, this property equals identifier of user who stopped it.Otherwise, the property equals identifier of user who created the test result",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "testRunId": {
            "title": "Identifier of test run related to the test result",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "testRunName": {
            "title": "Name of test run related to the test result",
            "type": "string",
            "nullable": true,
            "example": "Core tests"
          },
          "createdByUserName": {
            "title": "Username of user who created test run",
            "type": "string",
            "nullable": true,
            "example": "example"
          },
          "testPlanId": {
            "title": "Internal identifier of test plan related to the test result's test run",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "testPlanGlobalId": {
            "title": "Global identifier of test plan related to the test result's test run",
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 100000
          },
          "testPlanName": {
            "title": "Name of test plan related to the test result's test run",
            "type": "string",
            "nullable": true,
            "example": "Release 7.13"
          },
          "configurationName": {
            "title": "Configuration name of test point related to the test result or from test result itself",
            "type": "string",
            "description": "If test point related to the test result has configuration, this property will be equal to the test point configuration name. Otherwise, this property will be equal to the test result configuration name",
            "nullable": true,
            "example": "Default"
          },
          "isAutomated": {
            "title": "Boolean flag defines if test point related to the test result is automated or not",
            "type": "boolean",
            "example": true
          },
          "outcome": {
            "title": "Outcome from test result with max modified date or from first created test result.Property can contain one of these values: Passed, Failed, InProgress, Blocked, Skipped",
            "type": "string",
            "description": "If any test result related to the test run is linked with autotest and the run has an outcome, the outcome value equalsto the worst outcome of the last modified test result.Otherwise, the outcome equals to the outcome of first created test result in the test run",
            "nullable": true,
            "example": "Failed"
          },
          "comment": {
            "title": "Test result comment",
            "type": "string",
            "description": "If any test result related to the test run is linked with autotest, comment will have default valueOtherwise, the comment equals to the comment of first created test result in the test run",
            "nullable": true,
            "example": "my first comment"
          },
          "links": {
            "title": "Test result links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkModel"
            },
            "description": "If any test result related to the test run is linked with autotest, link will be equal to the links of last modified test result.Otherwise, the links equals to the links of first created test result in the test run",
            "nullable": true
          },
          "startedOn": {
            "title": "Start date time from test result or from test run (if test run new state is Running or Completed state)",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "completedOn": {
            "title": "End date time from test result or from test run (if test run new state is In progress, Stopped or Completed)",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "duration": {
            "title": "Duration of first created test result in the test run",
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "example": 100000
          },
          "createdById": {
            "title": "Unique identifier of user who created first test result in the test run",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "modifiedById": {
            "title": "Unique identifier of user who applied last modification of first test result in the test run",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "attachments": {
            "title": "Attachments related to the test result",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentModel"
            },
            "description": "If any test result related to the test run is linked with autotest, attachments will be equal to the attachments of last modified test result.Otherwise, the attachments equals to the attachments of first created test result in the test run",
            "nullable": true
          },
          "workItemVersionId": {
            "title": "Unique identifier of workitem version related to the first test result in the test run",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "workItemVersionNumber": {
            "title": "Number of workitem version related to the first test result in the test run",
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "launchSource": {
            "type": "string",
            "nullable": true
          },
          "failureClassIds": {
            "title": "Unique identifier of failure classes related to the first test result in the test run",
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "parameters": {
            "title": "Parameters of test result",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestResultModel": {
        "required": [
          "configurationId",
          "createdById",
          "createdDate",
          "failureClassIds",
          "id",
          "testPointId",
          "testRunId",
          "workItemVersionId"
        ],
        "type": "object",
        "properties": {
          "autoTestId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "configurationId": {
            "type": "string",
            "format": "uuid"
          },
          "startedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "completedOn": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "durationInMs": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "traces": {
            "type": "string",
            "nullable": true
          },
          "failureType": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "runByUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "stoppedByUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "testPointId": {
            "type": "string",
            "format": "uuid"
          },
          "testRunId": {
            "type": "string",
            "format": "uuid"
          },
          "testPoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestPointPutModel"
              }
            ],
            "nullable": true
          },
          "autoTest": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AutoTestModel"
              }
            ],
            "nullable": true
          },
          "autoTestStepResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentModelAutoTestStepResultsModel"
            },
            "nullable": true
          },
          "setupResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentModelAutoTestStepResultsModel"
            },
            "nullable": true
          },
          "teardownResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentModelAutoTestStepResultsModel"
            },
            "nullable": true
          },
          "workItemVersionId": {
            "type": "string",
            "format": "uuid"
          },
          "workItemVersionNumber": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "parameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdById": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedById": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "stepComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepCommentModel"
            },
            "nullable": true
          },
          "failureClassIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "outcome": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestResultOutcome"
              }
            ],
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkModel"
            },
            "nullable": true
          },
          "stepResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepResultModel"
            },
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestResultOutcome": {
        "enum": [
          "InProgress",
          "Passed",
          "Failed",
          "Skipped",
          "Blocked"
        ],
        "type": "string"
      },
      "TestResultShortGetModel": {
        "required": [
          "attachments",
          "autotestGlobalId",
          "configurationId",
          "configurationName",
          "createdDate",
          "date",
          "id",
          "links",
          "name",
          "outcome",
          "resultReasons",
          "testRunId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the test result",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of autotest represented by the test result"
          },
          "autotestGlobalId": {
            "type": "integer",
            "description": "Global ID of autotest represented by the test result",
            "format": "int64"
          },
          "testRunId": {
            "type": "string",
            "description": "Unique ID of test run where the test result is located",
            "format": "uuid"
          },
          "configurationId": {
            "type": "string",
            "description": "Unique ID of configuration which the test result uses",
            "format": "uuid"
          },
          "configurationName": {
            "type": "string",
            "description": "Name of configuration which the test result uses"
          },
          "outcome": {
            "type": "string",
            "description": "Outcome of the test result"
          },
          "resultReasons": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutotestResultReasonSubGetModel"
            },
            "description": "Collection of result reasons which the test result have"
          },
          "comment": {
            "type": "string",
            "description": "Comment to the test result",
            "nullable": true
          },
          "date": {
            "type": "string",
            "description": "Date when the test result was completed or started or created",
            "format": "date-time",
            "deprecated": true
          },
          "createdDate": {
            "type": "string",
            "description": "Date when the test result has been created",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Date when the test result has been modified",
            "format": "date-time",
            "nullable": true
          },
          "startedOn": {
            "type": "string",
            "description": "Date when the test result has been started",
            "format": "date-time",
            "nullable": true
          },
          "completedOn": {
            "type": "string",
            "description": "Date when the test result has been completed",
            "format": "date-time",
            "nullable": true
          },
          "duration": {
            "type": "integer",
            "description": "Time which it took to run the test",
            "format": "int64",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkSubGetModel"
            },
            "description": "Collection of links attached to the test result"
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentModel"
            },
            "description": "Collection of files attached to the test result"
          }
        },
        "additionalProperties": false
      },
      "TestResultShortModel": {
        "required": [
          "failureType",
          "id",
          "outcome"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "outcome": {
            "type": "string"
          },
          "traces": {
            "type": "string",
            "nullable": true
          },
          "failureType": {
            "type": "string"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "testPoint": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestPointPutModel"
              }
            ],
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "autoTest": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AutoTestShortModel"
              }
            ],
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestResultStepCommentPutModel": {
        "required": [
          "attachments",
          "id",
          "stepId",
          "text"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Entity unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "text": {
            "type": "string"
          },
          "stepId": {
            "type": "string",
            "format": "uuid"
          },
          "parentStepId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentPutModel"
            }
          }
        },
        "additionalProperties": false
      },
      "TestResultUpdateModel": {
        "type": "object",
        "properties": {
          "failureClassIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "outcome": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestResultOutcome"
              }
            ],
            "nullable": true
          },
          "comment": {
            "type": "string",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkModel"
            },
            "nullable": true
          },
          "stepResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepResultModel"
            },
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentPutModel"
            },
            "nullable": true
          },
          "durationInMs": {
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "nullable": true,
            "deprecated": true
          },
          "duration": {
            "minimum": 0,
            "type": "integer",
            "format": "int64",
            "nullable": true
          },
          "stepComments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestResultStepCommentPutModel"
            },
            "nullable": true
          },
          "setupResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentPutModelAutoTestStepResultsModel"
            },
            "nullable": true
          },
          "teardownResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentPutModelAutoTestStepResultsModel"
            },
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "trace": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestResultV2GetModel": {
        "required": [
          "configurationId",
          "id",
          "outcome",
          "testRunId",
          "workItemVersionId"
        ],
        "type": "object",
        "properties": {
          "configuration": {
            "title": "Test result configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/ConfigurationModel"
              }
            ],
            "nullable": true
          },
          "autoTest": {
            "title": "auto test related to test result",
            "allOf": [
              {
                "$ref": "#/components/schemas/AutoTestModelV2GetModel"
              }
            ],
            "nullable": true
          },
          "id": {
            "title": "Test result unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "configurationId": {
            "title": "Configuration related to test result unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "workItemVersionId": {
            "title": "Workitem version related to test result unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "autoTestId": {
            "title": "Auto test related to test result unique identifier",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "message": {
            "title": "Auto test message",
            "type": "string",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "traces": {
            "title": "Test result trace",
            "type": "string",
            "nullable": true,
            "example": "Exception in thread main java.lang.NullPointerException at com.example.myproject.MyTest.HealtCheck()"
          },
          "startedOn": {
            "title": "Start date time from test result or from test run (if test run new state is Running or Completed state)",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "completedOn": {
            "title": "End date time from test result or from test run (if test run new state is In progress, Stopped or Completed)",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "runByUserId": {
            "title": "Unique identifier of user which run test result",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "stoppedByUserId": {
            "title": "Unique identifier of user which stopped test result",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "testPointId": {
            "title": "Test point related to test result unique identifier",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "testPoint": {
            "title": "Test point related to test result",
            "allOf": [
              {
                "$ref": "#/components/schemas/TestPointShortModel"
              }
            ],
            "nullable": true
          },
          "testRunId": {
            "title": "Test run to which test result relates unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "outcome": {
            "title": "Test result outcome",
            "type": "string",
            "description": "Property can contain one of these values: Passed, Failed, InProgress, Blocked, Skipped",
            "example": "Passed"
          },
          "comment": {
            "title": "Test result comment",
            "type": "string",
            "nullable": true,
            "example": "my first comment"
          },
          "links": {
            "title": "Test result links collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkModel"
            },
            "nullable": true
          },
          "attachments": {
            "title": "Test result attachments collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentModel"
            },
            "nullable": true
          },
          "parameters": {
            "title": "Test result custom parameters",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "properties": {
            "title": "Test result custom properties",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestResultV2ShortModel": {
        "required": [
          "configurationId",
          "id",
          "outcome",
          "testRunId",
          "workItemVersionId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Test result unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "configurationId": {
            "title": "Configuration related to test result unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "workItemVersionId": {
            "title": "Workitem version related to test result unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "autoTestId": {
            "title": "Auto test related to test result unique identifier",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "message": {
            "title": "Auto test message",
            "type": "string",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "traces": {
            "title": "Test result trace",
            "type": "string",
            "nullable": true,
            "example": "Exception in thread main java.lang.NullPointerException at com.example.myproject.MyTest.HealtCheck()"
          },
          "startedOn": {
            "title": "Start date time from test result or from test run (if test run new state is Running or Completed state)",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "completedOn": {
            "title": "End date time from test result or from test run (if test run new state is In progress, Stopped or Completed)",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "runByUserId": {
            "title": "Unique identifier of user which run test result",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "stoppedByUserId": {
            "title": "Unique identifier of user which stopped test result",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "testPointId": {
            "title": "Test point related to test result unique identifier",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "testPoint": {
            "title": "Test point related to test result",
            "allOf": [
              {
                "$ref": "#/components/schemas/TestPointShortModel"
              }
            ],
            "nullable": true
          },
          "testRunId": {
            "title": "Test run to which test result relates unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "outcome": {
            "title": "Test result outcome",
            "type": "string",
            "description": "Property can contain one of these values: Passed, Failed, InProgress, Blocked, Skipped",
            "example": "Passed"
          },
          "comment": {
            "title": "Test result comment",
            "type": "string",
            "nullable": true,
            "example": "my first comment"
          },
          "links": {
            "title": "Test result links collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkModel"
            },
            "nullable": true
          },
          "attachments": {
            "title": "Test result attachments collection",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentModel"
            },
            "nullable": true
          },
          "parameters": {
            "title": "Test result custom parameters",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "properties": {
            "title": "Test result custom properties",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestResultsFilterModel": {
        "type": "object",
        "properties": {
          "testRunIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a test result test run IDs to search for",
            "nullable": true
          },
          "autoTestGlobalIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Specifies an autotest global IDs to search results for",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Specifies an autotest name to search results for",
            "nullable": true
          },
          "createdDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a test result creation date and time range to search for",
            "nullable": true
          },
          "modifiedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a test result modified date and time range to search for",
            "nullable": true
          },
          "startedOn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a test result started on date and time range to search for",
            "nullable": true
          },
          "completedOn": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a test result completed on date and time range to search for",
            "nullable": true
          },
          "duration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int64RangeSelectorModel"
              }
            ],
            "description": "Specifies a test result duration range to search for",
            "nullable": true
          },
          "resultReasons": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specifies result reasons for searching test results",
            "nullable": true
          },
          "configurationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a test result configuration IDs to search for",
            "nullable": true
          },
          "outcomes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestResultOutcome"
            },
            "description": "Specifies a test result outcomes to search for",
            "nullable": true
          },
          "failureCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FailureCategoryModel"
            },
            "description": "Specifies a test result failure categories to search for",
            "nullable": true
          },
          "namespace": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Specifies a test result namespace to search for",
            "nullable": true
          },
          "className": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Specifies a test result class name to search for",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestResultsLocalFilterModel": {
        "type": "object",
        "properties": {
          "configurationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a test result configuration IDs to search for",
            "nullable": true
          },
          "outcomes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestResultOutcome"
            },
            "description": "Specifies a test result outcomes to search for",
            "nullable": true
          },
          "failureCategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FailureCategoryModel"
            },
            "description": "Specifies a test result failure categories to search for",
            "nullable": true
          },
          "namespace": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Specifies a test result namespace to search for",
            "nullable": true
          },
          "className": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Specifies a test result class name to search for",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestResultsStatisticsGetModel": {
        "required": [
          "failureCategories",
          "statuses"
        ],
        "type": "object",
        "properties": {
          "statuses": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestRunStatisticsStatusesGetModel"
              }
            ],
            "description": "Test results counts aggregated by outcome",
            "readOnly": true
          },
          "failureCategories": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestRunStatisticsErrorCategoriesGetModel"
              }
            ],
            "description": "Test results counts aggregated by result failure categories",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "TestRunAnalyticResultModel": {
        "type": "object",
        "properties": {
          "countGroupByStatus": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestRunGroupByStatusModel"
            },
            "nullable": true
          },
          "countGroupByFailureClass": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestRunGroupByFailureClassModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestRunExtractionModel": {
        "type": "object",
        "properties": {
          "ids": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuidExtractionModel"
              }
            ],
            "description": "Extraction parameters for test runs",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Rules for different level entities inclusion/exclusion"
      },
      "TestRunFillByAutoTestsPostModel": {
        "required": [
          "autoTestExternalIds",
          "configurationIds",
          "projectId"
        ],
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Specifies the GUID of the project, in which a test run will be created.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Specifies the name of the test run.",
            "nullable": true
          },
          "configurationIds": {
            "minItems": 1,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies the configuration GUIDs, from which test points are created. You can specify several GUIDs."
          },
          "autoTestExternalIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specifies the external ID of the autotest. You can specify several IDs."
          },
          "description": {
            "type": "string",
            "description": "Specifies the test run description.",
            "nullable": true
          },
          "launchSource": {
            "type": "string",
            "description": "Specifies the test run launch source.",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentPutModel"
            },
            "description": "Collection of attachment ids to relate to the test run",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkPostModel"
            },
            "description": "Collection of links to relate to the test run",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestRunFillByConfigurationsPostModel": {
        "required": [
          "projectId",
          "testPlanId",
          "testPointSelectors"
        ],
        "type": "object",
        "properties": {
          "testPointSelectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestPointSelector"
            },
            "description": "Specifies an array of work items and configuration to create a test run for."
          },
          "projectId": {
            "type": "string",
            "description": "Specifies the GUID of the project, in which a test run will be created.",
            "format": "uuid"
          },
          "testPlanId": {
            "type": "string",
            "description": "Specifies the GUID of the test plan, within which the test run will be created.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Specifies the name of the test run.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Specifies the test run description.",
            "nullable": true
          },
          "launchSource": {
            "type": "string",
            "description": "Specifies the test run launch source.",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentPutModel"
            },
            "description": "Collection of attachment ids to relate to the test run",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkPostModel"
            },
            "description": "Collection of links to relate to the test run",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestRunFillByWorkItemsPostModel": {
        "required": [
          "configurationIds",
          "projectId",
          "testPlanId",
          "workItemIds"
        ],
        "type": "object",
        "properties": {
          "configurationIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies the configuration GUIDs, from which test points are created. You can specify several GUIDs."
          },
          "workItemIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies the work item GUIDs, from which test points are created. You can specify several GUIDs."
          },
          "projectId": {
            "type": "string",
            "description": "Specifies the GUID of the project, in which a test run will be created.",
            "format": "uuid"
          },
          "testPlanId": {
            "type": "string",
            "description": "Specifies the GUID of the test plan, within which the test run will be created.",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Specifies the name of the test run.",
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Specifies the test run description.",
            "nullable": true
          },
          "launchSource": {
            "type": "string",
            "description": "Specifies the test run launch source.",
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentPutModel"
            },
            "description": "Collection of attachment ids to relate to the test run",
            "nullable": true
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkPostModel"
            },
            "description": "Collection of links to relate to the test run",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestRunFilterModel": {
        "type": "object",
        "properties": {
          "projectIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a test run project IDs to search for",
            "nullable": true
          },
          "name": {
            "type": "string",
            "description": "Specifies test run name",
            "nullable": true
          },
          "states": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestRunState"
            },
            "description": "Specifies a test run states to search for",
            "nullable": true
          },
          "createdDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a test run range of created date to search for",
            "nullable": true
          },
          "startedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a test run range of started date to search for",
            "nullable": true
          },
          "createdByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a test run creator IDs to search for",
            "nullable": true
          },
          "modifiedByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a test run last editor IDs to search for",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Specifies a test run deleted status to search for",
            "nullable": true
          },
          "autoTestsCount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int32RangeSelectorModel"
              }
            ],
            "description": "Number of autoTests run in the test run",
            "nullable": true
          },
          "testResultsOutcome": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestResultOutcome"
            },
            "description": "Specifies test results outcomes",
            "nullable": true
          },
          "failureCategory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FailureCategoryModel"
            },
            "description": "Specifies failure categories",
            "nullable": true
          },
          "completedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a test run range of completed date to search for",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestRunGroupByFailureClassModel": {
        "required": [
          "failureCategory",
          "value"
        ],
        "type": "object",
        "properties": {
          "failureCategory": {
            "type": "string"
          },
          "value": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TestRunGroupByStatusModel": {
        "required": [
          "status",
          "value"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "value": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TestRunModel": {
        "required": [
          "analytic",
          "autoTestsCount",
          "build",
          "createdById",
          "createdDate",
          "description",
          "id",
          "isAutomated",
          "isDeleted",
          "launchSource",
          "name",
          "projectId",
          "stateName"
        ],
        "type": "object",
        "properties": {
          "autoTests": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestModel"
            },
            "nullable": true
          },
          "autoTestsCount": {
            "type": "integer",
            "format": "int32"
          },
          "testSuiteIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "isAutomated": {
            "type": "boolean"
          },
          "analytic": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestRunAnalyticResultModel"
              }
            ]
          },
          "testResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestResultModel"
            },
            "nullable": true
          },
          "testPlan": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestPlanModel"
              }
            ],
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdById": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedById": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "createdByUserName": {
            "type": "string",
            "nullable": true
          },
          "startedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "completedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "build": {
            "maxLength": 450,
            "minLength": 0,
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "stateName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestRunState"
              }
            ]
          },
          "projectId": {
            "type": "string",
            "format": "uuid"
          },
          "testPlanId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "runByUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "stoppedByUserId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "type": "string"
          },
          "launchSource": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the entity",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the entity is deleted"
          }
        },
        "additionalProperties": false
      },
      "TestRunSearchQueryModel": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "states": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestRunState"
            },
            "nullable": true
          },
          "startedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "nullable": true
          },
          "completedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "nullable": true
          },
          "createdByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          },
          "modifiedByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestRunSelectModel": {
        "required": [
          "extractionModel",
          "filter"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestRunFilterModel"
              }
            ]
          },
          "extractionModel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestRunExtractionModel"
              }
            ],
            "description": "Rules for different level entities inclusion/exclusion"
          }
        },
        "additionalProperties": false,
        "description": "Model containing options to filter test runs"
      },
      "TestRunShortGetModel": {
        "required": [
          "autoTestsCount",
          "createdById",
          "createdDate",
          "id",
          "isDeleted",
          "name",
          "state",
          "statistics"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the test run",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "description": "Name of the test run"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestRunState"
              }
            ],
            "description": "Current state of the test run"
          },
          "createdDate": {
            "type": "string",
            "description": "Date when the test run was created",
            "format": "date-time"
          },
          "startedDate": {
            "type": "string",
            "description": "Date when the test run was started",
            "format": "date-time",
            "nullable": true
          },
          "completedDate": {
            "type": "string",
            "description": "Completion date of the test run",
            "format": "date-time",
            "nullable": true
          },
          "createdById": {
            "type": "string",
            "description": "Unique ID of user who created the test run",
            "format": "uuid"
          },
          "modifiedById": {
            "type": "string",
            "description": "Unique ID of user who modified the test run last time",
            "format": "uuid",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is the test run is deleted"
          },
          "autoTestsCount": {
            "type": "integer",
            "description": "Number of AutoTests run in the test run",
            "format": "int32"
          },
          "statistics": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestResultsStatisticsGetModel"
              }
            ],
            "description": "Statistics of the test run"
          }
        },
        "additionalProperties": false
      },
      "TestRunShortModel": {
        "required": [
          "id",
          "isDeleted",
          "projectId",
          "stateName"
        ],
        "type": "object",
        "properties": {
          "stateName": {
            "title": "Test run state",
            "allOf": [
              {
                "$ref": "#/components/schemas/TestRunState"
              }
            ]
          },
          "projectId": {
            "title": "Project internal identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "testPlanId": {
            "title": "Test plan internal identifier",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "name": {
            "title": "Test run name",
            "type": "string",
            "nullable": true,
            "example": "Core tests"
          },
          "description": {
            "title": "Test run description",
            "type": "string",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the entity",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the entity is deleted"
          }
        },
        "additionalProperties": false
      },
      "TestRunState": {
        "enum": [
          "NotStarted",
          "InProgress",
          "Stopped",
          "Completed"
        ],
        "type": "string"
      },
      "TestRunStatisticsErrorCategoriesGetModel": {
        "required": [
          "infrastructureDefect",
          "noAnalytics",
          "noDefect",
          "productDefect",
          "testDefect"
        ],
        "type": "object",
        "properties": {
          "noAnalytics": {
            "type": "integer",
            "description": "Number of test results which outcomes were not analyzed",
            "format": "int32"
          },
          "noDefect": {
            "type": "integer",
            "description": "Number of test results which outcomes were not caused by any defect",
            "format": "int32"
          },
          "infrastructureDefect": {
            "type": "integer",
            "description": "Number of test results which outcomes were caused by some infrastructure defect",
            "format": "int32"
          },
          "productDefect": {
            "type": "integer",
            "description": "Number of test results which outcomes were caused by some tested product defect",
            "format": "int32"
          },
          "testDefect": {
            "type": "integer",
            "description": "Number of test results which outcomes were caused by test itself",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TestRunStatisticsStatusesGetModel": {
        "required": [
          "blocked",
          "failed",
          "inProgress",
          "passed",
          "skipped"
        ],
        "type": "object",
        "properties": {
          "inProgress": {
            "type": "integer",
            "description": "Number of test results which is running currently",
            "format": "int32"
          },
          "passed": {
            "type": "integer",
            "description": "Number of test results which successfully passed",
            "format": "int32"
          },
          "failed": {
            "type": "integer",
            "description": "Number of test results which failed with an error",
            "format": "int32"
          },
          "skipped": {
            "type": "integer",
            "description": "Number of test results which did not run and were skipped",
            "format": "int32"
          },
          "blocked": {
            "type": "integer",
            "description": "Number of test results which cannot be launched",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "TestRunTestResultsPartialBulkSetModel": {
        "type": "object",
        "properties": {
          "selector": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestRunTestResultsSelectModel"
              }
            ],
            "description": "Object with filters and extraction parameters",
            "nullable": true
          },
          "resultReasonIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique IDs of result reasons to be assigned to test results",
            "nullable": true
          },
          "links": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkPostModel"
            },
            "description": "Collection of links to be assigned to test results",
            "nullable": true
          },
          "comment": {
            "type": "string",
            "description": "Comment to be added to test results",
            "nullable": true
          },
          "attachmentIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Unique IDs of files to be attached to test results",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestRunTestResultsSelectModel": {
        "type": "object",
        "properties": {
          "filter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestResultsLocalFilterModel"
              }
            ],
            "description": "Collection of filters to apply to search",
            "nullable": true
          },
          "testResultIdsExtractionModel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuidExtractionModel"
              }
            ],
            "description": "Rules to include and exclude certain entities in result",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestRunUpdateMultipleModel": {
        "required": [
          "attachmentUpdateScheme",
          "linkUpdateScheme",
          "selectModel"
        ],
        "type": "object",
        "properties": {
          "selectModel": {
            "title": "Test run selection model",
            "allOf": [
              {
                "$ref": "#/components/schemas/TestRunSelectModel"
              }
            ],
            "description": "Model containing options to filter test runs"
          },
          "description": {
            "title": "Test run description",
            "type": "string",
            "nullable": true
          },
          "attachmentUpdateScheme": {
            "title": "Set of attachment ids",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateAttachmentShortModel"
              }
            ]
          },
          "linkUpdateScheme": {
            "title": "Set of links",
            "allOf": [
              {
                "$ref": "#/components/schemas/UpdateLinkShortModel"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "TestRunV2GetModel": {
        "required": [
          "attachments",
          "createdById",
          "createdDate",
          "id",
          "links",
          "name",
          "projectId",
          "stateName",
          "webhooks"
        ],
        "type": "object",
        "properties": {
          "startedOn": {
            "title": "Date and time of test run start",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "completedOn": {
            "title": "Date and time of test run end",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "stateName": {
            "title": "Test plan state",
            "allOf": [
              {
                "$ref": "#/components/schemas/TestRunState"
              }
            ]
          },
          "projectId": {
            "title": "Project unique identifier",
            "type": "string",
            "description": "This property is used to link test run with project",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "testPlanId": {
            "title": "Test plan unique identifier",
            "type": "string",
            "description": "This property is used to link test run with test plan",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "testResults": {
            "title": "Enumeration of test results related to test run",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestResultV2GetModel"
            },
            "nullable": true
          },
          "createdDate": {
            "title": "Date and time of test run creation",
            "type": "string",
            "format": "date-time",
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "modifiedDate": {
            "title": "Date and time of last test run  modification",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "createdById": {
            "title": "Unique identifier of user who created test run ",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "modifiedById": {
            "title": "Unique identifier of user who applied last test run  modification",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "createdByUserName": {
            "title": "Username of user who created test run",
            "type": "string",
            "nullable": true,
            "example": "example"
          },
          "attachments": {
            "title": "Collection of attachments related to the test run",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentModel"
            }
          },
          "links": {
            "title": "Collection of links related to the test run",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkModel"
            }
          },
          "customParameters": {
            "title": "Customers test run parameters",
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "nullable": true
          },
          "webhooks": {
            "title": "Enabled webhooks",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NamedEntityModel"
            }
          },
          "id": {
            "title": "Test run unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "name": {
            "title": "Test run name",
            "minLength": 1,
            "type": "string",
            "example": "First run"
          },
          "description": {
            "title": "Test run description",
            "type": "string",
            "nullable": true
          },
          "launchSource": {
            "title": "Test run launch source",
            "type": "string",
            "description": "Once launch source is specified it cannot be updated",
            "nullable": true,
            "example": "By user via API"
          }
        },
        "additionalProperties": false
      },
      "TestRunV2PostShortModel": {
        "required": [
          "projectId"
        ],
        "type": "object",
        "properties": {
          "projectId": {
            "title": "Project unique identifier",
            "type": "string",
            "description": "This property is to link test run with a project",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "name": {
            "title": "Test run name",
            "type": "string",
            "nullable": true,
            "example": "First run"
          },
          "description": {
            "title": "Test run description",
            "type": "string",
            "nullable": true
          },
          "launchSource": {
            "title": "Test run launch source",
            "type": "string",
            "nullable": true,
            "example": "By user via API"
          },
          "attachments": {
            "title": "Collection of attachments to relate to the test run",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentPutModel"
            },
            "nullable": true
          },
          "links": {
            "title": "Collection of links to relate to the test run",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkPostModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestRunV2PutModel": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "Test run unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "name": {
            "title": "Test run name",
            "minLength": 1,
            "type": "string",
            "example": "First run"
          },
          "description": {
            "title": "Test run description",
            "type": "string",
            "nullable": true
          },
          "launchSource": {
            "title": "Test run launch source",
            "type": "string",
            "description": "Once launch source is specified it cannot be updated",
            "nullable": true,
            "example": "By user via API"
          },
          "attachments": {
            "title": "Collection of attachments related to the test run",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentPutModel"
            },
            "nullable": true
          },
          "links": {
            "title": "Collection of links related to the test run",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkPutModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestSuiteChangeViewModel": {
        "required": [
          "id",
          "name",
          "workItemCount"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "configurations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShortConfiguration"
            },
            "nullable": true
          },
          "workItemCount": {
            "type": "integer",
            "format": "int64"
          }
        },
        "additionalProperties": false
      },
      "TestSuiteChangeViewModelChangedFieldViewModel": {
        "type": "object",
        "properties": {
          "oldValue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestSuiteChangeViewModel"
              }
            ],
            "nullable": true
          },
          "newValue": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestSuiteChangeViewModel"
              }
            ],
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestSuiteType": {
        "enum": [
          "Custom",
          "Dynamic",
          "Tree"
        ],
        "type": "string"
      },
      "TestSuiteV2GetModel": {
        "required": [
          "id",
          "name",
          "testPlanId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique ID of the test suite",
            "format": "uuid"
          },
          "refreshDate": {
            "type": "string",
            "description": "Date of the last refresh of the test suite",
            "format": "date-time",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "description": "Unique ID of the parent test suite in hierarchy",
            "format": "uuid",
            "nullable": true
          },
          "testPlanId": {
            "type": "string",
            "description": "Unique ID of test plan to which the test suite belongs",
            "format": "uuid"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Name of the test suite"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestSuiteType"
              }
            ],
            "description": "Type of the test suite",
            "nullable": true
          },
          "saveStructure": {
            "type": "boolean",
            "description": "Indicates if the test suite retains section tree structure",
            "nullable": true
          },
          "autoRefresh": {
            "type": "boolean",
            "description": "Indicates if scheduled auto refresh is enabled for the test suite",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestSuiteV2PostModel": {
        "required": [
          "name",
          "testPlanId"
        ],
        "type": "object",
        "properties": {
          "parentId": {
            "type": "string",
            "description": "Unique ID of the parent test suite in hierarchy",
            "format": "uuid",
            "nullable": true
          },
          "testPlanId": {
            "type": "string",
            "description": "Unique ID of test plan to which the test suite belongs",
            "format": "uuid"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Name of the test suite"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestSuiteType"
              }
            ],
            "description": "Type of the test suite",
            "nullable": true
          },
          "saveStructure": {
            "type": "boolean",
            "description": "Indicates if the test suite retains section tree structure",
            "nullable": true
          },
          "autoRefresh": {
            "type": "boolean",
            "description": "Indicates if scheduled auto refresh is enabled for the test suite",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestSuiteV2PutModel": {
        "required": [
          "id",
          "isDeleted",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "autoRefresh": {
            "type": "boolean",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestSuiteV2TreeModel": {
        "required": [
          "id",
          "name",
          "testPlanId"
        ],
        "type": "object",
        "properties": {
          "children": {
            "title": "Enumeration of children test suites. Property is set as deprecated for avoid recursive example generation in swagger UI",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestSuiteV2TreeModel"
            },
            "description": "nested enumeration of children is allowed",
            "nullable": true,
            "deprecated": true
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the test suite",
            "format": "uuid"
          },
          "refreshDate": {
            "type": "string",
            "description": "Date of the last refresh of the test suite",
            "format": "date-time",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "description": "Unique ID of the parent test suite in hierarchy",
            "format": "uuid",
            "nullable": true
          },
          "testPlanId": {
            "type": "string",
            "description": "Unique ID of test plan to which the test suite belongs",
            "format": "uuid"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Name of the test suite"
          },
          "type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/TestSuiteType"
              }
            ],
            "description": "Type of the test suite",
            "nullable": true
          },
          "saveStructure": {
            "type": "boolean",
            "description": "Indicates if the test suite retains section tree structure",
            "nullable": true
          },
          "autoRefresh": {
            "type": "boolean",
            "description": "Indicates if scheduled auto refresh is enabled for the test suite",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TestSuiteWithChildrenModel": {
        "required": [
          "id",
          "isDeleted",
          "name",
          "testPlanId"
        ],
        "type": "object",
        "properties": {
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TestSuiteWithChildrenModel"
            },
            "nullable": true
          },
          "testerId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "parentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "testPlanId": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the entity",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the entity is deleted"
          }
        },
        "additionalProperties": false
      },
      "TestSuiteWorkItemsSearchModel": {
        "type": "object",
        "properties": {
          "tagNames": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Collection of tags",
            "nullable": true,
            "deprecated": true
          },
          "entityTypes": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemEntityTypes"
            },
            "description": "Collection of types of work item\r\n\nAllowed values: `TestCases`, `CheckLists`, `SharedSteps`",
            "nullable": true,
            "deprecated": true
          },
          "nameOrId": {
            "type": "string",
            "description": "Name or identifier (UUID) of work item",
            "nullable": true
          },
          "includeIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of work items which need to be included in result regardless of filtering",
            "nullable": true
          },
          "excludeIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of work items which need to be excluded from result regardless of filtering",
            "nullable": true
          },
          "projectIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of project identifiers",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Name of work item",
            "nullable": true
          },
          "ids": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a work item unique IDs to search for",
            "nullable": true
          },
          "globalIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Collection of global (integer) identifiers",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "description": "Custom attributes of work item",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is result must consist of only actual/deleted work items",
            "nullable": true
          },
          "sectionIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of section identifiers",
            "nullable": true
          },
          "createdByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of users who created work item",
            "nullable": true
          },
          "modifiedByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of users who applied last modification to work item",
            "nullable": true
          },
          "states": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemStates"
            },
            "description": "Collection of states of work item",
            "nullable": true
          },
          "priorities": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemPriorityModel"
            },
            "description": "Collection of priorities of work item",
            "nullable": true
          },
          "types": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemEntityTypes"
            },
            "description": "Collection of types of work item",
            "nullable": true
          },
          "createdDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a work item range of creation date to search for",
            "nullable": true
          },
          "modifiedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a work item range of last modification date to search for",
            "nullable": true
          },
          "duration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int32RangeSelectorModel"
              }
            ],
            "description": "Specifies a work item duration range to search for",
            "nullable": true
          },
          "medianDuration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int64RangeSelectorModel"
              }
            ],
            "description": "Specifies a work item median duration range to search for",
            "nullable": true
          },
          "isAutomated": {
            "type": "boolean",
            "description": "Is result must consist of only manual/automated work items",
            "nullable": true
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Collection of tags",
            "nullable": true
          },
          "autoTestIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of linked autotests",
            "nullable": true
          },
          "workItemVersionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers work items versions.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateAttachmentShortModel": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionUpdate"
              }
            ]
          },
          "attachmentIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateLinkShortModel": {
        "required": [
          "action"
        ],
        "type": "object",
        "properties": {
          "action": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ActionUpdate"
              }
            ]
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkPostModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserRankModel": {
        "required": [
          "blockedTestPoints",
          "failedTestPoints",
          "levelAvatarEnabled",
          "passedTestPoints",
          "score",
          "skippedTestPoints",
          "workItemsCreated"
        ],
        "type": "object",
        "properties": {
          "score": {
            "type": "integer",
            "format": "int32"
          },
          "workItemsCreated": {
            "type": "integer",
            "format": "int32"
          },
          "passedTestPoints": {
            "type": "integer",
            "format": "int32"
          },
          "failedTestPoints": {
            "type": "integer",
            "format": "int32"
          },
          "skippedTestPoints": {
            "type": "integer",
            "format": "int32"
          },
          "blockedTestPoints": {
            "type": "integer",
            "format": "int32"
          },
          "levelAvatarEnabled": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UserWithRankModel": {
        "required": [
          "avatarMetadata",
          "avatarUrl",
          "displayName",
          "firstName",
          "id",
          "isActiveStatusByEntity",
          "isDeleted",
          "isDisabled",
          "lastName",
          "middleName",
          "userName",
          "userRank",
          "userType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "middleName": {
            "type": "string"
          },
          "userName": {
            "type": "string"
          },
          "displayName": {
            "type": "string"
          },
          "userType": {
            "type": "string"
          },
          "avatarUrl": {
            "type": "string"
          },
          "avatarMetadata": {
            "type": "string"
          },
          "isDeleted": {
            "type": "boolean"
          },
          "isDisabled": {
            "type": "boolean"
          },
          "providerId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "isActiveStatusByEntity": {
            "type": "boolean"
          },
          "userRank": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserRankModel"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ValidationProblemDetails": {
        "required": [
          "errors"
        ],
        "type": "object",
        "properties": {
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "WebHookEventType": {
        "enum": [
          "AutomatedTestRunCreated",
          "TestPlansStatusChanged",
          "TestRunStopped",
          "TestPointAssigned",
          "TestResultJiraIssueCreated",
          "AutoTestFinished",
          "UserMentionedInComment",
          "UserSelectedInWorkItemAttribute",
          "AllTestPointsFinished",
          "AllAutoTestsFinished",
          "AutoTestChanged",
          "WorkItemAutoTestRelationChanged",
          "WorkItemAttributeChanged",
          "WorkItemChanged",
          "ConfigurationChanged",
          "ProjectChanged",
          "TestPlanChanged"
        ],
        "type": "string"
      },
      "WebHookEventTypeModel": {
        "enum": [
          "AutomatedTestRunCreated",
          "TestPlansStatusChanged",
          "TestRunStopped",
          "TestPointAssigned",
          "TestResultJiraIssueCreated",
          "AutoTestFinished",
          "UserMentionedInComment",
          "UserSelectedInWorkItemAttribute",
          "AllTestPointsFinished",
          "AllAutoTestsFinished",
          "AutoTestChanged",
          "WorkItemAutoTestRelationChanged",
          "WorkItemAttributeChanged",
          "WorkItemChanged",
          "ConfigurationChanged",
          "ProjectChanged",
          "TestPlanChanged"
        ],
        "type": "string"
      },
      "WebHookLogModel": {
        "required": [
          "createdById",
          "eventType",
          "id",
          "isDeleted",
          "projectId",
          "requestType",
          "responseStatusCode",
          "url",
          "webHookId",
          "webHookName"
        ],
        "type": "object",
        "properties": {
          "webHookName": {
            "type": "string"
          },
          "eventType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WebHookEventTypeModel"
              }
            ]
          },
          "webHookId": {
            "type": "string",
            "format": "uuid"
          },
          "requestBody": {
            "type": "string",
            "nullable": true
          },
          "requestMeta": {
            "type": "string",
            "nullable": true
          },
          "responseStatusCode": {
            "type": "integer",
            "format": "int32"
          },
          "responseBody": {
            "type": "string",
            "nullable": true
          },
          "responseMeta": {
            "type": "string",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "format": "uuid"
          },
          "url": {
            "type": "string"
          },
          "requestType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestTypeModel"
              }
            ]
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdById": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedById": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the entity",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the entity is deleted"
          }
        },
        "additionalProperties": false
      },
      "WebHookModel": {
        "required": [
          "createdById",
          "createdDate",
          "eventType",
          "id",
          "isDeleted",
          "isEnabled",
          "name",
          "projectId",
          "requestType",
          "shouldEscapeParameters",
          "shouldReplaceParameters",
          "shouldSendBody",
          "shouldSendCustomBody",
          "url"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the webhook"
          },
          "eventType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WebHookEventTypeModel"
              }
            ],
            "description": "Type of event which triggers the webhook"
          },
          "description": {
            "type": "string",
            "description": "Description of the webhook",
            "nullable": true
          },
          "url": {
            "type": "string",
            "description": "Url to which the webhook sends request"
          },
          "requestType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestTypeModel"
              }
            ],
            "description": "Method which the webhook uses"
          },
          "shouldSendBody": {
            "type": "boolean",
            "description": "Indicates if the webhook sends body"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Collection of headers which the webhook sends",
            "nullable": true
          },
          "queryParameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Collection of query parameters which the webhook sends",
            "nullable": true
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Indicates if the webhook is active"
          },
          "shouldSendCustomBody": {
            "type": "boolean",
            "description": "Indicates if the webhook sends custom body"
          },
          "customBody": {
            "type": "string",
            "description": "Custom body of the webhook",
            "nullable": true
          },
          "customBodyMediaType": {
            "type": "string",
            "description": "MIME type of body of the webhook",
            "nullable": true
          },
          "shouldReplaceParameters": {
            "type": "boolean",
            "description": "Indicates if the webhook injects parameters"
          },
          "shouldEscapeParameters": {
            "type": "boolean",
            "description": "Indicates if the webhook escapes invalid characters in parameters"
          },
          "createdDate": {
            "type": "string",
            "description": "Creation date of the webhook",
            "format": "date-time"
          },
          "createdById": {
            "type": "string",
            "description": "Unique ID of user who created the webhook",
            "format": "uuid"
          },
          "modifiedDate": {
            "type": "string",
            "description": "Last modification date of the webhook",
            "format": "date-time",
            "nullable": true
          },
          "modifiedById": {
            "type": "string",
            "description": "Unique ID of user who modified the webhook last time",
            "format": "uuid",
            "nullable": true
          },
          "projectId": {
            "type": "string",
            "description": "Unique ID of project where the webhook is located",
            "format": "uuid"
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the entity",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the entity is deleted"
          }
        },
        "additionalProperties": false
      },
      "WebHookPostModel": {
        "required": [
          "eventType",
          "headers",
          "isEnabled",
          "name",
          "projectId",
          "queryParameters",
          "requestType",
          "shouldEscapeParameters",
          "shouldReplaceParameters",
          "shouldSendBody",
          "shouldSendCustomBody",
          "url"
        ],
        "type": "object",
        "properties": {
          "projectId": {
            "type": "string",
            "description": "Unique ID of the webhook project",
            "format": "uuid"
          },
          "eventType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WebHookEventTypeModel"
              }
            ],
            "description": "Type of event which triggers the webhook"
          },
          "description": {
            "type": "string",
            "description": "Description of the webhook",
            "nullable": true
          },
          "url": {
            "minLength": 1,
            "type": "string",
            "description": "Request URL of the webhook"
          },
          "requestType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestTypeModel"
              }
            ],
            "description": "Request method of the webhook"
          },
          "shouldSendBody": {
            "type": "boolean",
            "description": "Indicates if the webhook sends body"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Collection of the webhook headers"
          },
          "queryParameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Collection of the webhook query parameters"
          },
          "isEnabled": {
            "type": "boolean",
            "description": "Indicates if the webhook is active"
          },
          "shouldSendCustomBody": {
            "type": "boolean",
            "description": "Indicates if the webhook sends custom body"
          },
          "customBody": {
            "type": "string",
            "description": "Custom body of the webhook",
            "nullable": true
          },
          "shouldReplaceParameters": {
            "type": "boolean",
            "description": "Indicates if the webhook injects parameters"
          },
          "shouldEscapeParameters": {
            "type": "boolean",
            "description": "Indicates if the webhook escapes invalid characters in parameters"
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Name of the webhook"
          }
        },
        "additionalProperties": false
      },
      "WebHookTestModel": {
        "required": [
          "requestType",
          "url"
        ],
        "type": "object",
        "properties": {
          "requestType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RequestTypeModel"
              }
            ],
            "description": "Request method of the webhook"
          },
          "url": {
            "minLength": 1,
            "type": "string",
            "description": "Request URL of the webhook"
          }
        },
        "additionalProperties": false
      },
      "WebhookResponse": {
        "required": [
          "requestMeta",
          "responseBody",
          "responseMeta",
          "statusCode"
        ],
        "type": "object",
        "properties": {
          "uri": {
            "type": "string",
            "nullable": true
          },
          "statusCode": {
            "type": "integer",
            "format": "int32"
          },
          "requestBody": {
            "type": "string",
            "nullable": true
          },
          "requestMeta": {
            "type": "string"
          },
          "responseBody": {
            "type": "string"
          },
          "responseMeta": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "WebhookVariablesType": {
        "enum": [
          "VariablesForUrl",
          "VariablesForHeaders",
          "VariablesForBody"
        ],
        "type": "string"
      },
      "WorkItemChangeModel": {
        "required": [
          "createdById",
          "id",
          "newVersionId",
          "oldVersionId",
          "workItemChangedFields",
          "workItemId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "workItemId": {
            "type": "string",
            "format": "uuid"
          },
          "oldVersionId": {
            "type": "string",
            "format": "uuid"
          },
          "newVersionId": {
            "type": "string",
            "format": "uuid"
          },
          "workItemChangedFields": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemChangedFieldsViewModel"
              }
            ]
          },
          "createdById": {
            "type": "string",
            "format": "uuid"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkItemChangedAttributeViewModel": {
        "required": [
          "newAttributeName",
          "newValue",
          "oldAttributeName",
          "oldValue",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string"
          },
          "oldAttributeName": {
            "type": "string"
          },
          "newAttributeName": {
            "type": "string"
          },
          "oldValue": { },
          "newValue": { }
        },
        "additionalProperties": false
      },
      "WorkItemChangedFieldsViewModel": {
        "required": [
          "attachments",
          "attributes",
          "autoTests",
          "duration",
          "entityTypeName",
          "globalId",
          "isAutomated",
          "isDeleted",
          "links",
          "postconditionSteps",
          "preconditionSteps",
          "priority",
          "projectId",
          "sectionId",
          "state",
          "steps",
          "tags",
          "versionNumber"
        ],
        "type": "object",
        "properties": {
          "name": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringChangedFieldWithDiffsViewModel"
              }
            ],
            "nullable": true
          },
          "isDeleted": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BooleanChangedFieldViewModel"
              }
            ]
          },
          "projectId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuidChangedFieldViewModel"
              }
            ]
          },
          "isAutomated": {
            "allOf": [
              {
                "$ref": "#/components/schemas/BooleanChangedFieldViewModel"
              }
            ]
          },
          "sectionId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuidChangedFieldViewModel"
              }
            ]
          },
          "description": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringChangedFieldWithDiffsViewModel"
              }
            ],
            "nullable": true
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringChangedFieldViewModel"
              }
            ]
          },
          "priority": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringChangedFieldViewModel"
              }
            ]
          },
          "duration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int32ChangedFieldViewModel"
              }
            ]
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/WorkItemChangedAttributeViewModel"
            }
          },
          "steps": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel"
              }
            ]
          },
          "preconditionSteps": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel"
              }
            ]
          },
          "postconditionSteps": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel"
              }
            ]
          },
          "autoTests": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AutoTestChangeViewModelArrayChangedFieldViewModel"
              }
            ]
          },
          "attachments": {
            "allOf": [
              {
                "$ref": "#/components/schemas/AttachmentChangeViewModelArrayChangedFieldViewModel"
              }
            ]
          },
          "tags": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringArrayChangedFieldViewModel"
              }
            ]
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemLinkChangeViewModelArrayChangedFieldViewModel"
              }
            ]
          },
          "globalId": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int64ChangedFieldViewModel"
              }
            ]
          },
          "versionNumber": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int32ChangedFieldViewModel"
              }
            ]
          },
          "entityTypeName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StringChangedFieldViewModel"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "WorkItemCommentModel": {
        "required": [
          "createdById",
          "createdDate",
          "id",
          "text",
          "user"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "text": {
            "type": "string"
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserWithRankModel"
              }
            ]
          },
          "createdById": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedById": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkItemCommentPostModel": {
        "required": [
          "text",
          "workItemId"
        ],
        "type": "object",
        "properties": {
          "text": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "workItemId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "WorkItemCommentPutModel": {
        "required": [
          "id",
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "maxLength": 1024,
            "minLength": 1,
            "type": "string",
            "description": "Text of the comment"
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the comment",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "WorkItemEntityTypes": {
        "enum": [
          "TestCases",
          "CheckLists",
          "SharedSteps"
        ],
        "type": "string"
      },
      "WorkItemExtractionModel": {
        "type": "object",
        "properties": {
          "projectIds": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuidExtractionModel"
              }
            ],
            "description": "Extraction parameters for projects",
            "nullable": true
          },
          "ids": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuidExtractionModel"
              }
            ],
            "description": "Extraction parameters for work items",
            "nullable": true
          },
          "sectionIds": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GuidExtractionModel"
              }
            ],
            "description": "Extraction parameters for sections",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Rules for different level entities inclusion/exclusion"
      },
      "WorkItemFilterModel": {
        "type": "object",
        "properties": {
          "nameOrId": {
            "type": "string",
            "description": "Name or identifier (UUID) of work item",
            "nullable": true
          },
          "includeIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of work items which need to be included in result regardless of filtering",
            "nullable": true
          },
          "excludeIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of work items which need to be excluded from result regardless of filtering",
            "nullable": true
          },
          "projectIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of project identifiers",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Name of work item",
            "nullable": true
          },
          "ids": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a work item unique IDs to search for",
            "nullable": true
          },
          "globalIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Collection of global (integer) identifiers",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "description": "Custom attributes of work item",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is result must consist of only actual/deleted work items",
            "nullable": true
          },
          "sectionIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of section identifiers",
            "nullable": true
          },
          "createdByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of users who created work item",
            "nullable": true
          },
          "modifiedByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of users who applied last modification to work item",
            "nullable": true
          },
          "states": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemStates"
            },
            "description": "Collection of states of work item",
            "nullable": true
          },
          "priorities": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemPriorityModel"
            },
            "description": "Collection of priorities of work item",
            "nullable": true
          },
          "types": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemEntityTypes"
            },
            "description": "Collection of types of work item",
            "nullable": true
          },
          "createdDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a work item range of creation date to search for",
            "nullable": true
          },
          "modifiedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a work item range of last modification date to search for",
            "nullable": true
          },
          "duration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int32RangeSelectorModel"
              }
            ],
            "description": "Specifies a work item duration range to search for",
            "nullable": true
          },
          "medianDuration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int64RangeSelectorModel"
              }
            ],
            "description": "Specifies a work item median duration range to search for",
            "nullable": true
          },
          "isAutomated": {
            "type": "boolean",
            "description": "Is result must consist of only manual/automated work items",
            "nullable": true
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Collection of tags",
            "nullable": true
          },
          "autoTestIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of linked autotests",
            "nullable": true
          },
          "workItemVersionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers work items versions.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of filters to apply to search"
      },
      "WorkItemGroupGetModel": {
        "required": [
          "groupType"
        ],
        "type": "object",
        "properties": {
          "selectModel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemLocalSelectModel"
              }
            ],
            "description": "Model containing options to filter work items",
            "nullable": true
          },
          "groupType": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemGroupType"
              }
            ]
          },
          "customAttributeId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkItemGroupModel": {
        "required": [
          "size",
          "workItems"
        ],
        "type": "object",
        "properties": {
          "key": {
            "nullable": true
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "workItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemShortModel"
            }
          }
        },
        "additionalProperties": false
      },
      "WorkItemGroupType": {
        "enum": [
          "Type",
          "Priority",
          "Status",
          "AutomationStatus",
          "Creator",
          "LastEditor",
          "CustomAttribute"
        ],
        "type": "string"
      },
      "WorkItemIdModel": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "WorkItem unique internal or global identifier",
            "minLength": 1,
            "type": "string",
            "description": "Used for search WorkItem. Internal identifier has a Guid data format. Global identifier has an integer data format",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          }
        },
        "additionalProperties": false
      },
      "WorkItemIdentifierModel": {
        "required": [
          "globalId",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "title": "WorkItem unique internal identifier",
            "type": "string",
            "description": "Used for search WorkItem. Internal identifier has a Guid data format. Global identifier has an integer data format",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "globalId": {
            "title": "WorkItem Global unique identifier",
            "type": "integer",
            "format": "int64",
            "example": 1000
          }
        },
        "additionalProperties": false
      },
      "WorkItemLikeModel": {
        "required": [
          "createdById",
          "createdDate",
          "id",
          "isDeleted",
          "workItemId"
        ],
        "type": "object",
        "properties": {
          "workItemId": {
            "type": "string",
            "format": "uuid"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdById": {
            "type": "string",
            "format": "uuid"
          },
          "modifiedById": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "id": {
            "type": "string",
            "description": "Unique ID of the entity",
            "format": "uuid"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Indicates if the entity is deleted"
          }
        },
        "additionalProperties": false
      },
      "WorkItemLinkChangeViewModel": {
        "required": [
          "description",
          "hasInfo",
          "id",
          "title",
          "type",
          "url"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "hasInfo": {
            "type": "boolean"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "type": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "WorkItemLinkChangeViewModelArrayChangedFieldViewModel": {
        "type": "object",
        "properties": {
          "oldValue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemLinkChangeViewModel"
            },
            "nullable": true
          },
          "newValue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemLinkChangeViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkItemLocalFilterModel": {
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Name of work item",
            "nullable": true
          },
          "ids": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a work item unique IDs to search for",
            "nullable": true
          },
          "globalIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Collection of global (integer) identifiers",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "description": "Custom attributes of work item",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is result must consist of only actual/deleted work items",
            "nullable": true
          },
          "sectionIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of section identifiers",
            "nullable": true
          },
          "createdByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of users who created work item",
            "nullable": true
          },
          "modifiedByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of users who applied last modification to work item",
            "nullable": true
          },
          "states": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemStates"
            },
            "description": "Collection of states of work item",
            "nullable": true
          },
          "priorities": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemPriorityModel"
            },
            "description": "Collection of priorities of work item",
            "nullable": true
          },
          "types": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemEntityTypes"
            },
            "description": "Collection of types of work item",
            "nullable": true
          },
          "createdDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a work item range of creation date to search for",
            "nullable": true
          },
          "modifiedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a work item range of last modification date to search for",
            "nullable": true
          },
          "duration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int32RangeSelectorModel"
              }
            ],
            "description": "Specifies a work item duration range to search for",
            "nullable": true
          },
          "medianDuration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int64RangeSelectorModel"
              }
            ],
            "description": "Specifies a work item median duration range to search for",
            "nullable": true
          },
          "isAutomated": {
            "type": "boolean",
            "description": "Is result must consist of only manual/automated work items",
            "nullable": true
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Collection of tags",
            "nullable": true
          },
          "autoTestIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of linked autotests",
            "nullable": true
          },
          "workItemVersionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers work items versions.",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Collection of filters to apply to search"
      },
      "WorkItemLocalSelectModel": {
        "type": "object",
        "properties": {
          "filter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemLocalFilterModel"
              }
            ],
            "description": "Collection of filters to apply to search",
            "nullable": true
          },
          "extractionModel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemExtractionModel"
              }
            ],
            "description": "Rules for different level entities inclusion/exclusion",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model containing options to filter work items"
      },
      "WorkItemModel": {
        "required": [
          "attributes",
          "createdById",
          "createdDate",
          "duration",
          "entityTypeName",
          "globalId",
          "id",
          "isAutomated",
          "isDeleted",
          "links",
          "medianDuration",
          "name",
          "postconditionSteps",
          "preconditionSteps",
          "priority",
          "projectId",
          "sectionId",
          "state",
          "steps",
          "tags",
          "versionId",
          "versionNumber"
        ],
        "type": "object",
        "properties": {
          "versionId": {
            "title": "Workitem version identifier",
            "type": "string",
            "description": "used for versioning changes in workitem",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "medianDuration": {
            "title": "Workitem median duration",
            "type": "integer",
            "description": "used for getting a median duration of all autotests related to this workitem",
            "format": "int64",
            "example": 10000
          },
          "isDeleted": {
            "title": "Flag that defines if workitem is archived",
            "type": "boolean",
            "example": true
          },
          "projectId": {
            "title": "Project where workitem is located unique identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "entityTypeName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemEntityTypes"
              }
            ]
          },
          "isAutomated": {
            "title": "Flag that defines if workitem is automated",
            "type": "boolean",
            "example": true
          },
          "autoTests": {
            "title": "Collection of autotests which relates to workitem",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestModel"
            },
            "nullable": true
          },
          "attachments": {
            "title": "Collection of attachments which relates to workitem",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentModel"
            },
            "nullable": true
          },
          "sectionPreconditionSteps": {
            "title": "Collection of precondition steps from section where workitem is located",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepModel"
            },
            "nullable": true
          },
          "sectionPostconditionSteps": {
            "title": "Collection of postcondition steps from section where workitem is located",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepModel"
            },
            "nullable": true
          },
          "versionNumber": {
            "title": "Workitem version number",
            "type": "integer",
            "description": "used for define chronology of workitem state in each version",
            "format": "int32",
            "example": 10
          },
          "iterations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IterationModel"
            },
            "nullable": true
          },
          "createdDate": {
            "title": "Date and time of workitem creation",
            "type": "string",
            "format": "date-time",
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "modifiedDate": {
            "title": "Date and time of last workitem modification",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "createdById": {
            "title": "Unique identifier of user who created workitem",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "modifiedById": {
            "title": "Unique identifier of user who applied last workitem modification",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "globalId": {
            "title": "Shared step global identifier",
            "type": "integer",
            "format": "int64",
            "example": 1000
          },
          "id": {
            "title": "Workitem internal identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "sectionId": {
            "title": "Internal identifier of section where workitem is located ",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "description": {
            "title": "Workitem description",
            "type": "string",
            "nullable": true,
            "example": "This is a basic test template"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemStates"
              }
            ]
          },
          "priority": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemPriorityModel"
              }
            ]
          },
          "steps": {
            "title": "Collection of workitem steps",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepModel"
            }
          },
          "preconditionSteps": {
            "title": "Collection of workitem precondtion steps",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepModel"
            }
          },
          "postconditionSteps": {
            "title": "Collection of workitem postcondition steps",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepModel"
            }
          },
          "duration": {
            "title": "Workitem duration in milliseconds",
            "maximum": 86400000,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "example": 10000
          },
          "attributes": {
            "title": "Key value pair of custom workitem attributes",
            "type": "object",
            "additionalProperties": { }
          },
          "tags": {
            "title": "Collection of workitem tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagPutModel"
            }
          },
          "links": {
            "title": "Collection of workitem links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkModel"
            }
          },
          "name": {
            "title": "Workitem name",
            "minLength": 1,
            "type": "string",
            "example": "Basic template"
          }
        },
        "additionalProperties": false
      },
      "WorkItemMovePostModel": {
        "required": [
          "id",
          "newSectionId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "newSectionId": {
            "type": "string",
            "format": "uuid"
          },
          "oldSectionId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "nextWorkItemId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkItemPostModel": {
        "required": [
          "attributes",
          "duration",
          "entityTypeName",
          "links",
          "name",
          "postconditionSteps",
          "preconditionSteps",
          "priority",
          "projectId",
          "sectionId",
          "state",
          "steps",
          "tags"
        ],
        "type": "object",
        "properties": {
          "entityTypeName": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemEntityTypes"
              }
            ]
          },
          "description": {
            "title": "Workitem description",
            "type": "string",
            "nullable": true,
            "example": "This is a basic test template"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemStates"
              }
            ]
          },
          "priority": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemPriorityModel"
              }
            ]
          },
          "steps": {
            "title": "Collection of workitem steps ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepPostModel"
            }
          },
          "preconditionSteps": {
            "title": "Collection of workitem precondition steps ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepPostModel"
            }
          },
          "postconditionSteps": {
            "title": "Collection of workitem postcondition steps ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepPostModel"
            }
          },
          "duration": {
            "title": "WorkItem duration in milliseconds",
            "maximum": 86400000,
            "minimum": 0,
            "type": "integer",
            "description": "Must be 0 for shared steps and greater than 0 for the other types of work items",
            "format": "int32",
            "example": 10000
          },
          "attributes": {
            "title": "Key value pair of custom workitem attributes",
            "type": "object",
            "additionalProperties": { }
          },
          "tags": {
            "title": "Collection of workitem tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagPostModel"
            }
          },
          "attachments": {
            "title": "Collection of workitem attachments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentPutModel"
            },
            "nullable": true
          },
          "iterations": {
            "title": "Collection of parameter sets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IterationPutModel"
            },
            "nullable": true
          },
          "links": {
            "title": "Collection of workitem links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkPostModel"
            }
          },
          "name": {
            "title": "Workitem name",
            "minLength": 1,
            "type": "string",
            "example": "Basic template"
          },
          "projectId": {
            "title": "Project unique identifier",
            "type": "string",
            "description": "This property is used to link workitem with project",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "sectionId": {
            "title": "Internal identifier of section where workitem is located ",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "autoTests": {
            "title": "Collection of autotest internal ids",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestIdModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkItemPriorityModel": {
        "enum": [
          "Lowest",
          "Low",
          "Medium",
          "High",
          "Highest"
        ],
        "type": "string"
      },
      "WorkItemPutModel": {
        "required": [
          "attachments",
          "attributes",
          "duration",
          "id",
          "links",
          "name",
          "postconditionSteps",
          "preconditionSteps",
          "priority",
          "sectionId",
          "state",
          "steps",
          "tags"
        ],
        "type": "object",
        "properties": {
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AttachmentPutModel"
            }
          },
          "iterations": {
            "title": "Collection of parameter id sets",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IterationPutModel"
            },
            "nullable": true
          },
          "autoTests": {
            "title": "Collection of autotest internal ids",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AutoTestIdModel"
            },
            "nullable": true
          },
          "id": {
            "title": "Workitem internal identifier",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "sectionId": {
            "title": "Internal identifier of section where workitem is located ",
            "type": "string",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "description": {
            "title": "Workitem description",
            "type": "string",
            "nullable": true,
            "example": "This is a basic test template"
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemStates"
              }
            ]
          },
          "priority": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemPriorityModel"
              }
            ]
          },
          "steps": {
            "title": "Collection of workitem steps",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepPutModel"
            }
          },
          "preconditionSteps": {
            "title": "Collection of workitem precondtion steps",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepPutModel"
            }
          },
          "postconditionSteps": {
            "title": "Collection of workitem postcondition steps",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StepPutModel"
            }
          },
          "duration": {
            "title": "Workitem duration in milliseconds",
            "maximum": 86400000,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "example": 10000
          },
          "attributes": {
            "title": "Key value pair of custom workitem attributes",
            "type": "object",
            "additionalProperties": { }
          },
          "tags": {
            "title": "Collection of workitem tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagPutModel"
            }
          },
          "links": {
            "title": "Collection of workitem links",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkPutModel"
            }
          },
          "name": {
            "title": "Workitem name",
            "minLength": 1,
            "type": "string",
            "example": "Basic template"
          }
        },
        "additionalProperties": false
      },
      "WorkItemSearchQueryModel": {
        "type": "object",
        "properties": {
          "projectIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of project identifiers",
            "nullable": true
          },
          "name": {
            "maxLength": 255,
            "minLength": 0,
            "type": "string",
            "description": "Name of work item",
            "nullable": true
          },
          "ids": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Specifies a work item unique IDs to search for",
            "nullable": true
          },
          "globalIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "description": "Collection of global (integer) identifiers",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              },
              "nullable": true
            },
            "description": "Custom attributes of work item",
            "nullable": true
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Is result must consist of only actual/deleted work items",
            "nullable": true
          },
          "sectionIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of section identifiers",
            "nullable": true
          },
          "createdByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of users who created work item",
            "nullable": true
          },
          "modifiedByIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of users who applied last modification to work item",
            "nullable": true
          },
          "states": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemStates"
            },
            "description": "Collection of states of work item",
            "nullable": true
          },
          "priorities": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemPriorityModel"
            },
            "description": "Collection of priorities of work item",
            "nullable": true
          },
          "types": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemEntityTypes"
            },
            "description": "Collection of types of work item",
            "nullable": true
          },
          "createdDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a work item range of creation date to search for",
            "nullable": true
          },
          "modifiedDate": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DateTimeRangeSelectorModel"
              }
            ],
            "description": "Specifies a work item range of last modification date to search for",
            "nullable": true
          },
          "duration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int32RangeSelectorModel"
              }
            ],
            "description": "Specifies a work item duration range to search for",
            "nullable": true
          },
          "medianDuration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Int64RangeSelectorModel"
              }
            ],
            "description": "Specifies a work item median duration range to search for",
            "nullable": true
          },
          "isAutomated": {
            "type": "boolean",
            "description": "Is result must consist of only manual/automated work items",
            "nullable": true
          },
          "tags": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Collection of tags",
            "nullable": true
          },
          "autoTestIds": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers of linked autotests",
            "nullable": true
          },
          "workItemVersionIds": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            },
            "description": "Collection of identifiers work items versions.",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkItemSelectModel": {
        "required": [
          "filter"
        ],
        "type": "object",
        "properties": {
          "filter": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemFilterModel"
              }
            ],
            "description": "Collection of filters to apply to search"
          },
          "extractionModel": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemExtractionModel"
              }
            ],
            "description": "Rules for different level entities inclusion/exclusion",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "description": "Model containing options to filter work items"
      },
      "WorkItemShortModel": {
        "required": [
          "createdById",
          "duration",
          "entityTypeName",
          "globalId",
          "id",
          "isAutomated",
          "isDeleted",
          "iterations",
          "links",
          "name",
          "priority",
          "projectId",
          "sectionId",
          "sectionName",
          "state",
          "versionId",
          "versionNumber"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Work Item internal unique identifier",
            "format": "uuid"
          },
          "versionId": {
            "type": "string",
            "description": "Work Item version identifier",
            "format": "uuid"
          },
          "versionNumber": {
            "type": "integer",
            "description": "Work Item version number",
            "format": "int32"
          },
          "name": {
            "minLength": 1,
            "type": "string",
            "description": "Work Item name",
            "example": "Performance test"
          },
          "entityTypeName": {
            "minLength": 1,
            "type": "string",
            "description": "Work Item type. Possible values: CheckLists, SharedSteps, TestCases",
            "example": "TestCases"
          },
          "projectId": {
            "type": "string",
            "description": "Project unique identifier",
            "format": "uuid"
          },
          "sectionId": {
            "type": "string",
            "description": "Identifier of Section where Work Item is located",
            "format": "uuid"
          },
          "sectionName": {
            "minLength": 1,
            "type": "string",
            "description": "Section name of Work Item",
            "example": "Performance tests section"
          },
          "isAutomated": {
            "type": "boolean",
            "description": "Boolean flag determining whether Work Item is automated"
          },
          "globalId": {
            "type": "integer",
            "description": "Work Item global identifier",
            "format": "int64"
          },
          "duration": {
            "type": "integer",
            "description": "Work Item duration",
            "format": "int32"
          },
          "medianDuration": {
            "type": "integer",
            "description": "Work Item median duration",
            "format": "int64",
            "nullable": true
          },
          "attributes": {
            "type": "object",
            "additionalProperties": { },
            "description": "Work Item attributes",
            "nullable": true
          },
          "createdById": {
            "type": "string",
            "description": "Unique identifier of user who created Work Item",
            "format": "uuid"
          },
          "modifiedById": {
            "type": "string",
            "description": "Unique identifier of user who applied the latest modification of Work Item",
            "format": "uuid",
            "nullable": true
          },
          "createdDate": {
            "type": "string",
            "description": "Date and time of Work Item creation",
            "format": "date-time",
            "nullable": true
          },
          "modifiedDate": {
            "type": "string",
            "description": "Date and time of the latest modification of Work Item",
            "format": "date-time",
            "nullable": true
          },
          "state": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemStates"
              }
            ],
            "description": "The current state of Work Item",
            "example": "Ready"
          },
          "priority": {
            "allOf": [
              {
                "$ref": "#/components/schemas/WorkItemPriorityModel"
              }
            ],
            "description": "Work Item priority level"
          },
          "isDeleted": {
            "type": "boolean",
            "description": "Flag determining whether Work Item is deleted"
          },
          "tagNames": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of tag names of Work Item",
            "nullable": true
          },
          "iterations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IterationModel"
            },
            "description": "Set of iterations related to Work Item"
          },
          "links": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LinkShortModel"
            },
            "description": "Set of links related to Work Item"
          }
        },
        "additionalProperties": false
      },
      "WorkItemState": {
        "enum": [
          "NeedsWork",
          "NotReady",
          "Ready"
        ],
        "type": "string"
      },
      "WorkItemStates": {
        "enum": [
          "NeedsWork",
          "NotReady",
          "Ready"
        ],
        "type": "string"
      },
      "WorkItemStepChangeViewModel": {
        "required": [
          "action",
          "comments",
          "expected",
          "index",
          "testData",
          "workItem"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string"
          },
          "expected": {
            "type": "string"
          },
          "comments": {
            "type": "string"
          },
          "testData": {
            "type": "string"
          },
          "index": {
            "type": "integer",
            "format": "int32"
          },
          "workItemId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "workItem": {
            "allOf": [
              {
                "$ref": "#/components/schemas/SharedStepChangeViewModel"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "WorkItemStepChangeViewModelArrayChangedFieldWithDiffsViewModel": {
        "type": "object",
        "properties": {
          "diffValue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemStepChangeViewModel"
            },
            "nullable": true
          },
          "oldValue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemStepChangeViewModel"
            },
            "nullable": true
          },
          "newValue": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkItemStepChangeViewModel"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WorkItemVersionModel": {
        "required": [
          "versionId",
          "versionNumber"
        ],
        "type": "object",
        "properties": {
          "versionId": {
            "title": "Workitem version identifier",
            "type": "string",
            "description": "used for versioning changes in workitem",
            "format": "uuid",
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          },
          "versionNumber": {
            "title": "Workitem version number",
            "type": "integer",
            "description": "used for define chronology of workitem state in each version",
            "format": "int32",
            "example": 10
          },
          "modifiedDate": {
            "title": "Date and time of workitem version modification",
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "example": "2024-09-24T05:01:22.8290345+00:00"
          },
          "modifiedById": {
            "title": "Unique identifier of user who applied workitem version modification",
            "type": "string",
            "format": "uuid",
            "nullable": true,
            "example": "65dd166e-6a65-4c98-93bb-74845cff4d59"
          }
        },
        "additionalProperties": false
      }
    },
    "securitySchemes": {
      "Bearer or PrivateToken": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: value: \"PrivateToken {API Secret Key}\" or value: \"Bearer {Bearer Token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer or PrivateToken": [ ]
    }
  ]
}