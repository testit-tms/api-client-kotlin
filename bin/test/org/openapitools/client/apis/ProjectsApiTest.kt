/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.ProjectsApi
import org.openapitools.client.models.AutoTestNamespaceModel
import org.openapitools.client.models.CustomAttributeTestPlanProjectRelationPutModel
import org.openapitools.client.models.FailureClassModel
import org.openapitools.client.models.FilterModel
import org.openapitools.client.models.Operation
import org.openapitools.client.models.ProblemDetails
import org.openapitools.client.models.ProjectModel
import org.openapitools.client.models.ProjectPostModel
import org.openapitools.client.models.ProjectPutModel
import org.openapitools.client.models.ProjectSelectModel
import org.openapitools.client.models.ProjectsFilterModel
import org.openapitools.client.models.PublicTestRunModel
import org.openapitools.client.models.TestPlanModel
import org.openapitools.client.models.TestRunModel
import org.openapitools.client.models.TestRunV2GetModel
import org.openapitools.client.models.ValidationProblemDetails

class ProjectsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ProjectsApi
        //val apiInstance = ProjectsApi()

        // to test addGlobaAttributesToProject
        should("test addGlobaAttributesToProject") {
            // uncomment below to test addGlobaAttributesToProject
            //val id : kotlin.String = id_example // kotlin.String | Project internal (UUID) or global (integer) identifier
            //val javaUtilUUID : kotlin.collections.Set<java.util.UUID> =  // kotlin.collections.Set<java.util.UUID> | 
            //apiInstance.addGlobaAttributesToProject(id, javaUtilUUID)
        }

        // to test apiV2ProjectsDemoPost
        should("test apiV2ProjectsDemoPost") {
            // uncomment below to test apiV2ProjectsDemoPost
            //val projectPostModel : ProjectPostModel =  // ProjectPostModel | 
            //val result : ProjectModel = apiInstance.apiV2ProjectsDemoPost(projectPostModel)
            //result shouldBe ("TODO")
        }

        // to test apiV2ProjectsIdDelete
        should("test apiV2ProjectsIdDelete") {
            // uncomment below to test apiV2ProjectsIdDelete
            //val id : kotlin.String = id_example // kotlin.String | Unique or global ID of the project
            //apiInstance.apiV2ProjectsIdDelete(id)
        }

        // to test apiV2ProjectsIdFailureClassesGet
        should("test apiV2ProjectsIdFailureClassesGet") {
            // uncomment below to test apiV2ProjectsIdFailureClassesGet
            //val id : kotlin.String = id_example // kotlin.String | Unique or global ID of the project
            //val isDeleted : kotlin.Boolean = true // kotlin.Boolean | 
            //val result : kotlin.collections.List<FailureClassModel> = apiInstance.apiV2ProjectsIdFailureClassesGet(id, isDeleted)
            //result shouldBe ("TODO")
        }

        // to test apiV2ProjectsIdFavoritePut
        should("test apiV2ProjectsIdFavoritePut") {
            // uncomment below to test apiV2ProjectsIdFavoritePut
            //val id : kotlin.String = id_example // kotlin.String | Project internal (UUID) or global (integer) identifier
            //apiInstance.apiV2ProjectsIdFavoritePut(id)
        }

        // to test apiV2ProjectsIdFiltersGet
        should("test apiV2ProjectsIdFiltersGet") {
            // uncomment below to test apiV2ProjectsIdFiltersGet
            //val id : kotlin.String = id_example // kotlin.String | Project internal (UUID) or global (integer) identifier
            //val result : kotlin.collections.List<FilterModel> = apiInstance.apiV2ProjectsIdFiltersGet(id)
            //result shouldBe ("TODO")
        }

        // to test apiV2ProjectsIdPatch
        should("test apiV2ProjectsIdPatch") {
            // uncomment below to test apiV2ProjectsIdPatch
            //val id : java.util.UUID = 38400000-8cf0-11bd-b23e-10b96e4ef00d // java.util.UUID | Unique or global Id of project
            //val operation : kotlin.collections.List<Operation> =  // kotlin.collections.List<Operation> | 
            //apiInstance.apiV2ProjectsIdPatch(id, operation)
        }

        // to test apiV2ProjectsIdPurgePost
        should("test apiV2ProjectsIdPurgePost") {
            // uncomment below to test apiV2ProjectsIdPurgePost
            //val id : kotlin.String = id_example // kotlin.String | Unique or global ID of the project
            //apiInstance.apiV2ProjectsIdPurgePost(id)
        }

        // to test apiV2ProjectsIdRestorePost
        should("test apiV2ProjectsIdRestorePost") {
            // uncomment below to test apiV2ProjectsIdRestorePost
            //val id : kotlin.String = id_example // kotlin.String | Unique or global ID of the project
            //apiInstance.apiV2ProjectsIdRestorePost(id)
        }

        // to test apiV2ProjectsIdTestPlansAttributeAttributeIdDelete
        should("test apiV2ProjectsIdTestPlansAttributeAttributeIdDelete") {
            // uncomment below to test apiV2ProjectsIdTestPlansAttributeAttributeIdDelete
            //val id : kotlin.String = id_example // kotlin.String | Project internal (UUID) or global (integer) identifier
            //val attributeId : java.util.UUID = 38400000-8cf0-11bd-b23e-10b96e4ef00d // java.util.UUID | 
            //apiInstance.apiV2ProjectsIdTestPlansAttributeAttributeIdDelete(id, attributeId)
        }

        // to test apiV2ProjectsIdTestPlansAttributePut
        should("test apiV2ProjectsIdTestPlansAttributePut") {
            // uncomment below to test apiV2ProjectsIdTestPlansAttributePut
            //val id : kotlin.String = id_example // kotlin.String | Project internal (UUID) or global (integer) identifier
            //val customAttributeTestPlanProjectRelationPutModel : CustomAttributeTestPlanProjectRelationPutModel =  // CustomAttributeTestPlanProjectRelationPutModel | 
            //apiInstance.apiV2ProjectsIdTestPlansAttributePut(id, customAttributeTestPlanProjectRelationPutModel)
        }

        // to test apiV2ProjectsIdTestRunsActiveGet
        should("test apiV2ProjectsIdTestRunsActiveGet") {
            // uncomment below to test apiV2ProjectsIdTestRunsActiveGet
            //val id : kotlin.String = id_example // kotlin.String | Project internal (UUID) or global (integer) identifier
            //val result : kotlin.collections.List<PublicTestRunModel> = apiInstance.apiV2ProjectsIdTestRunsActiveGet(id)
            //result shouldBe ("TODO")
        }

        // to test apiV2ProjectsIdTestRunsFullGet
        should("test apiV2ProjectsIdTestRunsFullGet") {
            // uncomment below to test apiV2ProjectsIdTestRunsFullGet
            //val id : kotlin.String = id_example // kotlin.String | Project internal (UUID) or global (integer) identifier
            //val includeTestResults : kotlin.Boolean = true // kotlin.Boolean | 
            //val mustAggregateTestResults : kotlin.Boolean = true // kotlin.Boolean | 
            //val notStarted : kotlin.Boolean = true // kotlin.Boolean | 
            //val inProgress : kotlin.Boolean = true // kotlin.Boolean | 
            //val stopped : kotlin.Boolean = true // kotlin.Boolean | 
            //val completed : kotlin.Boolean = true // kotlin.Boolean | 
            //val createdDateFrom : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | 
            //val createdDateTo : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | 
            //val testPlanId : java.util.UUID = 38400000-8cf0-11bd-b23e-10b96e4ef00d // java.util.UUID | 
            //val skip : kotlin.Int = 56 // kotlin.Int | Amount of items to be skipped (offset)
            //val take : kotlin.Int = 56 // kotlin.Int | Amount of items to be taken (limit)
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
            //val searchField : kotlin.String = searchField_example // kotlin.String | Property name for searching
            //val searchValue : kotlin.String = searchValue_example // kotlin.String | Value for searching
            //val result : kotlin.collections.List<TestRunModel> = apiInstance.apiV2ProjectsIdTestRunsFullGet(id, includeTestResults, mustAggregateTestResults, notStarted, inProgress, stopped, completed, createdDateFrom, createdDateTo, testPlanId, skip, take, orderBy, searchField, searchValue)
            //result shouldBe ("TODO")
        }

        // to test apiV2ProjectsNameNameExistsGet
        should("test apiV2ProjectsNameNameExistsGet") {
            // uncomment below to test apiV2ProjectsNameNameExistsGet
            //val name : kotlin.String = name_example // kotlin.String | 
            //val result : kotlin.Boolean = apiInstance.apiV2ProjectsNameNameExistsGet(name)
            //result shouldBe ("TODO")
        }

        // to test apiV2ProjectsPurgeBulkPost
        should("test apiV2ProjectsPurgeBulkPost") {
            // uncomment below to test apiV2ProjectsPurgeBulkPost
            //val projectSelectModel : ProjectSelectModel =  // ProjectSelectModel | 
            //val result : kotlin.Long = apiInstance.apiV2ProjectsPurgeBulkPost(projectSelectModel)
            //result shouldBe ("TODO")
        }

        // to test apiV2ProjectsRestoreBulkPost
        should("test apiV2ProjectsRestoreBulkPost") {
            // uncomment below to test apiV2ProjectsRestoreBulkPost
            //val projectSelectModel : ProjectSelectModel =  // ProjectSelectModel | 
            //val result : kotlin.Long = apiInstance.apiV2ProjectsRestoreBulkPost(projectSelectModel)
            //result shouldBe ("TODO")
        }

        // to test apiV2ProjectsSearchPost
        should("test apiV2ProjectsSearchPost") {
            // uncomment below to test apiV2ProjectsSearchPost
            //val skip : kotlin.Int = 56 // kotlin.Int | Amount of items to be skipped (offset)
            //val take : kotlin.Int = 56 // kotlin.Int | Amount of items to be taken (limit)
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
            //val searchField : kotlin.String = searchField_example // kotlin.String | Property name for searching
            //val searchValue : kotlin.String = searchValue_example // kotlin.String | Value for searching
            //val projectsFilterModel : ProjectsFilterModel =  // ProjectsFilterModel | 
            //val result : kotlin.collections.List<ProjectModel> = apiInstance.apiV2ProjectsSearchPost(skip, take, orderBy, searchField, searchValue, projectsFilterModel)
            //result shouldBe ("TODO")
        }

        // to test backgroundImportProject
        should("test backgroundImportProject") {
            // uncomment below to test backgroundImportProject
            //val file : java.io.File = BINARY_DATA_HERE // java.io.File | 
            //val result : java.util.UUID = apiInstance.backgroundImportProject(file)
            //result shouldBe ("TODO")
        }

        // to test backgroundImportZipProject
        should("test backgroundImportZipProject") {
            // uncomment below to test backgroundImportZipProject
            //val file : java.io.File = BINARY_DATA_HERE // java.io.File | 
            //val result : java.util.UUID = apiInstance.backgroundImportZipProject(file)
            //result shouldBe ("TODO")
        }

        // to test callImport
        should("test callImport") {
            // uncomment below to test callImport
            //val includeAttachments : kotlin.Boolean = true // kotlin.Boolean | Enables attachment import.
            //val file : java.io.File = BINARY_DATA_HERE // java.io.File | Select file
            //apiInstance.callImport(includeAttachments, file)
        }

        // to test createProject
        should("test createProject") {
            // uncomment below to test createProject
            //val projectPostModel : ProjectPostModel =  // ProjectPostModel | 
            //val result : ProjectModel = apiInstance.createProject(projectPostModel)
            //result shouldBe ("TODO")
        }

        // to test deleteProjectAutoTests
        should("test deleteProjectAutoTests") {
            // uncomment below to test deleteProjectAutoTests
            //val id : kotlin.String = id_example // kotlin.String | Unique or global ID of the project
            //apiInstance.deleteProjectAutoTests(id)
        }

        // to test getAllProjects
        should("test getAllProjects") {
            // uncomment below to test getAllProjects
            //val isDeleted : kotlin.Boolean = true // kotlin.Boolean | If result must consist of only actual/deleted parameters
            //val projectName : kotlin.String = projectName_example // kotlin.String | 
            //val skip : kotlin.Int = 56 // kotlin.Int | Amount of items to be skipped (offset)
            //val take : kotlin.Int = 56 // kotlin.Int | Amount of items to be taken (limit)
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
            //val searchField : kotlin.String = searchField_example // kotlin.String | Property name for searching
            //val searchValue : kotlin.String = searchValue_example // kotlin.String | Value for searching
            //val result : kotlin.collections.List<ProjectModel> = apiInstance.getAllProjects(isDeleted, projectName, skip, take, orderBy, searchField, searchValue)
            //result shouldBe ("TODO")
        }

        // to test getAutoTestsNamespaces
        should("test getAutoTestsNamespaces") {
            // uncomment below to test getAutoTestsNamespaces
            //val id : kotlin.String = id_example // kotlin.String | Project internal (UUID) or global (integer) identifier
            //val result : kotlin.collections.List<AutoTestNamespaceModel> = apiInstance.getAutoTestsNamespaces(id)
            //result shouldBe ("TODO")
        }

        // to test getProjectById
        should("test getProjectById") {
            // uncomment below to test getProjectById
            //val id : kotlin.String = id_example // kotlin.String | Project internal (UUID) or global (integer) identifier
            //val result : ProjectModel = apiInstance.getProjectById(id)
            //result shouldBe ("TODO")
        }

        // to test getTestPlansByProjectId
        should("test getTestPlansByProjectId") {
            // uncomment below to test getTestPlansByProjectId
            //val id : kotlin.String = id_example // kotlin.String | Project internal (UUID) or global (integer) identifier
            //val isDeleted : kotlin.Boolean = true // kotlin.Boolean | If result must consist of only actual/archived test plans
            //val result : kotlin.collections.List<TestPlanModel> = apiInstance.getTestPlansByProjectId(id, isDeleted)
            //result shouldBe ("TODO")
        }

        // to test getTestRunsByProjectId
        should("test getTestRunsByProjectId") {
            // uncomment below to test getTestRunsByProjectId
            //val id : kotlin.String = id_example // kotlin.String | Project internal (UUID) or global (integer) identifier
            //val notStarted : kotlin.Boolean = true // kotlin.Boolean | 
            //val inProgress : kotlin.Boolean = true // kotlin.Boolean | 
            //val stopped : kotlin.Boolean = true // kotlin.Boolean | 
            //val completed : kotlin.Boolean = true // kotlin.Boolean | 
            //val createdDateFrom : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | 
            //val createdDateTo : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | 
            //val testPlanId : java.util.UUID = 38400000-8cf0-11bd-b23e-10b96e4ef00d // java.util.UUID | 
            //val skip : kotlin.Int = 56 // kotlin.Int | Amount of items to be skipped (offset)
            //val take : kotlin.Int = 56 // kotlin.Int | Amount of items to be taken (limit)
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
            //val searchField : kotlin.String = searchField_example // kotlin.String | Property name for searching
            //val searchValue : kotlin.String = searchValue_example // kotlin.String | Value for searching
            //val result : kotlin.collections.List<TestRunV2GetModel> = apiInstance.getTestRunsByProjectId(id, notStarted, inProgress, stopped, completed, createdDateFrom, createdDateTo, testPlanId, skip, take, orderBy, searchField, searchValue)
            //result shouldBe ("TODO")
        }

        // to test updateProject
        should("test updateProject") {
            // uncomment below to test updateProject
            //val projectPutModel : ProjectPutModel =  // ProjectPutModel | 
            //apiInstance.updateProject(projectPutModel)
        }

    }
}
