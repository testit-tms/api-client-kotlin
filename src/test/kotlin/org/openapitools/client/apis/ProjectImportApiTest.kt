/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package org.openapitools.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import org.openapitools.client.apis.ProjectImportApi
import org.openapitools.client.models.ProblemDetails
import org.openapitools.client.models.ValidationProblemDetails

class ProjectImportApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ProjectImportApi
        //val apiInstance = ProjectImportApi()

        // to test backgroundImportToExistingProject
        should("test backgroundImportToExistingProject") {
            // uncomment below to test backgroundImportToExistingProject
            //val projectId : kotlin.String = projectId_example // kotlin.String | Project internal (UUID) or global (integer) identifier
            //val file : java.io.File = BINARY_DATA_HERE // java.io.File | Select file
            //val result : java.util.UUID = apiInstance.backgroundImportToExistingProject(projectId, file)
            //result shouldBe ("TODO")
        }

        // to test backgroundImportZipToExistingProject
        should("test backgroundImportZipToExistingProject") {
            // uncomment below to test backgroundImportZipToExistingProject
            //val projectId : kotlin.String = projectId_example // kotlin.String | Project internal (UUID) or global (integer) identifier
            //val file : java.io.File = BINARY_DATA_HERE // java.io.File | Select file
            //val result : java.util.UUID = apiInstance.backgroundImportZipToExistingProject(projectId, file)
            //result shouldBe ("TODO")
        }

        // to test importToExistingProject
        should("test importToExistingProject") {
            // uncomment below to test importToExistingProject
            //val projectId : kotlin.String = projectId_example // kotlin.String | Project internal (UUID) or global (integer) identifier
            //val includeAttachments : kotlin.Boolean = true // kotlin.Boolean | 
            //val file : java.io.File = BINARY_DATA_HERE // java.io.File | Select file
            //apiInstance.importToExistingProject(projectId, includeAttachments, file)
        }

    }
}
