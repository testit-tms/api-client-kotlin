/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ru.testit.kotlin.client.models

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import ru.testit.kotlin.client.models.TestResultHistoryReportModel
import ru.testit.kotlin.client.models.AttachmentModel
import ru.testit.kotlin.client.models.LinkModel

class TestResultHistoryReportModelTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of TestResultHistoryReportModel
        //val modelInstance = TestResultHistoryReportModel()

        // to test the property `id`
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `createdDate`
        should("test createdDate") {
            // uncomment below to test the property
            //modelInstance.createdDate shouldBe ("TODO")
        }

        // to test the property `modifiedDate`
        should("test modifiedDate") {
            // uncomment below to test the property
            //modelInstance.modifiedDate shouldBe ("TODO")
        }

        // to test the property `userId` - If test run was stopped, this property equals identifier of user who stopped it.Otherwise, the property equals identifier of user who created the test result
        should("test userId") {
            // uncomment below to test the property
            //modelInstance.userId shouldBe ("TODO")
        }

        // to test the property `isAutomated`
        should("test isAutomated") {
            // uncomment below to test the property
            //modelInstance.isAutomated shouldBe ("TODO")
        }

        // to test the property `createdById`
        should("test createdById") {
            // uncomment below to test the property
            //modelInstance.createdById shouldBe ("TODO")
        }

        // to test the property `failureClassIds`
        should("test failureClassIds") {
            // uncomment below to test the property
            //modelInstance.failureClassIds shouldBe ("TODO")
        }

        // to test the property `testRunId`
        should("test testRunId") {
            // uncomment below to test the property
            //modelInstance.testRunId shouldBe ("TODO")
        }

        // to test the property `testRunName`
        should("test testRunName") {
            // uncomment below to test the property
            //modelInstance.testRunName shouldBe ("TODO")
        }

        // to test the property `createdByUserName`
        should("test createdByUserName") {
            // uncomment below to test the property
            //modelInstance.createdByUserName shouldBe ("TODO")
        }

        // to test the property `testPlanId`
        should("test testPlanId") {
            // uncomment below to test the property
            //modelInstance.testPlanId shouldBe ("TODO")
        }

        // to test the property `testPlanGlobalId`
        should("test testPlanGlobalId") {
            // uncomment below to test the property
            //modelInstance.testPlanGlobalId shouldBe ("TODO")
        }

        // to test the property `testPlanName`
        should("test testPlanName") {
            // uncomment below to test the property
            //modelInstance.testPlanName shouldBe ("TODO")
        }

        // to test the property `configurationName` - If test point related to the test result has configuration, this property will be equal to the test point configuration name. Otherwise, this property will be equal to the test result configuration name
        should("test configurationName") {
            // uncomment below to test the property
            //modelInstance.configurationName shouldBe ("TODO")
        }

        // to test the property `outcome` - If any test result related to the test run is linked with autotest and the run has an outcome, the outcome value equalsto the worst outcome of the last modified test result.Otherwise, the outcome equals to the outcome of first created test result in the test run
        should("test outcome") {
            // uncomment below to test the property
            //modelInstance.outcome shouldBe ("TODO")
        }

        // to test the property `comment` - If any test result related to the test run is linked with autotest, comment will have default valueOtherwise, the comment equals to the comment of first created test result in the test run
        should("test comment") {
            // uncomment below to test the property
            //modelInstance.comment shouldBe ("TODO")
        }

        // to test the property `links` - If any test result related to the test run is linked with autotest, link will be equal to the links of last modified test result.Otherwise, the links equals to the links of first created test result in the test run
        should("test links") {
            // uncomment below to test the property
            //modelInstance.links shouldBe ("TODO")
        }

        // to test the property `startedOn`
        should("test startedOn") {
            // uncomment below to test the property
            //modelInstance.startedOn shouldBe ("TODO")
        }

        // to test the property `completedOn`
        should("test completedOn") {
            // uncomment below to test the property
            //modelInstance.completedOn shouldBe ("TODO")
        }

        // to test the property `duration`
        should("test duration") {
            // uncomment below to test the property
            //modelInstance.duration shouldBe ("TODO")
        }

        // to test the property `modifiedById`
        should("test modifiedById") {
            // uncomment below to test the property
            //modelInstance.modifiedById shouldBe ("TODO")
        }

        // to test the property `attachments` - If any test result related to the test run is linked with autotest, attachments will be equal to the attachments of last modified test result.Otherwise, the attachments equals to the attachments of first created test result in the test run
        should("test attachments") {
            // uncomment below to test the property
            //modelInstance.attachments shouldBe ("TODO")
        }

        // to test the property `workItemVersionId`
        should("test workItemVersionId") {
            // uncomment below to test the property
            //modelInstance.workItemVersionId shouldBe ("TODO")
        }

        // to test the property `workItemVersionNumber`
        should("test workItemVersionNumber") {
            // uncomment below to test the property
            //modelInstance.workItemVersionNumber shouldBe ("TODO")
        }

        // to test the property `launchSource`
        should("test launchSource") {
            // uncomment below to test the property
            //modelInstance.launchSource shouldBe ("TODO")
        }

        // to test the property `parameters`
        should("test parameters") {
            // uncomment below to test the property
            //modelInstance.parameters shouldBe ("TODO")
        }

    }
}
