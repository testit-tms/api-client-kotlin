/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ru.testit.kotlin.client.api

import io.kotlintest.specs.ShouldSpec

class ProjectWorkItemsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ProjectWorkItemsApi
        //val apiInstance = ProjectWorkItemsApi()

        // to test apiV2ProjectsProjectIdWorkItemsSearchGroupedPost
        should("test apiV2ProjectsProjectIdWorkItemsSearchGroupedPost") {
            // uncomment below to test apiV2ProjectsProjectIdWorkItemsSearchGroupedPost
            //val projectId : kotlin.String = projectId_example // kotlin.String | Unique or global ID of the project
            //val skip : kotlin.Int = 56 // kotlin.Int | Amount of items to be skipped (offset)
            //val take : kotlin.Int = 56 // kotlin.Int | Amount of items to be taken (limit)
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
            //val searchField : kotlin.String = searchField_example // kotlin.String | Property name for searching
            //val searchValue : kotlin.String = searchValue_example // kotlin.String | Value for searching
            //val workItemGroupGetModel : WorkItemGroupGetModel =  // WorkItemGroupGetModel | 
            //val result : kotlin.collections.List<WorkItemGroupModel> = apiInstance.apiV2ProjectsProjectIdWorkItemsSearchGroupedPost(projectId, skip, take, orderBy, searchField, searchValue, workItemGroupGetModel)
            //result shouldBe ("TODO")
        }

        // to test apiV2ProjectsProjectIdWorkItemsSearchIdPost
        should("test apiV2ProjectsProjectIdWorkItemsSearchIdPost") {
            // uncomment below to test apiV2ProjectsProjectIdWorkItemsSearchIdPost
            //val projectId : kotlin.String = projectId_example // kotlin.String | Unique or global ID of the project
            //val skip : kotlin.Int = 56 // kotlin.Int | Amount of items to be skipped (offset)
            //val take : kotlin.Int = 56 // kotlin.Int | Amount of items to be taken (limit)
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
            //val searchField : kotlin.String = searchField_example // kotlin.String | Property name for searching
            //val searchValue : kotlin.String = searchValue_example // kotlin.String | Value for searching
            //val workItemSelectModel : WorkItemSelectModel =  // WorkItemSelectModel | 
            //val result : kotlin.collections.List<java.util.UUID> = apiInstance.apiV2ProjectsProjectIdWorkItemsSearchIdPost(projectId, skip, take, orderBy, searchField, searchValue, workItemSelectModel)
            //result shouldBe ("TODO")
        }

        // to test apiV2ProjectsProjectIdWorkItemsSearchPost
        should("test apiV2ProjectsProjectIdWorkItemsSearchPost") {
            // uncomment below to test apiV2ProjectsProjectIdWorkItemsSearchPost
            //val projectId : kotlin.String = projectId_example // kotlin.String | Unique or global ID of the project
            //val skip : kotlin.Int = 56 // kotlin.Int | Amount of items to be skipped (offset)
            //val take : kotlin.Int = 56 // kotlin.Int | Amount of items to be taken (limit)
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
            //val searchField : kotlin.String = searchField_example // kotlin.String | Property name for searching
            //val searchValue : kotlin.String = searchValue_example // kotlin.String | Value for searching
            //val workItemSelectModel : WorkItemSelectModel =  // WorkItemSelectModel | 
            //val result : kotlin.collections.List<WorkItemShortModel> = apiInstance.apiV2ProjectsProjectIdWorkItemsSearchPost(projectId, skip, take, orderBy, searchField, searchValue, workItemSelectModel)
            //result shouldBe ("TODO")
        }

        // to test apiV2ProjectsProjectIdWorkItemsTagsGet
        should("test apiV2ProjectsProjectIdWorkItemsTagsGet") {
            // uncomment below to test apiV2ProjectsProjectIdWorkItemsTagsGet
            //val projectId : java.util.UUID = 38400000-8cf0-11bd-b23e-10b96e4ef00d // java.util.UUID | Project internal (UUID) identifier
            //val isDeleted : kotlin.Boolean = true // kotlin.Boolean | 
            //val result : kotlin.collections.List<TagShortModel> = apiInstance.apiV2ProjectsProjectIdWorkItemsTagsGet(projectId, isDeleted)
            //result shouldBe ("TODO")
        }

        // to test getWorkItemsByProjectId
        should("test getWorkItemsByProjectId") {
            // uncomment below to test getWorkItemsByProjectId
            //val projectId : kotlin.String = projectId_example // kotlin.String | Project internal (UUID) or global (integer) identifier
            //val isDeleted : kotlin.Boolean = true // kotlin.Boolean | If result must consist of only actual/deleted work items
            //val tagNames : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | List of tags to filter by
            //val includeIterations : kotlin.Boolean = true // kotlin.Boolean | 
            //val skip : kotlin.Int = 56 // kotlin.Int | Amount of items to be skipped (offset)
            //val take : kotlin.Int = 56 // kotlin.Int | Amount of items to be taken (limit)
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
            //val searchField : kotlin.String = searchField_example // kotlin.String | Property name for searching
            //val searchValue : kotlin.String = searchValue_example // kotlin.String | Value for searching
            //val result : kotlin.collections.List<WorkItemShortModel> = apiInstance.getWorkItemsByProjectId(projectId, isDeleted, tagNames, includeIterations, skip, take, orderBy, searchField, searchValue)
            //result shouldBe ("TODO")
        }

    }
}
