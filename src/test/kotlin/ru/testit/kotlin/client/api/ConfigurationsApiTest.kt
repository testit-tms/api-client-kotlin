/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ru.testit.kotlin.client.api

import io.kotlintest.specs.ShouldSpec

class ConfigurationsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ConfigurationsApi
        //val apiInstance = ConfigurationsApi()

        // to test apiV2ConfigurationsCreateByParametersPost
        should("test apiV2ConfigurationsCreateByParametersPost") {
            // uncomment below to test apiV2ConfigurationsCreateByParametersPost
            //val configurationByParametersModel : ConfigurationByParametersModel =  // ConfigurationByParametersModel | 
            //val result : kotlin.collections.List<java.util.UUID> = apiInstance.apiV2ConfigurationsCreateByParametersPost(configurationByParametersModel)
            //result shouldBe ("TODO")
        }

        // to test apiV2ConfigurationsDeleteBulkPost
        should("test apiV2ConfigurationsDeleteBulkPost") {
            // uncomment below to test apiV2ConfigurationsDeleteBulkPost
            //val configurationSelectModel : ConfigurationSelectModel =  // ConfigurationSelectModel | 
            //val result : kotlin.Int = apiInstance.apiV2ConfigurationsDeleteBulkPost(configurationSelectModel)
            //result shouldBe ("TODO")
        }

        // to test apiV2ConfigurationsIdDelete
        should("test apiV2ConfigurationsIdDelete") {
            // uncomment below to test apiV2ConfigurationsIdDelete
            //val id : kotlin.String = id_example // kotlin.String | Unique or global ID of the configuration
            //apiInstance.apiV2ConfigurationsIdDelete(id)
        }

        // to test apiV2ConfigurationsIdPatch
        should("test apiV2ConfigurationsIdPatch") {
            // uncomment below to test apiV2ConfigurationsIdPatch
            //val id : java.util.UUID = 38400000-8cf0-11bd-b23e-10b96e4ef00d // java.util.UUID | Unique ID of the configuration
            //val operation : kotlin.collections.List<Operation> =  // kotlin.collections.List<Operation> | 
            //apiInstance.apiV2ConfigurationsIdPatch(id, operation)
        }

        // to test apiV2ConfigurationsIdPurgePost
        should("test apiV2ConfigurationsIdPurgePost") {
            // uncomment below to test apiV2ConfigurationsIdPurgePost
            //val id : kotlin.String = id_example // kotlin.String | Unique or global ID of the configuration
            //apiInstance.apiV2ConfigurationsIdPurgePost(id)
        }

        // to test apiV2ConfigurationsIdRestorePost
        should("test apiV2ConfigurationsIdRestorePost") {
            // uncomment below to test apiV2ConfigurationsIdRestorePost
            //val id : kotlin.String = id_example // kotlin.String | Unique or global ID of the configuration
            //apiInstance.apiV2ConfigurationsIdRestorePost(id)
        }

        // to test apiV2ConfigurationsPurgeBulkPost
        should("test apiV2ConfigurationsPurgeBulkPost") {
            // uncomment below to test apiV2ConfigurationsPurgeBulkPost
            //val configurationSelectModel : ConfigurationSelectModel =  // ConfigurationSelectModel | 
            //apiInstance.apiV2ConfigurationsPurgeBulkPost(configurationSelectModel)
        }

        // to test apiV2ConfigurationsPut
        should("test apiV2ConfigurationsPut") {
            // uncomment below to test apiV2ConfigurationsPut
            //val configurationPutModel : ConfigurationPutModel =  // ConfigurationPutModel | 
            //apiInstance.apiV2ConfigurationsPut(configurationPutModel)
        }

        // to test apiV2ConfigurationsRestoreBulkPost
        should("test apiV2ConfigurationsRestoreBulkPost") {
            // uncomment below to test apiV2ConfigurationsRestoreBulkPost
            //val configurationSelectModel : ConfigurationSelectModel =  // ConfigurationSelectModel | 
            //val result : kotlin.Int = apiInstance.apiV2ConfigurationsRestoreBulkPost(configurationSelectModel)
            //result shouldBe ("TODO")
        }

        // to test apiV2ConfigurationsSearchPost
        should("test apiV2ConfigurationsSearchPost") {
            // uncomment below to test apiV2ConfigurationsSearchPost
            //val skip : kotlin.Int = 56 // kotlin.Int | Amount of items to be skipped (offset)
            //val take : kotlin.Int = 56 // kotlin.Int | Amount of items to be taken (limit)
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
            //val searchField : kotlin.String = searchField_example // kotlin.String | Property name for searching
            //val searchValue : kotlin.String = searchValue_example // kotlin.String | Value for searching
            //val configurationFilterModel : ConfigurationFilterModel =  // ConfigurationFilterModel | Model containing all the filters
            //val result : kotlin.collections.List<ConfigurationModel> = apiInstance.apiV2ConfigurationsSearchPost(skip, take, orderBy, searchField, searchValue, configurationFilterModel)
            //result shouldBe ("TODO")
        }

        // to test createConfiguration
        should("test createConfiguration") {
            // uncomment below to test createConfiguration
            //val configurationPostModel : ConfigurationPostModel =  // ConfigurationPostModel | 
            //val result : ConfigurationModel = apiInstance.createConfiguration(configurationPostModel)
            //result shouldBe ("TODO")
        }

        // to test getConfigurationById
        should("test getConfigurationById") {
            // uncomment below to test getConfigurationById
            //val id : kotlin.String = 3fa85f64-5717-4562-b3fc-2c963f66afa6 // kotlin.String | Configuration internal (guid format) or global (integer format) identifier
            //val result : ConfigurationModel = apiInstance.getConfigurationById(id)
            //result shouldBe ("TODO")
        }

    }
}
