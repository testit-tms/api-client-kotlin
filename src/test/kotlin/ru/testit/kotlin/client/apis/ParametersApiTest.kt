/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ru.testit.kotlin.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import ru.testit.kotlin.client.apis.ParametersApi
import ru.testit.kotlin.client.models.ParameterFilterModel
import ru.testit.kotlin.client.models.ParameterGroupModel
import ru.testit.kotlin.client.models.ParameterModel
import ru.testit.kotlin.client.models.ParameterPostModel
import ru.testit.kotlin.client.models.ParameterPutModel
import ru.testit.kotlin.client.models.ProblemDetails
import ru.testit.kotlin.client.models.ValidationProblemDetails

class ParametersApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ParametersApi
        //val apiInstance = ParametersApi()

        // to test apiV2ParametersBulkPost
        should("test apiV2ParametersBulkPost") {
            // uncomment below to test apiV2ParametersBulkPost
            //val parameterPostModel : kotlin.collections.List<ParameterPostModel> =  // kotlin.collections.List<ParameterPostModel> | 
            //val result : kotlin.collections.List<ParameterModel> = apiInstance.apiV2ParametersBulkPost(parameterPostModel)
            //result shouldBe ("TODO")
        }

        // to test apiV2ParametersBulkPut
        should("test apiV2ParametersBulkPut") {
            // uncomment below to test apiV2ParametersBulkPut
            //val parameterPutModel : kotlin.collections.List<ParameterPutModel> =  // kotlin.collections.List<ParameterPutModel> | 
            //apiInstance.apiV2ParametersBulkPut(parameterPutModel)
        }

        // to test apiV2ParametersGroupsGet
        should("test apiV2ParametersGroupsGet") {
            // uncomment below to test apiV2ParametersGroupsGet
            //val isDeleted : kotlin.Boolean = true // kotlin.Boolean | 
            //val parameterKeyIds : kotlin.collections.Set<java.util.UUID> =  // kotlin.collections.Set<java.util.UUID> | 
            //val skip : kotlin.Int = 56 // kotlin.Int | Amount of items to be skipped (offset)
            //val take : kotlin.Int = 56 // kotlin.Int | Amount of items to be taken (limit)
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
            //val searchField : kotlin.String = searchField_example // kotlin.String | Property name for searching
            //val searchValue : kotlin.String = searchValue_example // kotlin.String | Value for searching
            //val result : kotlin.collections.List<ParameterGroupModel> = apiInstance.apiV2ParametersGroupsGet(isDeleted, parameterKeyIds, skip, take, orderBy, searchField, searchValue)
            //result shouldBe ("TODO")
        }

        // to test apiV2ParametersKeyNameNameExistsGet
        should("test apiV2ParametersKeyNameNameExistsGet") {
            // uncomment below to test apiV2ParametersKeyNameNameExistsGet
            //val name : kotlin.String = name_example // kotlin.String | 
            //val result : kotlin.Boolean = apiInstance.apiV2ParametersKeyNameNameExistsGet(name)
            //result shouldBe ("TODO")
        }

        // to test apiV2ParametersKeyValuesGet
        should("test apiV2ParametersKeyValuesGet") {
            // uncomment below to test apiV2ParametersKeyValuesGet
            //val key : kotlin.String = SomeKey // kotlin.String | Parameter key (string format)
            //val result : kotlin.collections.List<kotlin.String> = apiInstance.apiV2ParametersKeyValuesGet(key)
            //result shouldBe ("TODO")
        }

        // to test apiV2ParametersKeysGet
        should("test apiV2ParametersKeysGet") {
            // uncomment below to test apiV2ParametersKeysGet
            //val result : kotlin.collections.List<kotlin.String> = apiInstance.apiV2ParametersKeysGet()
            //result shouldBe ("TODO")
        }

        // to test apiV2ParametersSearchGroupsPost
        should("test apiV2ParametersSearchGroupsPost") {
            // uncomment below to test apiV2ParametersSearchGroupsPost
            //val skip : kotlin.Int = 56 // kotlin.Int | Amount of items to be skipped (offset)
            //val take : kotlin.Int = 56 // kotlin.Int | Amount of items to be taken (limit)
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
            //val searchField : kotlin.String = searchField_example // kotlin.String | Property name for searching
            //val searchValue : kotlin.String = searchValue_example // kotlin.String | Value for searching
            //val parameterFilterModel : ParameterFilterModel =  // ParameterFilterModel | 
            //val result : kotlin.collections.List<ParameterGroupModel> = apiInstance.apiV2ParametersSearchGroupsPost(skip, take, orderBy, searchField, searchValue, parameterFilterModel)
            //result shouldBe ("TODO")
        }

        // to test apiV2ParametersSearchPost
        should("test apiV2ParametersSearchPost") {
            // uncomment below to test apiV2ParametersSearchPost
            //val skip : kotlin.Int = 56 // kotlin.Int | Amount of items to be skipped (offset)
            //val take : kotlin.Int = 56 // kotlin.Int | Amount of items to be taken (limit)
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
            //val searchField : kotlin.String = searchField_example // kotlin.String | Property name for searching
            //val searchValue : kotlin.String = searchValue_example // kotlin.String | Value for searching
            //val parameterFilterModel : ParameterFilterModel =  // ParameterFilterModel | 
            //val result : kotlin.collections.List<ParameterModel> = apiInstance.apiV2ParametersSearchPost(skip, take, orderBy, searchField, searchValue, parameterFilterModel)
            //result shouldBe ("TODO")
        }

        // to test createParameter
        should("test createParameter") {
            // uncomment below to test createParameter
            //val parameterPostModel : ParameterPostModel =  // ParameterPostModel | 
            //val result : ParameterModel = apiInstance.createParameter(parameterPostModel)
            //result shouldBe ("TODO")
        }

        // to test deleteByName
        should("test deleteByName") {
            // uncomment below to test deleteByName
            //val name : kotlin.String = name_example // kotlin.String | Name of the parameter
            //apiInstance.deleteByName(name)
        }

        // to test deleteByParameterKeyId
        should("test deleteByParameterKeyId") {
            // uncomment below to test deleteByParameterKeyId
            //val keyId : java.util.UUID = 38400000-8cf0-11bd-b23e-10b96e4ef00d // java.util.UUID | Identifier of the parameter key
            //apiInstance.deleteByParameterKeyId(keyId)
        }

        // to test deleteParameter
        should("test deleteParameter") {
            // uncomment below to test deleteParameter
            //val id : java.util.UUID = 38400000-8cf0-11bd-b23e-10b96e4ef00d // java.util.UUID | Parameter internal (UUID) identifier
            //apiInstance.deleteParameter(id)
        }

        // to test getAllParameters
        should("test getAllParameters") {
            // uncomment below to test getAllParameters
            //val isDeleted : kotlin.Boolean = true // kotlin.Boolean | If result must consist of only actual/deleted parameters
            //val skip : kotlin.Int = 56 // kotlin.Int | Amount of items to be skipped (offset)
            //val take : kotlin.Int = 56 // kotlin.Int | Amount of items to be taken (limit)
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
            //val searchField : kotlin.String = searchField_example // kotlin.String | Property name for searching
            //val searchValue : kotlin.String = searchValue_example // kotlin.String | Value for searching
            //val result : kotlin.collections.List<ParameterModel> = apiInstance.getAllParameters(isDeleted, skip, take, orderBy, searchField, searchValue)
            //result shouldBe ("TODO")
        }

        // to test getParameterById
        should("test getParameterById") {
            // uncomment below to test getParameterById
            //val id : java.util.UUID = 38400000-8cf0-11bd-b23e-10b96e4ef00d // java.util.UUID | Parameter internal (UUID) identifier
            //val result : ParameterModel = apiInstance.getParameterById(id)
            //result shouldBe ("TODO")
        }

        // to test updateParameter
        should("test updateParameter") {
            // uncomment below to test updateParameter
            //val parameterPutModel : ParameterPutModel =  // ParameterPutModel | 
            //apiInstance.updateParameter(parameterPutModel)
        }

    }
}
