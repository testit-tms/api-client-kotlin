/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ru.testit.kotlin.client.apis

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import ru.testit.kotlin.client.apis.AutoTestsApi
import ru.testit.kotlin.client.models.AutoTestAverageDurationModel
import ru.testit.kotlin.client.models.AutoTestModel
import ru.testit.kotlin.client.models.AutoTestPostModel
import ru.testit.kotlin.client.models.AutoTestPutModel
import ru.testit.kotlin.client.models.AutotestHistoricalResultSelectModel
import ru.testit.kotlin.client.models.AutotestResultHistoricalGetModel
import ru.testit.kotlin.client.models.AutotestsSelectModel
import ru.testit.kotlin.client.models.FlakyBulkModel
import ru.testit.kotlin.client.models.Operation
import ru.testit.kotlin.client.models.ProblemDetails
import ru.testit.kotlin.client.models.TestResultChronologyModel
import ru.testit.kotlin.client.models.TestResultHistoryReportModel
import ru.testit.kotlin.client.models.TestRunShortModel
import ru.testit.kotlin.client.models.ValidationProblemDetails
import ru.testit.kotlin.client.models.WorkItemIdModel
import ru.testit.kotlin.client.models.WorkItemIdentifierModel

class AutoTestsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of AutoTestsApi
        //val apiInstance = AutoTestsApi()

        // to test apiV2AutoTestsFlakyBulkPost
        should("test apiV2AutoTestsFlakyBulkPost") {
            // uncomment below to test apiV2AutoTestsFlakyBulkPost
            //val skip : kotlin.Int = 56 // kotlin.Int | Amount of items to be skipped (offset)
            //val take : kotlin.Int = 56 // kotlin.Int | Amount of items to be taken (limit)
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
            //val searchField : kotlin.String = searchField_example // kotlin.String | Property name for searching
            //val searchValue : kotlin.String = searchValue_example // kotlin.String | Value for searching
            //val flakyBulkModel : FlakyBulkModel =  // FlakyBulkModel | 
            //apiInstance.apiV2AutoTestsFlakyBulkPost(skip, take, orderBy, searchField, searchValue, flakyBulkModel)
        }

        // to test apiV2AutoTestsIdPatch
        should("test apiV2AutoTestsIdPatch") {
            // uncomment below to test apiV2AutoTestsIdPatch
            //val id : java.util.UUID = 38400000-8cf0-11bd-b23e-10b96e4ef00d // java.util.UUID | Global Id of auto test
            //val operation : kotlin.collections.List<Operation> =  // kotlin.collections.List<Operation> | 
            //apiInstance.apiV2AutoTestsIdPatch(id, operation)
        }

        // to test apiV2AutoTestsIdTestResultsSearchPost
        should("test apiV2AutoTestsIdTestResultsSearchPost") {
            // uncomment below to test apiV2AutoTestsIdTestResultsSearchPost
            //val id : kotlin.String = id_example // kotlin.String | Autotest identifier
            //val skip : kotlin.Int = 56 // kotlin.Int | Amount of items to be skipped (offset)
            //val take : kotlin.Int = 56 // kotlin.Int | Amount of items to be taken (limit)
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
            //val searchField : kotlin.String = searchField_example // kotlin.String | Property name for searching
            //val searchValue : kotlin.String = searchValue_example // kotlin.String | Value for searching
            //val autotestHistoricalResultSelectModel : AutotestHistoricalResultSelectModel =  // AutotestHistoricalResultSelectModel | 
            //val result : kotlin.collections.List<AutotestResultHistoricalGetModel> = apiInstance.apiV2AutoTestsIdTestResultsSearchPost(id, skip, take, orderBy, searchField, searchValue, autotestHistoricalResultSelectModel)
            //result shouldBe ("TODO")
        }

        // to test apiV2AutoTestsIdWorkItemsChangedIdGet
        should("test apiV2AutoTestsIdWorkItemsChangedIdGet") {
            // uncomment below to test apiV2AutoTestsIdWorkItemsChangedIdGet
            //val id : java.util.UUID = 38400000-8cf0-11bd-b23e-10b96e4ef00d // java.util.UUID | 
            //val result : kotlin.collections.List<java.util.UUID> = apiInstance.apiV2AutoTestsIdWorkItemsChangedIdGet(id)
            //result shouldBe ("TODO")
        }

        // to test apiV2AutoTestsIdWorkItemsChangedWorkItemIdApprovePost
        should("test apiV2AutoTestsIdWorkItemsChangedWorkItemIdApprovePost") {
            // uncomment below to test apiV2AutoTestsIdWorkItemsChangedWorkItemIdApprovePost
            //val id : java.util.UUID = 38400000-8cf0-11bd-b23e-10b96e4ef00d // java.util.UUID | 
            //val workItemId : java.util.UUID = 38400000-8cf0-11bd-b23e-10b96e4ef00d // java.util.UUID | 
            //apiInstance.apiV2AutoTestsIdWorkItemsChangedWorkItemIdApprovePost(id, workItemId)
        }

        // to test apiV2AutoTestsSearchPost
        should("test apiV2AutoTestsSearchPost") {
            // uncomment below to test apiV2AutoTestsSearchPost
            //val skip : kotlin.Int = 56 // kotlin.Int | Amount of items to be skipped (offset)
            //val take : kotlin.Int = 56 // kotlin.Int | Amount of items to be taken (limit)
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
            //val searchField : kotlin.String = searchField_example // kotlin.String | Property name for searching
            //val searchValue : kotlin.String = searchValue_example // kotlin.String | Value for searching
            //val autotestsSelectModel : AutotestsSelectModel =  // AutotestsSelectModel | 
            //val result : kotlin.collections.List<AutoTestModel> = apiInstance.apiV2AutoTestsSearchPost(skip, take, orderBy, searchField, searchValue, autotestsSelectModel)
            //result shouldBe ("TODO")
        }

        // to test createAutoTest
        should("test createAutoTest") {
            // uncomment below to test createAutoTest
            //val autoTestPostModel : AutoTestPostModel =  // AutoTestPostModel | 
            //val result : AutoTestModel = apiInstance.createAutoTest(autoTestPostModel)
            //result shouldBe ("TODO")
        }

        // to test createMultiple
        should("test createMultiple") {
            // uncomment below to test createMultiple
            //val autoTestPostModel : kotlin.collections.List<AutoTestPostModel> =  // kotlin.collections.List<AutoTestPostModel> | 
            //val result : kotlin.collections.List<AutoTestModel> = apiInstance.createMultiple(autoTestPostModel)
            //result shouldBe ("TODO")
        }

        // to test deleteAutoTest
        should("test deleteAutoTest") {
            // uncomment below to test deleteAutoTest
            //val id : kotlin.String = id_example // kotlin.String | Autotest internal (UUID) or global (integer) identifier
            //apiInstance.deleteAutoTest(id)
        }

        // to test deleteAutoTestLinkFromWorkItem
        should("test deleteAutoTestLinkFromWorkItem") {
            // uncomment below to test deleteAutoTestLinkFromWorkItem
            //val id : kotlin.String = id_example // kotlin.String | Autotest internal (UUID) or global (integer) identifier
            //val workItemId : kotlin.String = workItemId_example // kotlin.String | Work item internal (UUID) or global (integer) identifier
            //apiInstance.deleteAutoTestLinkFromWorkItem(id, workItemId)
        }

        // to test getAllAutoTests
        should("test getAllAutoTests") {
            // uncomment below to test getAllAutoTests
            //val projectId : java.util.UUID = 38400000-8cf0-11bd-b23e-10b96e4ef00d // java.util.UUID | Project internal ID
            //val externalId : kotlin.String = externalId_example // kotlin.String | Autotest external ID
            //val globalId : kotlin.Long = 789 // kotlin.Long | Autotest global ID
            //val namespace : kotlin.String = namespace_example // kotlin.String | Namespace in which autotest is located
            //val isNamespaceNull : kotlin.Boolean = true // kotlin.Boolean | OBSOLETE: Use `includeEmptyNamespaces` instead
            //val includeEmptyNamespaces : kotlin.Boolean = true // kotlin.Boolean | If result must contain autotests without namespace
            //val className : kotlin.String = className_example // kotlin.String | Name of class in which autotest is located
            //val isClassnameNull : kotlin.Boolean = true // kotlin.Boolean | OBSOLETE: Use `includeEmptyClassNames` instead
            //val includeEmptyClassNames : kotlin.Boolean = true // kotlin.Boolean | If result must contain autotests without class
            //val isDeleted : kotlin.Boolean = true // kotlin.Boolean | OBSOLETE: Use `deleted` instead
            //val deleted : kotlin.Boolean = true // kotlin.Boolean | Is autotest deleted
            //val labels : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | Include only autotests with provided labels
            //val stabilityMinimal : kotlin.Int = 56 // kotlin.Int | OBSOLETE: Use `minStability` instead
            //val minStability : kotlin.Int = 56 // kotlin.Int | Minimum stability value of autotest
            //val stabilityMaximal : kotlin.Int = 56 // kotlin.Int | OBSOLETE: Use `maxStability` instead
            //val maxStability : kotlin.Int = 56 // kotlin.Int | Maximum stability value of autotest
            //val isFlaky : kotlin.Boolean = true // kotlin.Boolean | OBSOLETE: Use `flaky` instead
            //val flaky : kotlin.Boolean = true // kotlin.Boolean | Is autotest marked as \"Flaky\"
            //val includeSteps : kotlin.Boolean = true // kotlin.Boolean | If result must also include autotest steps
            //val includeLabels : kotlin.Boolean = true // kotlin.Boolean | If result must also include autotest labels
            //val externalKey : kotlin.String = externalKey_example // kotlin.String | External key of autotest
            //val skip : kotlin.Int = 56 // kotlin.Int | Amount of items to be skipped (offset)
            //val take : kotlin.Int = 56 // kotlin.Int | Amount of items to be taken (limit)
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
            //val searchField : kotlin.String = searchField_example // kotlin.String | Property name for searching
            //val searchValue : kotlin.String = searchValue_example // kotlin.String | Value for searching
            //val result : kotlin.collections.List<AutoTestModel> = apiInstance.getAllAutoTests(projectId, externalId, globalId, namespace, isNamespaceNull, includeEmptyNamespaces, className, isClassnameNull, includeEmptyClassNames, isDeleted, deleted, labels, stabilityMinimal, minStability, stabilityMaximal, maxStability, isFlaky, flaky, includeSteps, includeLabels, externalKey, skip, take, orderBy, searchField, searchValue)
            //result shouldBe ("TODO")
        }

        // to test getAutoTestAverageDuration
        should("test getAutoTestAverageDuration") {
            // uncomment below to test getAutoTestAverageDuration
            //val id : kotlin.String = id_example // kotlin.String | Autotest internal (UUID) or global (integer) identifier
            //val result : AutoTestAverageDurationModel = apiInstance.getAutoTestAverageDuration(id)
            //result shouldBe ("TODO")
        }

        // to test getAutoTestById
        should("test getAutoTestById") {
            // uncomment below to test getAutoTestById
            //val id : kotlin.String = id_example // kotlin.String | Autotest internal (UUID) or global (integer) identifier
            //val result : AutoTestModel = apiInstance.getAutoTestById(id)
            //result shouldBe ("TODO")
        }

        // to test getAutoTestChronology
        should("test getAutoTestChronology") {
            // uncomment below to test getAutoTestChronology
            //val id : kotlin.String = id_example // kotlin.String | Autotest internal (UUID) or global (integer) identifier
            //val result : kotlin.collections.List<TestResultChronologyModel> = apiInstance.getAutoTestChronology(id)
            //result shouldBe ("TODO")
        }

        // to test getTestRuns
        should("test getTestRuns") {
            // uncomment below to test getTestRuns
            //val id : kotlin.String = id_example // kotlin.String | Autotest internal (UUID) or global (integer) identifier
            //val result : kotlin.collections.List<TestRunShortModel> = apiInstance.getTestRuns(id)
            //result shouldBe ("TODO")
        }

        // to test getWorkItemResults
        should("test getWorkItemResults") {
            // uncomment below to test getWorkItemResults
            //val id : kotlin.String = id_example // kotlin.String | 
            //val from : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Take results from this date
            //val to : java.time.OffsetDateTime = 2013-10-20T19:20:30+01:00 // java.time.OffsetDateTime | Take results until this date
            //val configurationIds : kotlin.collections.List<java.util.UUID> =  // kotlin.collections.List<java.util.UUID> | Identifiers of test result configurations
            //val testPlanIds : kotlin.collections.List<java.util.UUID> =  // kotlin.collections.List<java.util.UUID> | Identifiers of test plans which contain test results
            //val userIds : kotlin.collections.List<java.util.UUID> =  // kotlin.collections.List<java.util.UUID> | Identifiers of users who set test results
            //val outcomes : kotlin.collections.List<kotlin.String> =  // kotlin.collections.List<kotlin.String> | List of outcomes of test results
            //val isAutomated : kotlin.Boolean = true // kotlin.Boolean | OBSOLETE: Use `Automated` instead
            //val automated : kotlin.Boolean = true // kotlin.Boolean | If result must consist of only manual/automated test results
            //val testRunIds : kotlin.collections.List<java.util.UUID> =  // kotlin.collections.List<java.util.UUID> | Identifiers of test runs which contain test results
            //val skip : kotlin.Int = 56 // kotlin.Int | Amount of items to be skipped (offset)
            //val take : kotlin.Int = 56 // kotlin.Int | Amount of items to be taken (limit)
            //val orderBy : kotlin.String = orderBy_example // kotlin.String | SQL-like  ORDER BY statement (column1 ASC|DESC , column2 ASC|DESC)
            //val searchField : kotlin.String = searchField_example // kotlin.String | Property name for searching
            //val searchValue : kotlin.String = searchValue_example // kotlin.String | Value for searching
            //val result : kotlin.collections.List<TestResultHistoryReportModel> = apiInstance.getWorkItemResults(id, from, to, configurationIds, testPlanIds, userIds, outcomes, isAutomated, automated, testRunIds, skip, take, orderBy, searchField, searchValue)
            //result shouldBe ("TODO")
        }

        // to test getWorkItemsLinkedToAutoTest
        should("test getWorkItemsLinkedToAutoTest") {
            // uncomment below to test getWorkItemsLinkedToAutoTest
            //val id : kotlin.String = id_example // kotlin.String | Specifies the autotest entity ID.   You can copy it from the address bar in your web browser or use autotest GUID.
            //val isDeleted : kotlin.Boolean = true // kotlin.Boolean | Specifies that a test is deleted or still relevant.
            //val isWorkItemDeleted : kotlin.Boolean = true // kotlin.Boolean | OBSOLETE: Use `isDeleted` instead
            //val result : kotlin.collections.List<WorkItemIdentifierModel> = apiInstance.getWorkItemsLinkedToAutoTest(id, isDeleted, isWorkItemDeleted)
            //result shouldBe ("TODO")
        }

        // to test linkAutoTestToWorkItem
        should("test linkAutoTestToWorkItem") {
            // uncomment below to test linkAutoTestToWorkItem
            //val id : kotlin.String = id_example // kotlin.String | Autotest internal (UUID) or global (integer) identifier
            //val workItemIdModel : WorkItemIdModel =  // WorkItemIdModel | 
            //apiInstance.linkAutoTestToWorkItem(id, workItemIdModel)
        }

        // to test updateAutoTest
        should("test updateAutoTest") {
            // uncomment below to test updateAutoTest
            //val autoTestPutModel : AutoTestPutModel =  // AutoTestPutModel | 
            //apiInstance.updateAutoTest(autoTestPutModel)
        }

        // to test updateMultiple
        should("test updateMultiple") {
            // uncomment below to test updateMultiple
            //val autoTestPutModel : kotlin.collections.List<AutoTestPutModel> =  // kotlin.collections.List<AutoTestPutModel> | 
            //apiInstance.updateMultiple(autoTestPutModel)
        }

    }
}
