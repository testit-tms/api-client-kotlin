/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ru.testit.kotlin.client.models

import ru.testit.kotlin.client.models.LastTestResultModel
import ru.testit.kotlin.client.models.TestPointStatus
import ru.testit.kotlin.client.models.TestStatusApiResult
import ru.testit.kotlin.client.models.WorkItemPriorityModel
import ru.testit.kotlin.client.models.WorkItemSourceTypeModel
import ru.testit.kotlin.client.models.WorkItemState

import com.squareup.moshi.Json
import com.squareup.moshi.JsonClass

/**
 * 
 *
 * @param id Unique ID of the test point
 * @param createdDate Creation date of the test point
 * @param createdById Unique ID of the test point creator
 * @param attributes Collection of attributes of work item the test point represents
 * @param tags Collection of the test point tags
 * @param links Collection of the test point links
 * @param testSuiteId Unique ID of test suite the test point assigned to
 * @param testSuiteName Name of the test suite
 * @param workItemId Unique ID of work item the test point represents
 * @param workItemGlobalId Global ID of work item the test point represents
 * @param workItemVersionId Unique ID of work item version the test point represents
 * @param workItemVersionNumber Number of work item version the test point represents
 * @param status Status of the test point
 * @param statusModel Status of the test point
 * @param priority Priority of the test point
 * @param sourceType Source type of the test point
 * @param isAutomated Indicates if the test point represents an autotest
 * @param name Name of the test point
 * @param configurationId Unique ID of the test point configuration
 * @param duration Duration of the test point
 * @param sectionId Unique ID of section where work item the test point represents is located
 * @param projectId Unique ID of the test point project
 * @param iterationId Unique ID of work item iteration the test point represents
 * @param workItemState Work item state
 * @param workItemCreatedById Unique ID of the work item creator
 * @param workItemCreatedDate Creation date of work item
 * @param modifiedDate Last modification date of the test point
 * @param modifiedById Unique ID of the test point last editor
 * @param testerId Unique ID of the test point assigned user
 * @param parameters Collection of the test point parameters
 * @param workItemMedianDuration Median duration of work item the test point represents
 * @param sectionName Name of section where work item the test point represents is located
 * @param lastTestResult Model of the test point last test result
 * @param workItemModifiedById Unique ID of the work item last editor
 * @param workItemModifiedDate Modified date of work item
 */


data class TestPointShortResponseModel (

    /* Unique ID of the test point */
    @Json(name = "id")
    val id: java.util.UUID,

    /* Creation date of the test point */
    @Json(name = "createdDate")
    val createdDate: java.time.OffsetDateTime,

    /* Unique ID of the test point creator */
    @Json(name = "createdById")
    val createdById: java.util.UUID,

    /* Collection of attributes of work item the test point represents */
    @Json(name = "attributes")
    val attributes: kotlin.collections.Map<kotlin.String, kotlin.Any>,

    /* Collection of the test point tags */
    @Json(name = "tags")
    val tags: kotlin.collections.List<kotlin.String>,

    /* Collection of the test point links */
    @Json(name = "links")
    val links: kotlin.collections.List<kotlin.String>,

    /* Unique ID of test suite the test point assigned to */
    @Json(name = "testSuiteId")
    val testSuiteId: java.util.UUID,

    /* Name of the test suite */
    @Json(name = "testSuiteName")
    val testSuiteName: kotlin.String,

    /* Unique ID of work item the test point represents */
    @Json(name = "workItemId")
    val workItemId: java.util.UUID,

    /* Global ID of work item the test point represents */
    @Json(name = "workItemGlobalId")
    val workItemGlobalId: kotlin.Long,

    /* Unique ID of work item version the test point represents */
    @Json(name = "workItemVersionId")
    val workItemVersionId: java.util.UUID,

    /* Number of work item version the test point represents */
    @Json(name = "workItemVersionNumber")
    val workItemVersionNumber: kotlin.Int,

    /* Status of the test point */
    @Json(name = "status")
    @Deprecated(message = "This property is deprecated.")
    val status: TestPointStatus,

    /* Status of the test point */
    @Json(name = "statusModel")
    val statusModel: TestStatusApiResult,

    /* Priority of the test point */
    @Json(name = "priority")
    val priority: WorkItemPriorityModel,

    /* Source type of the test point */
    @Json(name = "sourceType")
    val sourceType: WorkItemSourceTypeModel,

    /* Indicates if the test point represents an autotest */
    @Json(name = "isAutomated")
    val isAutomated: kotlin.Boolean,

    /* Name of the test point */
    @Json(name = "name")
    val name: kotlin.String,

    /* Unique ID of the test point configuration */
    @Json(name = "configurationId")
    val configurationId: java.util.UUID,

    /* Duration of the test point */
    @Json(name = "duration")
    val duration: kotlin.Int,

    /* Unique ID of section where work item the test point represents is located */
    @Json(name = "sectionId")
    val sectionId: java.util.UUID,

    /* Unique ID of the test point project */
    @Json(name = "projectId")
    val projectId: java.util.UUID,

    /* Unique ID of work item iteration the test point represents */
    @Json(name = "iterationId")
    val iterationId: java.util.UUID,

    /* Work item state */
    @Json(name = "workItemState")
    val workItemState: WorkItemState,

    /* Unique ID of the work item creator */
    @Json(name = "workItemCreatedById")
    val workItemCreatedById: java.util.UUID,

    /* Creation date of work item */
    @Json(name = "workItemCreatedDate")
    val workItemCreatedDate: java.time.OffsetDateTime,

    /* Last modification date of the test point */
    @Json(name = "modifiedDate")
    val modifiedDate: java.time.OffsetDateTime? = null,

    /* Unique ID of the test point last editor */
    @Json(name = "modifiedById")
    val modifiedById: java.util.UUID? = null,

    /* Unique ID of the test point assigned user */
    @Json(name = "testerId")
    val testerId: java.util.UUID? = null,

    /* Collection of the test point parameters */
    @Json(name = "parameters")
    val parameters: kotlin.collections.Map<kotlin.String, kotlin.String>? = null,

    /* Median duration of work item the test point represents */
    @Json(name = "workItemMedianDuration")
    val workItemMedianDuration: kotlin.Long? = null,

    /* Name of section where work item the test point represents is located */
    @Json(name = "sectionName")
    val sectionName: kotlin.String? = null,

    /* Model of the test point last test result */
    @Json(name = "lastTestResult")
    val lastTestResult: LastTestResultModel? = null,

    /* Unique ID of the work item last editor */
    @Json(name = "workItemModifiedById")
    val workItemModifiedById: java.util.UUID? = null,

    /* Modified date of work item */
    @Json(name = "workItemModifiedDate")
    val workItemModifiedDate: java.time.OffsetDateTime? = null

) {


}

