/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package ru.testit.kotlin.client.apis

import java.io.IOException
import okhttp3.Call
import okhttp3.HttpUrl

import ru.testit.kotlin.client.models.ProblemDetails
import ru.testit.kotlin.client.models.TestPlanTestPointsAutoTestsRerunApiModel
import ru.testit.kotlin.client.models.TestPlanTestPointsAutoTestsRunApiModel
import ru.testit.kotlin.client.models.TestRunNameApiResult
import ru.testit.kotlin.client.models.ValidationProblemDetails

import com.squareup.moshi.Json

import ru.testit.kotlin.client.infrastructure.ApiClient
import ru.testit.kotlin.client.infrastructure.ApiResponse
import ru.testit.kotlin.client.infrastructure.ClientException
import ru.testit.kotlin.client.infrastructure.ClientError
import ru.testit.kotlin.client.infrastructure.ServerException
import ru.testit.kotlin.client.infrastructure.ServerError
import ru.testit.kotlin.client.infrastructure.MultiValueMap
import ru.testit.kotlin.client.infrastructure.PartConfig
import ru.testit.kotlin.client.infrastructure.RequestConfig
import ru.testit.kotlin.client.infrastructure.RequestMethod
import ru.testit.kotlin.client.infrastructure.ResponseType
import ru.testit.kotlin.client.infrastructure.Success
import ru.testit.kotlin.client.infrastructure.toMultiValue

class ProjectTestPlanTestPointsApi(basePath: kotlin.String = defaultBasePath, client: Call.Factory = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "http://localhost")
        }
    }

    /**
     * POST /api/v2/projects/{projectId}/test-plans/{testPlanId}/test-points/autotests/rerun
     * Rerun autotests.
     * 
     * @param projectId Internal (UUID) or global (integer) identifier
     * @param testPlanId 
     * @param testPlanTestPointsAutoTestsRerunApiModel  (optional)
     * @return void
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRerunPost(projectId: kotlin.String, testPlanId: java.util.UUID, testPlanTestPointsAutoTestsRerunApiModel: TestPlanTestPointsAutoTestsRerunApiModel? = null) : Unit {
        val localVarResponse = apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRerunPostWithHttpInfo(projectId = projectId, testPlanId = testPlanId, testPlanTestPointsAutoTestsRerunApiModel = testPlanTestPointsAutoTestsRerunApiModel)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /api/v2/projects/{projectId}/test-plans/{testPlanId}/test-points/autotests/rerun
     * Rerun autotests.
     * 
     * @param projectId Internal (UUID) or global (integer) identifier
     * @param testPlanId 
     * @param testPlanTestPointsAutoTestsRerunApiModel  (optional)
     * @return ApiResponse<Unit?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRerunPostWithHttpInfo(projectId: kotlin.String, testPlanId: java.util.UUID, testPlanTestPointsAutoTestsRerunApiModel: TestPlanTestPointsAutoTestsRerunApiModel?) : ApiResponse<Unit?> {
        val localVariableConfig = apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRerunPostRequestConfig(projectId = projectId, testPlanId = testPlanId, testPlanTestPointsAutoTestsRerunApiModel = testPlanTestPointsAutoTestsRerunApiModel)

        return request<TestPlanTestPointsAutoTestsRerunApiModel, Unit>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRerunPost
     *
     * @param projectId Internal (UUID) or global (integer) identifier
     * @param testPlanId 
     * @param testPlanTestPointsAutoTestsRerunApiModel  (optional)
     * @return RequestConfig
     */
    fun apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRerunPostRequestConfig(projectId: kotlin.String, testPlanId: java.util.UUID, testPlanTestPointsAutoTestsRerunApiModel: TestPlanTestPointsAutoTestsRerunApiModel?) : RequestConfig<TestPlanTestPointsAutoTestsRerunApiModel> {
        val localVariableBody = testPlanTestPointsAutoTestsRerunApiModel
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/projects/{projectId}/test-plans/{testPlanId}/test-points/autotests/rerun".replace("{"+"projectId"+"}", encodeURIComponent(projectId.toString())).replace("{"+"testPlanId"+"}", encodeURIComponent(testPlanId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * POST /api/v2/projects/{projectId}/test-plans/{testPlanId}/test-points/autotests/run
     * Run autotests.
     * 
     * @param projectId Internal (UUID) or global (integer) identifier
     * @param testPlanId 
     * @param testPlanTestPointsAutoTestsRunApiModel  (optional)
     * @return TestRunNameApiResult
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRunPost(projectId: kotlin.String, testPlanId: java.util.UUID, testPlanTestPointsAutoTestsRunApiModel: TestPlanTestPointsAutoTestsRunApiModel? = null) : TestRunNameApiResult {
        val localVarResponse = apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRunPostWithHttpInfo(projectId = projectId, testPlanId = testPlanId, testPlanTestPointsAutoTestsRunApiModel = testPlanTestPointsAutoTestsRunApiModel)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as TestRunNameApiResult
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * POST /api/v2/projects/{projectId}/test-plans/{testPlanId}/test-points/autotests/run
     * Run autotests.
     * 
     * @param projectId Internal (UUID) or global (integer) identifier
     * @param testPlanId 
     * @param testPlanTestPointsAutoTestsRunApiModel  (optional)
     * @return ApiResponse<TestRunNameApiResult?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRunPostWithHttpInfo(projectId: kotlin.String, testPlanId: java.util.UUID, testPlanTestPointsAutoTestsRunApiModel: TestPlanTestPointsAutoTestsRunApiModel?) : ApiResponse<TestRunNameApiResult?> {
        val localVariableConfig = apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRunPostRequestConfig(projectId = projectId, testPlanId = testPlanId, testPlanTestPointsAutoTestsRunApiModel = testPlanTestPointsAutoTestsRunApiModel)

        return request<TestPlanTestPointsAutoTestsRunApiModel, TestRunNameApiResult>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRunPost
     *
     * @param projectId Internal (UUID) or global (integer) identifier
     * @param testPlanId 
     * @param testPlanTestPointsAutoTestsRunApiModel  (optional)
     * @return RequestConfig
     */
    fun apiV2ProjectsProjectIdTestPlansTestPlanIdTestPointsAutotestsRunPostRequestConfig(projectId: kotlin.String, testPlanId: java.util.UUID, testPlanTestPointsAutoTestsRunApiModel: TestPlanTestPointsAutoTestsRunApiModel?) : RequestConfig<TestPlanTestPointsAutoTestsRunApiModel> {
        val localVariableBody = testPlanTestPointsAutoTestsRunApiModel
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/api/v2/projects/{projectId}/test-plans/{testPlanId}/test-points/autotests/run".replace("{"+"projectId"+"}", encodeURIComponent(projectId.toString())).replace("{"+"testPlanId"+"}", encodeURIComponent(testPlanId.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
